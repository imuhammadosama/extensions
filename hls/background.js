// prettier-ignore
/*! For license information please see background.js.LICENSE.txt */
(()=>{var t={9216:(t,e,r)=>{"use strict";const n=r(1936),i=r(7152),o=r(2529),s=r(3638),u=r(1562);e.M=function(t,e=s.rootReducer(void 0,{type:"init"})){const r=i.createEpicMiddleware({dependencies:t}),c=o.createRootEpic(),a=n.configureStore({reducer:s.rootReducer,middleware:[u.default,r],preloadedState:e});return r.run(c),a.dispatch({type:"init/start"}),a}},3638:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=r(1936),i=r(4417);e.rootReducer=n.combineReducers({playlists:i.playlistsSlice.reducer,levels:i.levelsSlice.reducer,config:i.configSlice.reducer,tabs:i.tabsSlice.reducer,jobs:i.jobsSlice.reducer})},8834:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=r(1936);e.configSlice=n.createSlice({name:"config",initialState:{concurrency:2,saveDialog:!1,fetchAttempts:100},reducers:{setConcurrency(t,e){t.concurrency=e.payload.concurrency},setSaveDialog(t,e){t.saveDialog=e.payload.saveDialog},setFetchAttempts(t,e){t.fetchAttempts=e.payload.fetchAttempts}}})},4417:(t,e,r)=>{"use strict";function n(t){for(var r in t)e.hasOwnProperty(r)||(e[r]=t[r])}Object.defineProperty(e,"__esModule",{value:!0}),n(r(2778)),n(r(1702)),n(r(8834)),n(r(7517)),n(r(7303))},7303:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=r(1936),i={jobsStatus:{},jobs:{}};e.jobsSlice=n.createSlice({name:"jobs",initialState:i,reducers:{download(t,e){},clear(t){t.jobs=i.jobs,t.jobsStatus=i.jobsStatus},add(t,e){const{job:r}=e.payload;t.jobs[r.id]=r,t.jobsStatus[r.id]={done:0,total:r.fragments.length,status:"downloading"}},cancel(t,e){},delete(t,e){},deleteSuccess(t,e){const{jobId:r}=e.payload;delete t.jobs[r],delete t.jobsStatus[r]},finishDownload(t,e){const{jobId:r}=e.payload,n=t.jobsStatus[r];n.done=n.total,n.status="ready"},incDownloadStatus(t,e){const{jobId:r}=e.payload;t.jobsStatus[r].done++},saveAs(t,e){const{jobId:r}=e.payload;t.jobsStatus[r].status="saving"},saveAsSuccess(t,e){const{jobId:r}=e.payload;t.jobsStatus[r].status="done"}}})},2778:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=r(1936),i={levels:{}};e.levelsSlice=n.createSlice({name:"levels",initialState:i,reducers:{download(t,e){},add(t,e){const{levels:r}=e.payload;r.forEach((e=>{t.levels[e.id]=e}))},clear(t){t.levels=i.levels},removePlaylistLevels(t,e){const{playlistID:r}=e.payload;for(const e in t.levels)if(t.levels.hasOwnProperty(e)){const n=t.levels[e];(null==n?void 0:n.playlistID)===r&&delete t.levels[e]}}}})},1702:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=r(1936),i={playlistsStatus:{},playlists:{}};e.playlistsSlice=n.createSlice({name:"playlists",initialState:i,reducers:{clearPlaylists(t){t.playlists=i.playlists,t.playlistsStatus=i.playlistsStatus},addPlaylist(t,e){const r=e.payload;t.playlistsStatus[r.id]={status:"init"},t.playlists[r.id]=r},removePlaylist(t,e){const r=e.payload.playlistID;delete t.playlistsStatus[r],delete t.playlists[r]},fetchPlaylistLevels(t,e){const{playlistID:r}=e.payload;t.playlistsStatus[r].status="fetching"},fetchPlaylistLevelsSuccess(t,e){const{playlistID:r}=e.payload;t.playlistsStatus[r].status="ready"},fetchPlaylistLevelsFailed(t,e){const{playlistID:r}=e.payload;t.playlistsStatus[r].status="error"}}})},7517:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=r(1936);e.tabsSlice=n.createSlice({name:"tabs",initialState:{current:{id:-1}},reducers:{setTab(t,e){t.current=e.payload.tab}}})},2420:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=r(1758),i=r(2868),o=r(2778),s=r(7705),u=r(7303);e.addDownloadJobEpic=(t,e,{loader:r,parser:c})=>t.pipe(i.filter(o.levelsSlice.actions.download.match),i.map((t=>t.payload.levelID)),i.map((t=>e.value.levels.levels[t])),i.map((t=>t)),i.mergeMap((t=>n.from(s.getFragmentsDetailsFactory(r,c)(t,e.value.config.fetchAttempts))),((t,e)=>({fragments:e,level:t}))),i.map((({level:t,fragments:r})=>({level:t,fragments:r,playlist:e.value.playlists.playlists[t.playlistID]}))),i.map((({level:t,fragments:e,playlist:r})=>({level:t,filename:s.generateFileName()(r,t),fragments:e}))),i.mergeMap((({fragments:t,level:e,filename:r})=>n.of(u.jobsSlice.actions.add({job:{id:`${r}/${(new Date).toISOString()}`,fragments:t,filename:r,createdAt:Date.now(),bitrate:e.bitrate,width:e.width,height:e.height}})))))},9658:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=r(1758),i=r(2868),o=r(4417);e.addPlaylistEpic=(t,e)=>t.pipe(i.filter(o.playlistsSlice.actions.addPlaylist.match),i.map((t=>t.payload)),i.filter((({id:t})=>Boolean(e.value.playlists.playlists[t]))),i.mergeMap((({id:t})=>n.of(o.playlistsSlice.actions.fetchPlaylistLevels({playlistID:t})))))},3998:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=r(1758),i=r(2868),o=r(4417);e.cancelJobdeleteJobEpic=(t,e,{fs:r})=>t.pipe(i.filter(o.jobsSlice.actions.cancel.match),i.mergeMap((({payload:{jobId:t}})=>n.of(o.jobsSlice.actions.delete({jobId:t})))))},2632:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=r(1758),i=r(2868),o=r(4417),s=r(7705);e.deleteJobEpic=(t,e,{fs:r})=>t.pipe(i.filter(o.jobsSlice.actions.delete.match),i.map((t=>t.payload.jobId)),i.mergeMap((t=>n.from(s.deleteBucketFactory(r)(t))),(t=>({jobId:t}))),i.mergeMap((({jobId:t})=>n.of(o.jobsSlice.actions.deleteSuccess({jobId:t})))))},6998:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=r(1758),i=r(2868),o=r(4417),s=r(7705);e.downloadJobEpic=(t,e,{fs:r,loader:u,decryptor:c})=>t.pipe(i.filter(o.jobsSlice.actions.add.match),i.map((t=>t.payload.job)),i.mergeMap((({fragments:t,id:e})=>n.from(s.createBucketFactory(r)(e,t.length).then((()=>({fragments:t,id:e})))))),i.mergeMap((({fragments:a,id:l})=>n.from(a).pipe(i.mergeMap((t=>n.from(s.downloadSingleFactory(u)(t,e.value.config.fetchAttempts).then((e=>({fragment:t,data:e,id:l}))))),e.value.config.concurrency),i.mergeMap((({data:t,fragment:r,id:n})=>s.decryptSingleFragmentFactory(u,c)(r.key,t,e.value.config.fetchAttempts).then((t=>({fragment:r,data:t,id:n}))))),i.mergeMap((({data:t,id:e,fragment:n})=>s.writeToBucketFactory(r)(e,n.index,t).then((()=>({id:e}))))),i.mergeMap((({id:t})=>n.of(o.jobsSlice.actions.incDownloadStatus({jobId:t})))),i.takeUntil(t.pipe(i.filter(o.jobsSlice.actions.cancel.match)).pipe(i.filter((t=>t.payload.jobId===l))))))))},3476:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=r(1758),i=r(2868),o=r(4417),s=r(2778),u=r(7705);e.fetchPlaylistLevelsEpic=(t,e,{loader:r,parser:c})=>t.pipe(i.filter(o.playlistsSlice.actions.fetchPlaylistLevels.match),i.map((t=>t.payload.playlistID)),i.map((t=>e.value.playlists.playlists[t])),i.mergeMap((({uri:t})=>n.from(u.getLevelsFactory(r,c)(t,e.value.config.fetchAttempts))),(({id:t},e)=>({levels:e,playlistID:t}))),i.mergeMap((({playlistID:t,levels:e})=>0===e.length?n.of(o.playlistsSlice.actions.fetchPlaylistLevelsFailed({playlistID:t})):n.of(o.playlistsSlice.actions.fetchPlaylistLevelsSuccess({playlistID:t}),s.levelsSlice.actions.add({levels:e})))))},6476:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=r(1758),i=r(2868),o=r(4417);e.incDownloadStatusEpic=(t,e)=>t.pipe(i.filter(o.jobsSlice.actions.incDownloadStatus.match),i.map((t=>t.payload.jobId)),i.map((t=>({id:t,status:e.value.jobs.jobsStatus[t]}))),i.filter((({status:t})=>Boolean(t))),i.filter((({status:t})=>t.done===t.total)),i.mergeMap((({id:t})=>n.of(o.jobsSlice.actions.finishDownload({jobId:t}),o.jobsSlice.actions.saveAs({jobId:t})))))},7548:(t,e,r)=>{"use strict";function n(t){for(var r in t)e.hasOwnProperty(r)||(e[r]=t[r])}Object.defineProperty(e,"__esModule",{value:!0}),n(r(6998)),n(r(2420)),n(r(9021)),n(r(6476)),n(r(3476)),n(r(9658)),n(r(2632)),n(r(6330)),n(r(3998))},6330:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=r(7152),i=r(1758),o=r(2868),s=r(7705),u=r(1936);e.fsCleanupOnInitEpic=(t,e,{fs:r})=>t.pipe(n.ofType("init/start"),o.mergeMap((()=>i.from(s.fsCleanupFactory(r)()))),o.mergeMap((()=>i.of(u.createAction("init/done")()))))},2529:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=r(7152),i=r(1758),o=r(2868),s=r(7548);e.createRootEpic=function(){const t=Object.values({...s}),e=new i.BehaviorSubject(n.combineEpics(...t));return(t,r,n)=>e.pipe(o.mergeMap((e=>e(t,r,n))))}},9021:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=r(1758),i=r(2868),o=r(4417),s=r(7705);e.saveAsJobEpic=(t,e,{fs:r})=>t.pipe(i.filter(o.jobsSlice.actions.saveAs.match),i.map((t=>t.payload.jobId)),i.mergeMap((t=>n.from(s.getLinkBucketFactory(r)(t))),((t,e)=>({jobId:t,link:e}))),i.map((({jobId:t,link:r})=>({job:e.value.jobs.jobs[t],dialog:e.value.config.saveDialog,link:r}))),i.mergeMap((({dialog:t,link:e,job:i})=>n.from(s.saveAsFactory(r)(i.filename,e,{dialog:t}))),(({job:t})=>({job:t}))),i.mergeMap((({job:t})=>n.of(o.jobsSlice.actions.saveAsSuccess({jobId:t.id})))))},4392:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.createBucketFactory=t=>async(e,r)=>{await t.createBucket(e,r)}},5530:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.decryptSingleFragmentFactory=(t,e)=>async(r,n,i)=>{if(!r.uri||!r.iv)return n;const o=await t.fetchArrayBuffer(r.uri,i);return await e.decrypt(n,o,r.iv)}},6920:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.deleteBucketFactory=t=>async e=>{await t.deleteBucket(e)}},6913:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.downloadSingleFactory=t=>async(e,r)=>await t.fetchArrayBuffer(e.uri,r)},2266:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.fsCleanupFactory=t=>async()=>{await t.cleanup()}},8501:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.generateFileName=()=>(t,e)=>{const r=t.uri.split("?")[0].split("/"),n=r[r.length-1].split(".m3u8")[0];return t.pageTitle?`${t.pageTitle}-${n}.ts`:`${n}.ts`}},1881:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.getFragmentsDetailsFactory=(t,e)=>async(r,n)=>{const i=await t.fetchText(r.uri,n);return e.parseLevelPlaylist(i,r.uri,r.index)}},9017:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.getLevelsFactory=(t,e)=>async(r,n)=>{try{const i=await t.fetchText(r,n);return e.parseMasterPlaylist(i,r)}catch(t){throw Error("LevelManifest")}}},7804:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.getLinkBucketFactory=t=>async e=>{const r=await t.getBucket(e);return await r.getLink()}},7705:(t,e,r)=>{"use strict";function n(t){for(var r in t)e.hasOwnProperty(r)||(e[r]=t[r])}Object.defineProperty(e,"__esModule",{value:!0}),n(r(4392)),n(r(5530)),n(r(6913)),n(r(1881)),n(r(9017)),n(r(7804)),n(r(3536)),n(r(8150)),n(r(8501)),n(r(6920)),n(r(2266))},3536:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.writeToBucketFactory=t=>async(e,r,n)=>{const i=await t.getBucket(e);await i.write(r,n)}},8150:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.saveAsFactory=t=>async(e,r,n)=>{await t.saveAs(e,r,n)}},1936:(t,e,r)=>{"use strict";function n(t){for(var e=arguments.length,r=Array(e>1?e-1:0),n=1;n<e;n++)r[n-1]=arguments[n];throw Error("[Immer] minified error nr: "+t+(r.length?" "+r.map((function(t){return"'"+t+"'"})).join(","):"")+". Find the full error at: https://bit.ly/3cXEKWf")}function i(t){return!!t&&!!t[Y]}function o(t){return!!t&&(function(t){if(!t||"object"!=typeof t)return!1;var e=Object.getPrototypeOf(t);if(null===e)return!0;var r=Object.hasOwnProperty.call(e,"constructor")&&e.constructor;return r===Object||"function"==typeof r&&Function.toString.call(r)===q}(t)||Array.isArray(t)||!!t[W]||!!t.constructor[W]||h(t)||p(t))}function s(t){return i(t)||n(23,t),t[Y].t}function u(t,e,r){void 0===r&&(r=!1),0===c(t)?(r?Object.keys:K)(t).forEach((function(n){r&&"symbol"==typeof n||e(n,t[n],t)})):t.forEach((function(r,n){return e(n,r,t)}))}function c(t){var e=t[Y];return e?e.i>3?e.i-4:e.i:Array.isArray(t)?1:h(t)?2:p(t)?3:0}function a(t,e){return 2===c(t)?t.has(e):Object.prototype.hasOwnProperty.call(t,e)}function l(t,e,r){var n=c(t);2===n?t.set(e,r):3===n?(t.delete(e),t.add(r)):t[e]=r}function f(t,e){return t===e?0!==t||1/t==1/e:t!=t&&e!=e}function h(t){return U&&t instanceof Map}function p(t){return Z&&t instanceof Set}function d(t){return t.o||t.t}function y(t){if(Array.isArray(t))return Array.prototype.slice.call(t);var e=X(t);delete e[Y];for(var r=K(e),n=0;n<r.length;n++){var i=r[n],o=e[i];!1===o.writable&&(o.writable=!0,o.configurable=!0),(o.get||o.set)&&(e[i]={configurable:!0,writable:!0,enumerable:o.enumerable,value:t[i]})}return Object.create(Object.getPrototypeOf(t),e)}function v(t,e){return void 0===e&&(e=!1),g(t)||i(t)||!o(t)||(c(t)>1&&(t.set=t.add=t.clear=t.delete=b),Object.freeze(t),e&&u(t,(function(t,e){return v(e,!0)}),!0)),t}function b(){n(2)}function g(t){return null==t||"object"!=typeof t||Object.isFrozen(t)}function m(t){var e=$[t];return e||n(18,t),e}function w(){return V}function x(t,e){e&&(m("Patches"),t.u=[],t.s=[],t.v=e)}function A(t){S(t),t.p.forEach(T),t.p=null}function S(t){t===V&&(V=t.l)}function _(t){return V={p:[],l:V,h:t,m:!0,_:0}}function T(t){var e=t[Y];0===e.i||1===e.i?e.j():e.O=!0}function E(t,e){e._=e.p.length;var r=e.p[0],i=void 0!==t&&t!==r;return e.h.g||m("ES5").S(e,t,i),i?(r[Y].P&&(A(e),n(4)),o(t)&&(t=O(e,t),e.l||P(e,t)),e.u&&m("Patches").M(r[Y].t,t,e.u,e.s)):t=O(e,r,[]),A(e),e.u&&e.v(e.u,e.s),t!==B?t:void 0}function O(t,e,r){if(g(e))return e;var n=e[Y];if(!n)return u(e,(function(i,o){return j(t,n,e,i,o,r)}),!0),e;if(n.A!==t)return e;if(!n.P)return P(t,n.t,!0),n.t;if(!n.I){n.I=!0,n.A._--;var i=4===n.i||5===n.i?n.o=y(n.k):n.o;u(3===n.i?new Set(i):i,(function(e,o){return j(t,n,i,e,o,r)})),P(t,i,!1),r&&t.u&&m("Patches").R(n,r,t.u,t.s)}return n.o}function j(t,e,r,n,s,u){if(i(s)){var c=O(t,s,u&&e&&3!==e.i&&!a(e.D,n)?u.concat(n):void 0);if(l(r,n,c),!i(c))return;t.m=!1}if(o(s)&&!g(s)){if(!t.h.F&&t._<1)return;O(t,s),e&&e.A.l||P(t,s)}}function P(t,e,r){void 0===r&&(r=!1),t.h.F&&t.m&&v(e,r)}function I(t,e){var r=t[Y];return(r?d(r):t)[e]}function N(t,e){if(e in t)for(var r=Object.getPrototypeOf(t);r;){var n=Object.getOwnPropertyDescriptor(r,e);if(n)return n;r=Object.getPrototypeOf(r)}}function k(t){t.P||(t.P=!0,t.l&&k(t.l))}function D(t){t.o||(t.o=y(t.t))}function C(t,e,r){var n=h(e)?m("MapSet").N(e,r):p(e)?m("MapSet").T(e,r):t.g?function(t,e){var r=Array.isArray(t),n={i:r?1:0,A:e?e.A:w(),P:!1,I:!1,D:{},l:e,t,k:null,o:null,j:null,C:!1},i=n,o=H;r&&(i=[n],o=G);var s=Proxy.revocable(i,o),u=s.revoke,c=s.proxy;return n.k=c,n.j=u,c}(e,r):m("ES5").J(e,r);return(r?r.A:w()).p.push(n),n}function L(t){return i(t)||n(22,t),function t(e){if(!o(e))return e;var r,n=e[Y],i=c(e);if(n){if(!n.P&&(n.i<4||!m("ES5").K(n)))return n.t;n.I=!0,r=M(e,i),n.I=!1}else r=M(e,i);return u(r,(function(e,i){n&&function(t,e){return 2===c(t)?t.get(e):t[e]}(n.t,e)===i||l(r,e,t(i))})),3===i?new Set(r):r}(t)}function M(t,e){switch(e){case 2:return new Map(t);case 3:return Array.from(t)}return y(t)}r.r(e),r.d(e,{MiddlewareArray:()=>Rt,__DO_NOT_USE__ActionTypes:()=>ut,applyMiddleware:()=>dt,bindActionCreators:()=>ht,combineReducers:()=>lt,compose:()=>pt,configureStore:()=>Wt,createAction:()=>Yt,createAsyncThunk:()=>ce,createDraftSafeSelector:()=>Ct,createEntityAdapter:()=>re,createImmutableStateInvariantMiddleware:()=>Ft,createNextState:()=>tt,createReducer:()=>$t,createSelector:()=>gt,createSerializableStateInvariantMiddleware:()=>zt,createSlice:()=>Ht,createStore:()=>at,current:()=>L,findNonSerializableValue:()=>Zt,freeze:()=>v,getDefaultMiddleware:()=>Bt,getType:()=>Kt,isAllOf:()=>he,isAnyOf:()=>fe,isAsyncThunkAction:()=>me,isDraft:()=>i,isFulfilled:()=>ge,isImmutableDefault:()=>Vt,isPending:()=>ye,isPlain:()=>Ut,isPlainObject:()=>Mt,isRejected:()=>ve,isRejectedWithValue:()=>be,miniSerializeError:()=>ue,nanoid:()=>ne,original:()=>s,unwrapResult:()=>ae});var R,V,F="undefined"!=typeof Symbol&&"symbol"==typeof Symbol("x"),U="undefined"!=typeof Map,Z="undefined"!=typeof Set,z="undefined"!=typeof Proxy&&void 0!==Proxy.revocable&&"undefined"!=typeof Reflect,B=F?Symbol.for("immer-nothing"):((R={})["immer-nothing"]=!0,R),W=F?Symbol.for("immer-draftable"):"__$immer_draftable",Y=F?Symbol.for("immer-state"):"__$immer_state",q=("undefined"!=typeof Symbol&&Symbol.iterator,""+Object.prototype.constructor),K="undefined"!=typeof Reflect&&Reflect.ownKeys?Reflect.ownKeys:void 0!==Object.getOwnPropertySymbols?function(t){return Object.getOwnPropertyNames(t).concat(Object.getOwnPropertySymbols(t))}:Object.getOwnPropertyNames,X=Object.getOwnPropertyDescriptors||function(t){var e={};return K(t).forEach((function(r){e[r]=Object.getOwnPropertyDescriptor(t,r)})),e},$={},H={get:function(t,e){if(e===Y)return t;var r=d(t);if(!a(r,e))return function(t,e,r){var n,i=N(e,r);return i?"value"in i?i.value:null===(n=i.get)||void 0===n?void 0:n.call(t.k):void 0}(t,r,e);var n=r[e];return t.I||!o(n)?n:n===I(t.t,e)?(D(t),t.o[e]=C(t.A.h,n,t)):n},has:function(t,e){return e in d(t)},ownKeys:function(t){return Reflect.ownKeys(d(t))},set:function(t,e,r){var n=N(d(t),e);if(null==n?void 0:n.set)return n.set.call(t.k,r),!0;if(!t.P){var i=I(d(t),e),o=null==i?void 0:i[Y];if(o&&o.t===r)return t.o[e]=r,t.D[e]=!1,!0;if(f(r,i)&&(void 0!==r||a(t.t,e)))return!0;D(t),k(t)}return t.o[e]===r&&"number"!=typeof r&&(void 0!==r||e in t.o)||(t.o[e]=r,t.D[e]=!0,!0)},deleteProperty:function(t,e){return void 0!==I(t.t,e)||e in t.t?(t.D[e]=!1,D(t),k(t)):delete t.D[e],t.o&&delete t.o[e],!0},getOwnPropertyDescriptor:function(t,e){var r=d(t),n=Reflect.getOwnPropertyDescriptor(r,e);return n?{writable:!0,configurable:1!==t.i||"length"!==e,enumerable:n.enumerable,value:r[e]}:n},defineProperty:function(){n(11)},getPrototypeOf:function(t){return Object.getPrototypeOf(t.t)},setPrototypeOf:function(){n(12)}},G={};u(H,(function(t,e){G[t]=function(){return arguments[0]=arguments[0][0],e.apply(this,arguments)}})),G.deleteProperty=function(t,e){return G.set.call(this,t,e,void 0)},G.set=function(t,e,r){return H.set.call(this,t[0],e,r,t[0])};var Q=new(function(){function t(t){var e=this;this.g=z,this.F=!0,this.produce=function(t,r,i){if("function"==typeof t&&"function"!=typeof r){var s=r;r=t;var u=e;return function(t){var e=this;void 0===t&&(t=s);for(var n=arguments.length,i=Array(n>1?n-1:0),o=1;o<n;o++)i[o-1]=arguments[o];return u.produce(t,(function(t){var n;return(n=r).call.apply(n,[e,t].concat(i))}))}}var c;if("function"!=typeof r&&n(6),void 0!==i&&"function"!=typeof i&&n(7),o(t)){var a=_(e),l=C(e,t,void 0),f=!0;try{c=r(l),f=!1}finally{f?A(a):S(a)}return"undefined"!=typeof Promise&&c instanceof Promise?c.then((function(t){return x(a,i),E(t,a)}),(function(t){throw A(a),t})):(x(a,i),E(c,a))}if(!t||"object"!=typeof t){if(void 0===(c=r(t))&&(c=t),c===B&&(c=void 0),e.F&&v(c,!0),i){var h=[],p=[];m("Patches").M(t,c,h,p),i(h,p)}return c}n(21,t)},this.produceWithPatches=function(t,r){if("function"==typeof t)return function(r){for(var n=arguments.length,i=Array(n>1?n-1:0),o=1;o<n;o++)i[o-1]=arguments[o];return e.produceWithPatches(r,(function(e){return t.apply(void 0,[e].concat(i))}))};var n,i,o=e.produce(t,r,(function(t,e){n=t,i=e}));return"undefined"!=typeof Promise&&o instanceof Promise?o.then((function(t){return[t,n,i]})):[o,n,i]},"boolean"==typeof(null==t?void 0:t.useProxies)&&this.setUseProxies(t.useProxies),"boolean"==typeof(null==t?void 0:t.autoFreeze)&&this.setAutoFreeze(t.autoFreeze)}var e=t.prototype;return e.createDraft=function(t){o(t)||n(8),i(t)&&(t=L(t));var e=_(this),r=C(this,t,void 0);return r[Y].C=!0,S(e),r},e.finishDraft=function(t,e){var r=(t&&t[Y]).A;return x(r,e),E(void 0,r)},e.setAutoFreeze=function(t){this.F=t},e.setUseProxies=function(t){t&&!z&&n(20),this.g=t},e.applyPatches=function(t,e){var r;for(r=e.length-1;r>=0;r--){var n=e[r];if(0===n.path.length&&"replace"===n.op){t=n.value;break}}r>-1&&(e=e.slice(r+1));var o=m("Patches").$;return i(t)?o(t,e):this.produce(t,(function(t){return o(t,e)}))},t}()),J=Q.produce;Q.produceWithPatches.bind(Q),Q.setAutoFreeze.bind(Q),Q.setUseProxies.bind(Q),Q.applyPatches.bind(Q),Q.createDraft.bind(Q),Q.finishDraft.bind(Q);const tt=J;function et(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function rt(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function nt(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?rt(Object(r),!0).forEach((function(e){et(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):rt(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function it(t){return"Minified Redux error #"+t+"; visit https://redux.js.org/Errors?code="+t+" for the full message or use the non-minified dev environment for full errors. "}var ot="function"==typeof Symbol&&Symbol.observable||"@@observable",st=function(){return Math.random().toString(36).substring(7).split("").join(".")},ut={INIT:"@@redux/INIT"+st(),REPLACE:"@@redux/REPLACE"+st(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+st()}};function ct(t){if("object"!=typeof t||null===t)return!1;for(var e=t;null!==Object.getPrototypeOf(e);)e=Object.getPrototypeOf(e);return Object.getPrototypeOf(t)===e}function at(t,e,r){var n;if("function"==typeof e&&"function"==typeof r||"function"==typeof r&&"function"==typeof arguments[3])throw new Error(it(0));if("function"==typeof e&&void 0===r&&(r=e,e=void 0),void 0!==r){if("function"!=typeof r)throw new Error(it(1));return r(at)(t,e)}if("function"!=typeof t)throw new Error(it(2));var i=t,o=e,s=[],u=s,c=!1;function a(){u===s&&(u=s.slice())}function l(){if(c)throw new Error(it(3));return o}function f(t){if("function"!=typeof t)throw new Error(it(4));if(c)throw new Error(it(5));var e=!0;return a(),u.push(t),function(){if(e){if(c)throw new Error(it(6));e=!1,a();var r=u.indexOf(t);u.splice(r,1),s=null}}}function h(t){if(!ct(t))throw new Error(it(7));if(void 0===t.type)throw new Error(it(8));if(c)throw new Error(it(9));try{c=!0,o=i(o,t)}finally{c=!1}for(var e=s=u,r=0;r<e.length;r++)(0,e[r])();return t}function p(t){if("function"!=typeof t)throw new Error(it(10));i=t,h({type:ut.REPLACE})}function d(){var t,e=f;return(t={subscribe:function(t){if("object"!=typeof t||null===t)throw new Error(it(11));function r(){t.next&&t.next(l())}return r(),{unsubscribe:e(r)}}})[ot]=function(){return this},t}return h({type:ut.INIT}),(n={dispatch:h,subscribe:f,getState:l,replaceReducer:p})[ot]=d,n}function lt(t){for(var e=Object.keys(t),r={},n=0;n<e.length;n++){var i=e[n];"function"==typeof t[i]&&(r[i]=t[i])}var o,s=Object.keys(r);try{!function(t){Object.keys(t).forEach((function(e){var r=t[e];if(void 0===r(void 0,{type:ut.INIT}))throw new Error(it(12));if(void 0===r(void 0,{type:ut.PROBE_UNKNOWN_ACTION()}))throw new Error(it(13))}))}(r)}catch(t){o=t}return function(t,e){if(void 0===t&&(t={}),o)throw o;for(var n=!1,i={},u=0;u<s.length;u++){var c=s[u],a=r[c],l=t[c],f=a(l,e);if(void 0===f)throw e&&e.type,new Error(it(14));i[c]=f,n=n||f!==l}return(n=n||s.length!==Object.keys(t).length)?i:t}}function ft(t,e){return function(){return e(t.apply(this,arguments))}}function ht(t,e){if("function"==typeof t)return ft(t,e);if("object"!=typeof t||null===t)throw new Error(it(16));var r={};for(var n in t){var i=t[n];"function"==typeof i&&(r[n]=ft(i,e))}return r}function pt(){for(var t=arguments.length,e=new Array(t),r=0;r<t;r++)e[r]=arguments[r];return 0===e.length?function(t){return t}:1===e.length?e[0]:e.reduce((function(t,e){return function(){return t(e.apply(void 0,arguments))}}))}function dt(){for(var t=arguments.length,e=new Array(t),r=0;r<t;r++)e[r]=arguments[r];return function(t){return function(){var r=t.apply(void 0,arguments),n=function(){throw new Error(it(15))},i={getState:r.getState,dispatch:function(){return n.apply(void 0,arguments)}},o=e.map((function(t){return t(i)}));return n=pt.apply(void 0,o)(r.dispatch),nt(nt({},r),{},{dispatch:n})}}}function yt(t,e){return t===e}function vt(t,e,r){if(null===e||null===r||e.length!==r.length)return!1;for(var n=e.length,i=0;i<n;i++)if(!t(e[i],r[i]))return!1;return!0}function bt(t){var e=Array.isArray(t[0])?t[0]:t;if(!e.every((function(t){return"function"==typeof t}))){var r=e.map((function(t){return typeof t})).join(", ");throw new Error("Selector creators expect all input-selectors to be functions, instead received the following types: ["+r+"]")}return e}var gt=function(t){for(var e=arguments.length,r=Array(e>1?e-1:0),n=1;n<e;n++)r[n-1]=arguments[n];return function(){for(var e=arguments.length,n=Array(e),i=0;i<e;i++)n[i]=arguments[i];var o=0,s=n.pop(),u=bt(n),c=t.apply(void 0,[function(){return o++,s.apply(null,arguments)}].concat(r)),a=t((function(){for(var t=[],e=u.length,r=0;r<e;r++)t.push(u[r].apply(null,arguments));return c.apply(null,t)}));return a.resultFunc=s,a.dependencies=u,a.recomputations=function(){return o},a.resetRecomputations=function(){return o=0},a}}((function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:yt,r=null,n=null;return function(){return vt(e,r,arguments)||(n=t.apply(null,arguments)),r=arguments,n}}));function mt(t){return function(e){var r=e.dispatch,n=e.getState;return function(e){return function(i){return"function"==typeof i?i(r,n,t):e(i)}}}}var wt=mt();wt.withExtraArgument=mt;const xt=wt;var At,St=(At=function(t,e){return(At=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])})(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=t}At(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),_t=function(t,e){for(var r=0,n=e.length,i=t.length;r<n;r++,i++)t[i]=e[r];return t},Tt=Object.defineProperty,Et=Object.defineProperties,Ot=Object.getOwnPropertyDescriptors,jt=Object.getOwnPropertySymbols,Pt=Object.prototype.hasOwnProperty,It=Object.prototype.propertyIsEnumerable,Nt=function(t,e,r){return e in t?Tt(t,e,{enumerable:!0,configurable:!0,writable:!0,value:r}):t[e]=r},kt=function(t,e){for(var r in e||(e={}))Pt.call(e,r)&&Nt(t,r,e[r]);if(jt)for(var n=0,i=jt(e);n<i.length;n++)r=i[n],It.call(e,r)&&Nt(t,r,e[r]);return t},Dt=function(t,e){return Et(t,Ot(e))},Ct=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var r=gt.apply(void 0,t),n=function(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];return r.apply(void 0,_t([i(t)?L(t):t],e))};return n},Lt="undefined"!=typeof window&&window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__?window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__:function(){if(0!==arguments.length)return"object"==typeof arguments[0]?pt:pt.apply(null,arguments)};function Mt(t){if("object"!=typeof t||null===t)return!1;for(var e=t;null!==Object.getPrototypeOf(e);)e=Object.getPrototypeOf(e);return Object.getPrototypeOf(t)===e}"undefined"!=typeof window&&window.__REDUX_DEVTOOLS_EXTENSION__&&window.__REDUX_DEVTOOLS_EXTENSION__;var Rt=function(t){function e(){for(var r=[],n=0;n<arguments.length;n++)r[n]=arguments[n];var i=t.apply(this,r)||this;return Object.setPrototypeOf(i,e.prototype),i}return St(e,t),Object.defineProperty(e,Symbol.species,{get:function(){return e},enumerable:!1,configurable:!0}),e.prototype.concat=function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];return t.prototype.concat.apply(this,e)},e.prototype.prepend=function(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];return 1===t.length&&Array.isArray(t[0])?new(e.bind.apply(e,_t([void 0],t[0].concat(this)))):new(e.bind.apply(e,_t([void 0],t.concat(this))))},e}(Array);function Vt(t){return"object"!=typeof t||null==t||Object.isFrozen(t)}function Ft(t){return void 0===t&&(t={}),function(){return function(t){return function(e){return t(e)}}}}function Ut(t){var e=typeof t;return"undefined"===e||null===t||"string"===e||"boolean"===e||"number"===e||Array.isArray(t)||Mt(t)}function Zt(t,e,r,n,i){var o;if(void 0===e&&(e=""),void 0===r&&(r=Ut),void 0===i&&(i=[]),!r(t))return{keyPath:e||"<root>",value:t};if("object"!=typeof t||null===t)return!1;for(var s=null!=n?n(t):Object.entries(t),u=i.length>0,c=0,a=s;c<a.length;c++){var l=a[c],f=l[0],h=l[1],p=e?e+"."+f:f;if(!(u&&i.indexOf(p)>=0)){if(!r(h))return{keyPath:p,value:h};if("object"==typeof h&&(o=Zt(h,p,r,n,i)))return o}}return!1}function zt(t){return void 0===t&&(t={}),function(){return function(t){return function(e){return t(e)}}}}function Bt(t){void 0===t&&(t={});var e=t.thunk,r=void 0===e||e,n=(t.immutableCheck,t.serializableCheck,new Rt);return r&&(function(t){return"boolean"==typeof t}(r)?n.push(xt):n.push(xt.withExtraArgument(r.extraArgument))),n}function Wt(t){var e,r=function(t){return Bt(t)},n=t||{},i=n.reducer,o=void 0===i?void 0:i,s=n.middleware,u=void 0===s?r():s,c=n.devTools,a=void 0===c||c,l=n.preloadedState,f=void 0===l?void 0:l,h=n.enhancers,p=void 0===h?void 0:h;if("function"==typeof o)e=o;else{if(!Mt(o))throw new Error('"reducer" is a required argument, and must be a function or an object of functions that can be passed to combineReducers');e=lt(o)}var d=u;"function"==typeof d&&(d=d(r));var y=dt.apply(void 0,d),v=pt;a&&(v=Lt(kt({trace:!1},"object"==typeof a&&a)));var b=[y];return Array.isArray(p)?b=_t([y],p):"function"==typeof p&&(b=p(b)),at(e,f,v.apply(void 0,b))}function Yt(t,e){function r(){for(var r=[],n=0;n<arguments.length;n++)r[n]=arguments[n];if(e){var i=e.apply(void 0,r);if(!i)throw new Error("prepareAction did not return an object");return kt(kt({type:t,payload:i.payload},"meta"in i&&{meta:i.meta}),"error"in i&&{error:i.error})}return{type:t,payload:r[0]}}return r.toString=function(){return""+t},r.type=t,r.match=function(e){return e.type===t},r}function qt(t){return["type","payload","error","meta"].indexOf(t)>-1}function Kt(t){return""+t}function Xt(t){var e,r={},n=[],i={addCase:function(t,e){var n="string"==typeof t?t:t.type;if(n in r)throw new Error("addCase cannot be called with two reducers for the same action type");return r[n]=e,i},addMatcher:function(t,e){return n.push({matcher:t,reducer:e}),i},addDefaultCase:function(t){return e=t,i}};return t(i),[r,n,e]}function $t(t,e,r,n){void 0===r&&(r=[]);var s="function"==typeof e?Xt(e):[e,r,n],u=s[0],c=s[1],a=s[2],l=tt(t,(function(){}));return function(t,e){void 0===t&&(t=l);var r=_t([u[e.type]],c.filter((function(t){return(0,t.matcher)(e)})).map((function(t){return t.reducer})));return 0===r.filter((function(t){return!!t})).length&&(r=[a]),r.reduce((function(t,r){if(r){var n;if(i(t))return void 0===(n=r(t,e))?t:n;if(o(t))return tt(t,(function(t){return r(t,e)}));if(void 0===(n=r(t,e))){if(null===t)return t;throw Error("A case reducer on a non-draftable value must not return undefined")}return n}return t}),t)}}function Ht(t){var e=t.name,r=t.initialState;if(!e)throw new Error("`name` is a required option for createSlice");var n=t.reducers||{},i="function"==typeof t.extraReducers?Xt(t.extraReducers):[t.extraReducers],o=i[0],s=void 0===o?{}:o,u=i[1],c=void 0===u?[]:u,a=i[2],l=void 0===a?void 0:a,f=Object.keys(n),h={},p={},d={};f.forEach((function(t){var r,i,o=n[t],s=e+"/"+t;"reducer"in o?(r=o.reducer,i=o.prepare):r=o,h[t]=r,p[s]=r,d[t]=i?Yt(s,i):Yt(s)}));var y=$t(r,kt(kt({},s),p),c,l);return{name:e,reducer:y,actions:d,caseReducers:h}}function Gt(t){return function(e,r){var n=function(e){var n;Mt(n=r)&&"string"==typeof n.type&&Object.keys(n).every(qt)?t(r.payload,e):t(r,e)};return i(e)?(n(e),e):tt(e,n)}}function Qt(t,e){return e(t)}function Jt(t){return Array.isArray(t)||(t=Object.values(t)),t}function te(t,e,r){for(var n=[],i=[],o=0,s=t=Jt(t);o<s.length;o++){var u=s[o],c=Qt(u,e);c in r.entities?i.push({id:c,changes:u}):n.push(u)}return[n,i]}function ee(t){function e(e,r){var n=Qt(e,t);n in r.entities||(r.ids.push(n),r.entities[n]=e)}function r(t,r){for(var n=0,i=t=Jt(t);n<i.length;n++)e(i[n],r)}function n(e,r){var n=Qt(e,t);n in r.entities||r.ids.push(n),r.entities[n]=e}function i(t,e){var r=!1;t.forEach((function(t){t in e.entities&&(delete e.entities[t],r=!0)})),r&&(e.ids=e.ids.filter((function(t){return t in e.entities})))}function o(e,r){var n={},i={};e.forEach((function(t){t.id in r.entities&&(i[t.id]={id:t.id,changes:kt(kt({},i[t.id]?i[t.id].changes:null),t.changes)})})),(e=Object.values(i)).length>0&&e.filter((function(e){return function(e,r,n){var i=n.entities[r.id],o=Object.assign({},i,r.changes),s=Qt(o,t),u=s!==r.id;return u&&(e[r.id]=s,delete n.entities[r.id]),n.entities[s]=o,u}(n,e,r)})).length>0&&(r.ids=r.ids.map((function(t){return n[t]||t})))}function s(e,n){var i=te(e,t,n),s=i[0];o(i[1],n),r(s,n)}return{removeAll:(u=function(t){Object.assign(t,{ids:[],entities:{}})},c=Gt((function(t,e){return u(e)})),function(t){return c(t,void 0)}),addOne:Gt(e),addMany:Gt(r),setOne:Gt(n),setMany:Gt((function(t,e){for(var r=0,i=t=Jt(t);r<i.length;r++)n(i[r],e)})),setAll:Gt((function(t,e){t=Jt(t),e.ids=[],e.entities={},r(t,e)})),updateOne:Gt((function(t,e){return o([t],e)})),updateMany:Gt(o),upsertOne:Gt((function(t,e){return s([t],e)})),upsertMany:Gt(s),removeOne:Gt((function(t,e){return i([t],e)})),removeMany:Gt(i)};var u,c}function re(t){void 0===t&&(t={});var e=kt({sortComparer:!1,selectId:function(t){return t.id}},t),r=e.selectId,n=e.sortComparer,i={getInitialState:function(t){return void 0===t&&(t={}),Object.assign({ids:[],entities:{}},t)}},o={getSelectors:function(t){var e=function(t){return t.ids},r=function(t){return t.entities},n=Ct(e,r,(function(t,e){return t.map((function(t){return e[t]}))})),i=function(t,e){return e},o=function(t,e){return t[e]},s=Ct(e,(function(t){return t.length}));if(!t)return{selectIds:e,selectEntities:r,selectAll:n,selectTotal:s,selectById:Ct(r,i,o)};var u=Ct(t,r);return{selectIds:Ct(t,e),selectEntities:u,selectAll:Ct(t,n),selectTotal:Ct(t,s),selectById:Ct(u,i,o)}}},s=n?function(t,e){var r=ee(t);function n(e,r){var n=(e=Jt(e)).filter((function(e){return!(Qt(e,t)in r.entities)}));0!==n.length&&u(n,r)}function i(t,e){0!==(t=Jt(t)).length&&u(t,e)}function o(e,r){var n=[];e.forEach((function(e){return function(e,r,n){if(!(r.id in n.entities))return!1;var i=n.entities[r.id],o=Object.assign({},i,r.changes),s=Qt(o,t);return delete n.entities[r.id],e.push(o),s!==r.id}(n,e,r)})),0!==n.length&&u(n,r)}function s(e,r){var i=te(e,t,r),s=i[0];o(i[1],r),n(s,r)}function u(r,n){r.forEach((function(e){n.entities[t(e)]=e}));var i=Object.values(n.entities);i.sort(e);var o=i.map(t);(function(t,e){if(t.length!==e.length)return!1;for(var r=0;r<t.length&&r<e.length;r++)if(t[r]!==e[r])return!1;return!0})(n.ids,o)||(n.ids=o)}return{removeOne:r.removeOne,removeMany:r.removeMany,removeAll:r.removeAll,addOne:Gt((function(t,e){return n([t],e)})),updateOne:Gt((function(t,e){return o([t],e)})),upsertOne:Gt((function(t,e){return s([t],e)})),setOne:Gt((function(t,e){return i([t],e)})),setMany:Gt(i),setAll:Gt((function(t,e){t=Jt(t),e.entities={},e.ids=[],n(t,e)})),addMany:Gt(n),updateMany:Gt(o),upsertMany:Gt(s)}}(r,n):ee(r);return kt(kt(kt({selectId:r,sortComparer:n},i),o),s)}var ne=function(t){void 0===t&&(t=21);for(var e="",r=t;r--;)e+="ModuleSymbhasOwnPr-0123456789ABCDEFGHNRVfgctiUvz_KqYTJkLxpZXIjQW"[64*Math.random()|0];return e},ie=["name","message","stack","code"],oe=function(t,e){this.payload=t,this.meta=e},se=function(t,e){this.payload=t,this.meta=e},ue=function(t){if("object"==typeof t&&null!==t){for(var e={},r=0,n=ie;r<n.length;r++){var i=n[r];"string"==typeof t[i]&&(e[i]=t[i])}return e}return{message:String(t)}};function ce(t,e,r){var n=Yt(t+"/fulfilled",(function(t,e,r,n){return{payload:t,meta:Dt(kt({},n||{}),{arg:r,requestId:e,requestStatus:"fulfilled"})}})),i=Yt(t+"/pending",(function(t,e,r){return{payload:void 0,meta:Dt(kt({},r||{}),{arg:e,requestId:t,requestStatus:"pending"})}})),o=Yt(t+"/rejected",(function(t,e,n,i,o){return{payload:i,error:(r&&r.serializeError||ue)(t||"Rejected"),meta:Dt(kt({},o||{}),{arg:n,requestId:e,rejectedWithValue:!!i,requestStatus:"rejected",aborted:"AbortError"===(null==t?void 0:t.name),condition:"ConditionError"===(null==t?void 0:t.name)})}})),s="undefined"!=typeof AbortController?AbortController:function(){function t(){this.signal={aborted:!1,addEventListener:function(){},dispatchEvent:function(){return!1},onabort:function(){},removeEventListener:function(){}}}return t.prototype.abort=function(){},t}();return Object.assign((function(t){return function(u,c,a){var l,f,h=(null!=(l=null==r?void 0:r.idGenerator)?l:ne)(),p=new s,d=new Promise((function(t,e){return p.signal.addEventListener("abort",(function(){return e({name:"AbortError",message:f||"Aborted"})}))})),y=!1,v=function(){return s=this,null,l=function(){var s,l,f;return function(t,e){var r,n,i,o,s={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function u(o){return function(u){return function(o){if(r)throw new TypeError("Generator is already executing.");for(;s;)try{if(r=1,n&&(i=2&o[0]?n.return:o[0]?n.throw||((i=n.return)&&i.call(n),0):n.next)&&!(i=i.call(n,o[1])).done)return i;switch(n=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return s.label++,{value:o[1],done:!1};case 5:s.label++,n=o[1],o=[0];continue;case 7:o=s.ops.pop(),s.trys.pop();continue;default:if(!((i=(i=s.trys).length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){s=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){s.label=o[1];break}if(6===o[0]&&s.label<i[1]){s.label=i[1],i=o;break}if(i&&s.label<i[2]){s.label=i[2],s.ops.push(o);break}i[2]&&s.ops.pop(),s.trys.pop();continue}o=e.call(t,s)}catch(t){o=[6,t],n=0}finally{r=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,u])}}}(this,(function(v){switch(v.label){case 0:if(v.trys.push([0,2,,3]),r&&r.condition&&!1===r.condition(t,{getState:c,extra:a}))throw{name:"ConditionError",message:"Aborted due to condition callback returning false."};return y=!0,u(i(h,t,null==(s=null==r?void 0:r.getPendingMeta)?void 0:s.call(r,{requestId:h,arg:t},{getState:c,extra:a}))),[4,Promise.race([d,Promise.resolve(e(t,{dispatch:u,getState:c,extra:a,requestId:h,signal:p.signal,rejectWithValue:function(t,e){return new oe(t,e)},fulfillWithValue:function(t,e){return new se(t,e)}})).then((function(e){if(e instanceof oe)throw e;return e instanceof se?n(e.payload,h,t,e.meta):n(e,h,t)}))])];case 1:return l=v.sent(),[3,3];case 2:return f=v.sent(),l=f instanceof oe?o(null,h,t,f.payload,f.meta):o(f,h,t),[3,3];case 3:return r&&!r.dispatchConditionRejection&&o.match(l)&&l.meta.condition||u(l),[2,l]}}))},new Promise((function(t,e){var r=function(t){try{i(l.next(t))}catch(t){e(t)}},n=function(t){try{i(l.throw(t))}catch(t){e(t)}},i=function(e){return e.done?t(e.value):Promise.resolve(e.value).then(r,n)};i((l=l.apply(s,null)).next())}));var s,l}();return Object.assign(v,{abort:function(t){y&&(f=t,p.abort())},requestId:h,arg:t,unwrap:function(){return v.then(ae)}})}}),{pending:i,rejected:o,fulfilled:n,typePrefix:t})}function ae(t){if(t.meta&&t.meta.rejectedWithValue)throw t.payload;if(t.error)throw t.error;return t.payload}var le=function(t,e){return function(t){return t&&"function"==typeof t.match}(t)?t.match(e):t(e)};function fe(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return function(e){return t.some((function(t){return le(t,e)}))}}function he(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return function(e){return t.every((function(t){return le(t,e)}))}}function pe(t,e){if(!t||!t.meta)return!1;var r="string"==typeof t.meta.requestId,n=e.indexOf(t.meta.requestStatus)>-1;return r&&n}function de(t){return"function"==typeof t[0]&&"pending"in t[0]&&"fulfilled"in t[0]&&"rejected"in t[0]}function ye(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return 0===t.length?function(t){return pe(t,["pending"])}:de(t)?function(e){var r=t.map((function(t){return t.pending}));return fe.apply(void 0,r)(e)}:ye()(t[0])}function ve(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return 0===t.length?function(t){return pe(t,["rejected"])}:de(t)?function(e){var r=t.map((function(t){return t.rejected}));return fe.apply(void 0,r)(e)}:ve()(t[0])}function be(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var r=function(t){return t&&t.meta&&t.meta.rejectedWithValue};return 0===t.length||de(t)?function(e){return he(ve.apply(void 0,t),r)(e)}:be()(t[0])}function ge(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return 0===t.length?function(t){return pe(t,["fulfilled"])}:de(t)?function(e){var r=t.map((function(t){return t.fulfilled}));return fe.apply(void 0,r)(e)}:ge()(t[0])}function me(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return 0===t.length?function(t){return pe(t,["pending","fulfilled","rejected"])}:de(t)?function(e){for(var r=[],n=0,i=t;n<i.length;n++){var o=i[n];r.push(o.pending,o.rejected,o.fulfilled)}return fe.apply(void 0,r)(e)}:me()(t[0])}!function(){function t(t,e){var r=o[t];return r?r.enumerable=e:o[t]=r={configurable:!0,enumerable:e,get:function(){var e=this[Y];return H.get(e,t)},set:function(e){var r=this[Y];H.set(r,t,e)}},r}function e(t){for(var e=t.length-1;e>=0;e--){var i=t[e][Y];if(!i.P)switch(i.i){case 5:n(i)&&k(i);break;case 4:r(i)&&k(i)}}}function r(t){for(var e=t.t,r=t.k,n=K(r),i=n.length-1;i>=0;i--){var o=n[i];if(o!==Y){var s=e[o];if(void 0===s&&!a(e,o))return!0;var u=r[o],c=u&&u[Y];if(c?c.t!==s:!f(u,s))return!0}}var l=!!e[Y];return n.length!==K(e).length+(l?0:1)}function n(t){var e=t.k;if(e.length!==t.t.length)return!0;var r=Object.getOwnPropertyDescriptor(e,e.length-1);if(r&&!r.get)return!0;for(var n=0;n<e.length;n++)if(!e.hasOwnProperty(n))return!0;return!1}var o={};!function(t,e){$[t]||($[t]=e)}("ES5",{J:function(e,r){var n=Array.isArray(e),i=function(e,r){if(e){for(var n=Array(r.length),i=0;i<r.length;i++)Object.defineProperty(n,""+i,t(i,!0));return n}var o=X(r);delete o[Y];for(var s=K(o),u=0;u<s.length;u++){var c=s[u];o[c]=t(c,e||!!o[c].enumerable)}return Object.create(Object.getPrototypeOf(r),o)}(n,e),o={i:n?5:4,A:r?r.A:w(),P:!1,I:!1,D:{},l:r,t:e,k:i,o:null,O:!1,C:!1};return Object.defineProperty(i,Y,{value:o,writable:!0}),i},S:function(t,r,o){o?i(r)&&r[Y].A===t&&e(t.p):(t.u&&function t(e){if(e&&"object"==typeof e){var r=e[Y];if(r){var i=r.t,o=r.k,s=r.D,c=r.i;if(4===c)u(o,(function(e){e!==Y&&(void 0!==i[e]||a(i,e)?s[e]||t(o[e]):(s[e]=!0,k(r)))})),u(i,(function(t){void 0!==o[t]||a(o,t)||(s[t]=!1,k(r))}));else if(5===c){if(n(r)&&(k(r),s.length=!0),o.length<i.length)for(var l=o.length;l<i.length;l++)s[l]=!1;else for(var f=i.length;f<o.length;f++)s[f]=!0;for(var h=Math.min(o.length,i.length),p=0;p<h;p++)o.hasOwnProperty(p)||(s[p]=!0),void 0===s[p]&&t(o[p])}}}}(t.p[0]),e(t.p))},K:function(t){return 4===t.i?r(t):n(t)}})}()},1562:function(t,e,r){!function(t){"use strict";function e(t,e){t.super_=e,t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}})}function n(t,e){Object.defineProperty(this,"kind",{value:t,enumerable:!0}),e&&e.length&&Object.defineProperty(this,"path",{value:e,enumerable:!0})}function i(t,e,r){i.super_.call(this,"E",t),Object.defineProperty(this,"lhs",{value:e,enumerable:!0}),Object.defineProperty(this,"rhs",{value:r,enumerable:!0})}function o(t,e){o.super_.call(this,"N",t),Object.defineProperty(this,"rhs",{value:e,enumerable:!0})}function s(t,e){s.super_.call(this,"D",t),Object.defineProperty(this,"lhs",{value:e,enumerable:!0})}function u(t,e,r){u.super_.call(this,"A",t),Object.defineProperty(this,"index",{value:e,enumerable:!0}),Object.defineProperty(this,"item",{value:r,enumerable:!0})}function c(t,e,r){var n=t.slice((r||e)+1||t.length);return t.length=e<0?t.length+e:e,t.push.apply(t,n),t}function a(t){var e=void 0===t?"undefined":T(t);return"object"!==e?e:t===Math?"math":null===t?"null":Array.isArray(t)?"array":"[object Date]"===Object.prototype.toString.call(t)?"date":"function"==typeof t.toString&&/^\/.*\//.test(t.toString())?"regexp":"object"}function l(t,e,r,n,f,h,p){p=p||[];var d=(f=f||[]).slice(0);if(void 0!==h){if(n){if("function"==typeof n&&n(d,h))return;if("object"===(void 0===n?"undefined":T(n))){if(n.prefilter&&n.prefilter(d,h))return;if(n.normalize){var y=n.normalize(d,h,t,e);y&&(t=y[0],e=y[1])}}}d.push(h)}"regexp"===a(t)&&"regexp"===a(e)&&(t=t.toString(),e=e.toString());var v=void 0===t?"undefined":T(t),b=void 0===e?"undefined":T(e),g="undefined"!==v||p&&p[p.length-1].lhs&&p[p.length-1].lhs.hasOwnProperty(h),m="undefined"!==b||p&&p[p.length-1].rhs&&p[p.length-1].rhs.hasOwnProperty(h);if(!g&&m)r(new o(d,e));else if(!m&&g)r(new s(d,t));else if(a(t)!==a(e))r(new i(d,t,e));else if("date"===a(t)&&t-e!=0)r(new i(d,t,e));else if("object"===v&&null!==t&&null!==e)if(p.filter((function(e){return e.lhs===t})).length)t!==e&&r(new i(d,t,e));else{if(p.push({lhs:t,rhs:e}),Array.isArray(t)){var w;for(t.length,w=0;w<t.length;w++)w>=e.length?r(new u(d,w,new s(void 0,t[w]))):l(t[w],e[w],r,n,d,w,p);for(;w<e.length;)r(new u(d,w,new o(void 0,e[w++])))}else{var x=Object.keys(t),A=Object.keys(e);x.forEach((function(i,o){var s=A.indexOf(i);s>=0?(l(t[i],e[i],r,n,d,i,p),A=c(A,s)):l(t[i],void 0,r,n,d,i,p)})),A.forEach((function(t){l(void 0,e[t],r,n,d,t,p)}))}p.length=p.length-1}else t!==e&&("number"===v&&isNaN(t)&&isNaN(e)||r(new i(d,t,e)))}function f(t,e,r,n){return n=n||[],l(t,e,(function(t){t&&n.push(t)}),r),n.length?n:void 0}function h(t,e,r){if(r.path&&r.path.length){var n,i=t[e],o=r.path.length-1;for(n=0;n<o;n++)i=i[r.path[n]];switch(r.kind){case"A":h(i[r.path[n]],r.index,r.item);break;case"D":delete i[r.path[n]];break;case"E":case"N":i[r.path[n]]=r.rhs}}else switch(r.kind){case"A":h(t[e],r.index,r.item);break;case"D":t=c(t,e);break;case"E":case"N":t[e]=r.rhs}return t}function p(t,e,r){if(t&&e&&r&&r.kind){for(var n=t,i=-1,o=r.path?r.path.length-1:0;++i<o;)void 0===n[r.path[i]]&&(n[r.path[i]]="number"==typeof r.path[i]?[]:{}),n=n[r.path[i]];switch(r.kind){case"A":h(r.path?n[r.path[i]]:n,r.index,r.item);break;case"D":delete n[r.path[i]];break;case"E":case"N":n[r.path[i]]=r.rhs}}}function d(t,e,r){if(r.path&&r.path.length){var n,i=t[e],o=r.path.length-1;for(n=0;n<o;n++)i=i[r.path[n]];switch(r.kind){case"A":d(i[r.path[n]],r.index,r.item);break;case"D":case"E":i[r.path[n]]=r.lhs;break;case"N":delete i[r.path[n]]}}else switch(r.kind){case"A":d(t[e],r.index,r.item);break;case"D":case"E":t[e]=r.lhs;break;case"N":t=c(t,e)}return t}function y(t){return"color: "+j[t].color+"; font-weight: bold"}function v(t,e,r,n){var i=f(t,e);try{n?r.groupCollapsed("diff"):r.group("diff")}catch(t){r.log("diff")}i?i.forEach((function(t){var e=t.kind,n=function(t){var e=t.kind,r=t.path,n=t.lhs,i=t.rhs,o=t.index,s=t.item;switch(e){case"E":return[r.join("."),n,"→",i];case"N":return[r.join("."),i];case"D":return[r.join(".")];case"A":return[r.join(".")+"["+o+"]",s];default:return[]}}(t);r.log.apply(r,["%c "+j[e].text,y(e)].concat(E(n)))})):r.log("—— no diff ——");try{r.groupEnd()}catch(t){r.log("—— diff end —— ")}}function b(t,e,r,n){switch(void 0===t?"undefined":T(t)){case"object":return"function"==typeof t[n]?t[n].apply(t,E(r)):t[n];case"function":return t(e);default:return t}}function g(t,e){var r=e.logger,n=e.actionTransformer,i=e.titleFormatter,o=void 0===i?function(t){var e=t.timestamp,r=t.duration;return function(t,n,i){var o=["action"];return o.push("%c"+String(t.type)),e&&o.push("%c@ "+n),r&&o.push("%c(in "+i.toFixed(2)+" ms)"),o.join(" ")}}(e):i,s=e.collapsed,u=e.colors,c=e.level,a=e.diff,l=void 0===e.titleFormatter;t.forEach((function(i,f){var h=i.started,p=i.startedTime,d=i.action,y=i.prevState,g=i.error,m=i.took,w=i.nextState,x=t[f+1];x&&(w=x.prevState,m=x.started-h);var A=n(d),_="function"==typeof s?s((function(){return w}),d,i):s,T=S(p),E=u.title?"color: "+u.title(A)+";":"",O=["color: gray; font-weight: lighter;"];O.push(E),e.timestamp&&O.push("color: gray; font-weight: lighter;"),e.duration&&O.push("color: gray; font-weight: lighter;");var j=o(A,T,m);try{_?u.title&&l?r.groupCollapsed.apply(r,["%c "+j].concat(O)):r.groupCollapsed(j):u.title&&l?r.group.apply(r,["%c "+j].concat(O)):r.group(j)}catch(t){r.log(j)}var P=b(c,A,[y],"prevState"),I=b(c,A,[A],"action"),N=b(c,A,[g,y],"error"),k=b(c,A,[w],"nextState");if(P)if(u.prevState){var D="color: "+u.prevState(y)+"; font-weight: bold";r[P]("%c prev state",D,y)}else r[P]("prev state",y);if(I)if(u.action){var C="color: "+u.action(A)+"; font-weight: bold";r[I]("%c action    ",C,A)}else r[I]("action    ",A);if(g&&N)if(u.error){var L="color: "+u.error(g,y)+"; font-weight: bold;";r[N]("%c error     ",L,g)}else r[N]("error     ",g);if(k)if(u.nextState){var M="color: "+u.nextState(w)+"; font-weight: bold";r[k]("%c next state",M,w)}else r[k]("next state",w);a&&v(y,w,r,_);try{r.groupEnd()}catch(t){r.log("—— log end ——")}}))}function m(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=Object.assign({},P,t),r=e.logger,n=e.stateTransformer,i=e.errorTransformer,o=e.predicate,s=e.logErrors,u=e.diffPredicate;if(void 0===r)return function(){return function(t){return function(e){return t(e)}}};if(t.getState&&t.dispatch)return console.error("[redux-logger] redux-logger not installed. Make sure to pass logger instance as middleware:\n// Logger with default options\nimport { logger } from 'redux-logger'\nconst store = createStore(\n  reducer,\n  applyMiddleware(logger)\n)\n// Or you can create your own logger with custom options http://bit.ly/redux-logger-options\nimport createLogger from 'redux-logger'\nconst logger = createLogger({\n  // ...options\n});\nconst store = createStore(\n  reducer,\n  applyMiddleware(logger)\n)\n"),function(){return function(t){return function(e){return t(e)}}};var c=[];return function(t){var r=t.getState;return function(t){return function(a){if("function"==typeof o&&!o(r,a))return t(a);var l={};c.push(l),l.started=_.now(),l.startedTime=new Date,l.prevState=n(r()),l.action=a;var f=void 0;if(s)try{f=t(a)}catch(t){l.error=i(t)}else f=t(a);l.took=_.now()-l.started,l.nextState=n(r());var h=e.diff&&"function"==typeof u?u(r,a):e.diff;if(g(c,Object.assign({},e,{diff:h})),c.length=0,l.error)throw l.error;return f}}}}var w,x,A=function(t,e){return function(t,e){return new Array(e+1).join(t)}("0",e-t.toString().length)+t},S=function(t){return A(t.getHours(),2)+":"+A(t.getMinutes(),2)+":"+A(t.getSeconds(),2)+"."+A(t.getMilliseconds(),3)},_="undefined"!=typeof performance&&null!==performance&&"function"==typeof performance.now?performance:Date,T="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},E=function(t){if(Array.isArray(t)){for(var e=0,r=Array(t.length);e<t.length;e++)r[e]=t[e];return r}return Array.from(t)},O=[];w="object"===(void 0===r.g?"undefined":T(r.g))&&r.g?r.g:"undefined"!=typeof window?window:{},(x=w.DeepDiff)&&O.push((function(){void 0!==x&&w.DeepDiff===f&&(w.DeepDiff=x,x=void 0)})),e(i,n),e(o,n),e(s,n),e(u,n),Object.defineProperties(f,{diff:{value:f,enumerable:!0},observableDiff:{value:l,enumerable:!0},applyDiff:{value:function(t,e,r){t&&e&&l(t,e,(function(n){r&&!r(t,e,n)||p(t,e,n)}))},enumerable:!0},applyChange:{value:p,enumerable:!0},revertChange:{value:function(t,e,r){if(t&&e&&r&&r.kind){var n,i,o=t;for(i=r.path.length-1,n=0;n<i;n++)void 0===o[r.path[n]]&&(o[r.path[n]]={}),o=o[r.path[n]];switch(r.kind){case"A":d(o[r.path[n]],r.index,r.item);break;case"D":case"E":o[r.path[n]]=r.lhs;break;case"N":delete o[r.path[n]]}}},enumerable:!0},isConflict:{value:function(){return void 0!==x},enumerable:!0},noConflict:{value:function(){return O&&(O.forEach((function(t){t()})),O=null),f},enumerable:!0}});var j={E:{color:"#2196F3",text:"CHANGED:"},N:{color:"#4CAF50",text:"ADDED:"},D:{color:"#F44336",text:"DELETED:"},A:{color:"#2196F3",text:"ARRAY:"}},P={level:"log",logger:console,logErrors:!0,collapsed:void 0,predicate:void 0,duration:!1,timestamp:!0,stateTransformer:function(t){return t},actionTransformer:function(t){return t},errorTransformer:function(t){return t},colors:{title:function(){return"inherit"},prevState:function(){return"#9E9E9E"},action:function(){return"#03A9F4"},nextState:function(){return"#4CAF50"},error:function(){return"#F20404"}},diff:!1,diffPredicate:void 0,transformer:void 0},I=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=t.dispatch,r=t.getState;return"function"==typeof e||"function"==typeof r?m()({dispatch:e,getState:r}):void console.error("\n[redux-logger v3] BREAKING CHANGE\n[redux-logger v3] Since 3.0.0 redux-logger exports by default logger with default settings.\n[redux-logger v3] Change\n[redux-logger v3] import createLogger from 'redux-logger'\n[redux-logger v3] to\n[redux-logger v3] import { createLogger } from 'redux-logger'\n")};t.defaults=P,t.createLogger=m,t.logger=I,t.default=I,Object.defineProperty(t,"__esModule",{value:!0})}(e)},7152:(t,e,r)=>{"use strict";r.r(e),r.d(e,{ActionsObservable:()=>v,StateObservable:()=>b,combineEpics:()=>x,createEpicMiddleware:()=>g,ofType:()=>d});var n=r(1394),i=r(168),o=r(4975),s=r(3272),u=r(5934),c=r(5373),a=r(7464),l=r(4065),f=r(5629),h=r(8825),p=function(t,e){return t===e||"function"==typeof e&&t===e.toString()},d=function(){for(var t=arguments.length,e=Array(t),r=0;r<t;r++)e[r]=arguments[r];return function(t){return t.pipe((0,h.h)((function(t){var r=t.type,n=e.length;if(1===n)return p(r,e[0]);for(var i=0;i<n;i++)if(p(r,e[i]))return!0;return!1})))}},y=function(){function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}(),v=function(t){function e(t){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);var r=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).call(this));return r.source=t,r}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),y(e,null,[{key:"of",value:function(){return new this(l.of.apply(void 0,arguments))}},{key:"from",value:function(t,e){return new this((0,o.D)(t,e))}}]),y(e,[{key:"lift",value:function(t){var r=new e(this);return r.operator=t,r}},{key:"ofType",value:function(){return d.apply(void 0,arguments)(this)}}]),e}(f.y),b=function(t){function e(t,r){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);var n=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,(function(t){var e=n.__notifier.subscribe(t);return e&&!e.closed&&t.next(n.value),e})));return n.value=r,n.__notifier=new i.xQ,n.__subscription=t.subscribe((function(t){t!==n.value&&(n.value=t,n.__notifier.next(t))})),n}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),e}(f.y);function g(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=n.c.constructor,r=new e(n.c.SchedulerAction),l=new i.xQ,f=void 0,h=function(e){f=e;var n=(new i.xQ).pipe((0,s.QV)(r)),h=(new i.xQ).pipe((0,s.QV)(r)),p=new v(n),d=new b(h,f.getState());return l.pipe((0,u.U)((function(e){var r="dependencies"in t?e(p,d,t.dependencies):e(p,d);if(!r)throw new TypeError('Your root Epic "'+(e.name||"<anonymous>")+"\" does not return a stream. Double check you're not missing a return statement!");return r})),(0,c.zg)((function(t){return(0,o.D)(t).pipe((0,a.R)(r),(0,s.QV)(r))}))).subscribe(f.dispatch),function(t){return function(e){var r=t(e);return h.next(f.getState()),n.next(e),r}}};return h.run=function(t){l.next(t)},h}var m=r(9775);function w(t){if(Array.isArray(t)){for(var e=0,r=Array(t.length);e<t.length;e++)r[e]=t[e];return r}return Array.from(t)}var x=function(){for(var t=arguments.length,e=Array(t),r=0;r<t;r++)e[r]=arguments[r];var n=function(){for(var t=arguments.length,r=Array(t),n=0;n<t;n++)r[n]=arguments[n];return m.T.apply(void 0,w(e.map((function(t){var e=t.apply(void 0,r);if(!e)throw new TypeError('combineEpics: one of the provided Epics "'+(t.name||"<anonymous>")+"\" does not return a stream. Double check you're not missing a return statement!");return e}))))};try{Object.defineProperty(n,"name",{value:"combineEpics("+e.map((function(t){return t.name||"<anonymous>"})).join(", ")+")"})}catch(t){}return n}},1758:(t,e,r)=>{"use strict";r.r(e),r.d(e,{ArgumentOutOfRangeError:()=>P.W,AsyncSubject:()=>l.c,BehaviorSubject:()=>c.X,ConnectableObservable:()=>i.c,EMPTY:()=>X.E,EmptyError:()=>I.K,GroupedObservable:()=>o.T,NEVER:()=>lt,Notification:()=>_.P,NotificationKind:()=>_.W,ObjectUnsubscribedError:()=>N.N,Observable:()=>n.y,ReplaySubject:()=>a.t,Scheduler:()=>x.b,Subject:()=>u.xQ,Subscriber:()=>S.L,Subscription:()=>A.w,TimeoutError:()=>D.W,UnsubscriptionError:()=>k.B,VirtualAction:()=>w,VirtualTimeScheduler:()=>m,animationFrameScheduler:()=>g,asapScheduler:()=>f.e,asyncScheduler:()=>h.P,bindCallback:()=>V,bindNodeCallback:()=>Z,combineLatest:()=>Y.aj,concat:()=>q.z,config:()=>jt.v,defer:()=>K.P,empty:()=>X.c,forkJoin:()=>G,from:()=>H.D,fromEvent:()=>tt,fromEventPattern:()=>rt,generate:()=>nt,identity:()=>O.y,iif:()=>ot,interval:()=>ut,isObservable:()=>j,merge:()=>at.T,never:()=>ft,noop:()=>E.Z,observable:()=>s.L,of:()=>ht.of,onErrorResumeNext:()=>pt,pairs:()=>dt,partition:()=>mt,pipe:()=>T.z,queueScheduler:()=>p.c,race:()=>wt.S3,range:()=>xt,scheduled:()=>Ot.x,throwError:()=>St._,timer:()=>_t.H,using:()=>Tt,zip:()=>Et.$R});var n=r(5629),i=r(8490),o=r(5510),s=r(9570),u=r(168),c=r(7749),a=r(2442),l=r(3790),f=r(3697),h=r(5178),p=r(1394),d=r(4425),y=r(8710),v=function(t){function e(e,r){var n=t.call(this,e,r)||this;return n.scheduler=e,n.work=r,n}return d.ZT(e,t),e.prototype.requestAsyncId=function(e,r,n){return void 0===n&&(n=0),null!==n&&n>0?t.prototype.requestAsyncId.call(this,e,r,n):(e.actions.push(this),e.scheduled||(e.scheduled=requestAnimationFrame((function(){return e.flush(null)}))))},e.prototype.recycleAsyncId=function(e,r,n){if(void 0===n&&(n=0),null!==n&&n>0||null===n&&this.delay>0)return t.prototype.recycleAsyncId.call(this,e,r,n);0===e.actions.length&&(cancelAnimationFrame(r),e.scheduled=void 0)},e}(y.o),b=r(6602),g=new(function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return d.ZT(e,t),e.prototype.flush=function(t){this.active=!0,this.scheduled=void 0;var e,r=this.actions,n=-1,i=r.length;t=t||r.shift();do{if(e=t.execute(t.state,t.delay))break}while(++n<i&&(t=r.shift()));if(this.active=!1,e){for(;++n<i&&(t=r.shift());)t.unsubscribe();throw e}},e}(b.v))(v),m=function(t){function e(e,r){void 0===e&&(e=w),void 0===r&&(r=Number.POSITIVE_INFINITY);var n=t.call(this,e,(function(){return n.frame}))||this;return n.maxFrames=r,n.frame=0,n.index=-1,n}return d.ZT(e,t),e.prototype.flush=function(){for(var t,e,r=this.actions,n=this.maxFrames;(e=r[0])&&e.delay<=n&&(r.shift(),this.frame=e.delay,!(t=e.execute(e.state,e.delay))););if(t){for(;e=r.shift();)e.unsubscribe();throw t}},e.frameTimeFactor=10,e}(b.v),w=function(t){function e(e,r,n){void 0===n&&(n=e.index+=1);var i=t.call(this,e,r)||this;return i.scheduler=e,i.work=r,i.index=n,i.active=!0,i.index=e.index=n,i}return d.ZT(e,t),e.prototype.schedule=function(r,n){if(void 0===n&&(n=0),!this.id)return t.prototype.schedule.call(this,r,n);this.active=!1;var i=new e(this.scheduler,this.work);return this.add(i),i.schedule(r,n)},e.prototype.requestAsyncId=function(t,r,n){void 0===n&&(n=0),this.delay=t.frame+n;var i=t.actions;return i.push(this),i.sort(e.sortActions),!0},e.prototype.recycleAsyncId=function(t,e,r){void 0===r&&(r=0)},e.prototype._execute=function(e,r){if(!0===this.active)return t.prototype._execute.call(this,e,r)},e.sortActions=function(t,e){return t.delay===e.delay?t.index===e.index?0:t.index>e.index?1:-1:t.delay>e.delay?1:-1},e}(y.o),x=r(3537),A=r(136),S=r(2227),_=r(3597),T=r(986),E=r(1036),O=r(7326);function j(t){return!!t&&(t instanceof n.y||"function"==typeof t.lift&&"function"==typeof t.subscribe)}var P=r(9050),I=r(8413),N=r(1033),k=r(4693),D=r(9163),C=r(5934),L=r(2600),M=r(8856),R=r(9858);function V(t,e,r){if(e){if(!(0,R.K)(e))return function(){for(var n=[],i=0;i<arguments.length;i++)n[i]=arguments[i];return V(t,r).apply(void 0,n).pipe((0,C.U)((function(t){return(0,M.k)(t)?e.apply(void 0,t):e(t)})))};r=e}return function(){for(var e=[],i=0;i<arguments.length;i++)e[i]=arguments[i];var o,s=this,u={context:s,subject:o,callbackFunc:t,scheduler:r};return new n.y((function(n){if(r){var i={args:e,subscriber:n,params:u};return r.schedule(F,0,i)}if(!o){o=new l.c;try{t.apply(s,e.concat([function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];o.next(t.length<=1?t[0]:t),o.complete()}]))}catch(t){(0,L._)(o)?o.error(t):console.warn(t)}}return o.subscribe(n)}))}}function F(t){var e=this,r=t.args,n=t.subscriber,i=t.params,o=i.callbackFunc,s=i.context,u=i.scheduler,c=i.subject;if(!c){c=i.subject=new l.c;try{o.apply(s,r.concat([function(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];var n=t.length<=1?t[0]:t;e.add(u.schedule(U,0,{value:n,subject:c}))}]))}catch(t){c.error(t)}}this.add(c.subscribe(n))}function U(t){var e=t.value,r=t.subject;r.next(e),r.complete()}function Z(t,e,r){if(e){if(!(0,R.K)(e))return function(){for(var n=[],i=0;i<arguments.length;i++)n[i]=arguments[i];return Z(t,r).apply(void 0,n).pipe((0,C.U)((function(t){return(0,M.k)(t)?e.apply(void 0,t):e(t)})))};r=e}return function(){for(var e=[],i=0;i<arguments.length;i++)e[i]=arguments[i];var o={subject:void 0,args:e,callbackFunc:t,scheduler:r,context:this};return new n.y((function(n){var i=o.context,s=o.subject;if(r)return r.schedule(z,0,{params:o,subscriber:n,context:i});if(!s){s=o.subject=new l.c;try{t.apply(i,e.concat([function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var r=t.shift();r?s.error(r):(s.next(t.length<=1?t[0]:t),s.complete())}]))}catch(t){(0,L._)(s)?s.error(t):console.warn(t)}}return s.subscribe(n)}))}}function z(t){var e=this,r=t.params,n=t.subscriber,i=t.context,o=r.callbackFunc,s=r.args,u=r.scheduler,c=r.subject;if(!c){c=r.subject=new l.c;try{o.apply(i,s.concat([function(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];var n=t.shift();if(n)e.add(u.schedule(W,0,{err:n,subject:c}));else{var i=t.length<=1?t[0]:t;e.add(u.schedule(B,0,{value:i,subject:c}))}}]))}catch(t){this.add(u.schedule(W,0,{err:t,subject:c}))}}this.add(c.subscribe(n))}function B(t){var e=t.value,r=t.subject;r.next(e),r.complete()}function W(t){var e=t.err;t.subject.error(e)}var Y=r(47),q=r(160),K=r(3495),X=r(6595),$=r(2037),H=r(4975);function G(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];if(1===t.length){var r=t[0];if((0,M.k)(r))return Q(r,null);if((0,$.K)(r)&&Object.getPrototypeOf(r)===Object.prototype){var n=Object.keys(r);return Q(n.map((function(t){return r[t]})),n)}}if("function"==typeof t[t.length-1]){var i=t.pop();return Q(t=1===t.length&&(0,M.k)(t[0])?t[0]:t,null).pipe((0,C.U)((function(t){return i.apply(void 0,t)})))}return Q(t,null)}function Q(t,e){return new n.y((function(r){var n=t.length;if(0!==n)for(var i=new Array(n),o=0,s=0,u=function(u){var c=(0,H.D)(t[u]),a=!1;r.add(c.subscribe({next:function(t){a||(a=!0,s++),i[u]=t},error:function(t){return r.error(t)},complete:function(){++o!==n&&a||(s===n&&r.next(e?e.reduce((function(t,e,r){return t[e]=i[r],t}),{}):i),r.complete())}}))},c=0;c<n;c++)u(c);else r.complete()}))}var J=r(9537);function tt(t,e,r,i){return(0,J.m)(r)&&(i=r,r=void 0),i?tt(t,e,r).pipe((0,C.U)((function(t){return(0,M.k)(t)?i.apply(void 0,t):i(t)}))):new n.y((function(n){et(t,e,(function(t){arguments.length>1?n.next(Array.prototype.slice.call(arguments)):n.next(t)}),n,r)}))}function et(t,e,r,n,i){var o;if(function(t){return t&&"function"==typeof t.addEventListener&&"function"==typeof t.removeEventListener}(t)){var s=t;t.addEventListener(e,r,i),o=function(){return s.removeEventListener(e,r,i)}}else if(function(t){return t&&"function"==typeof t.on&&"function"==typeof t.off}(t)){var u=t;t.on(e,r),o=function(){return u.off(e,r)}}else if(function(t){return t&&"function"==typeof t.addListener&&"function"==typeof t.removeListener}(t)){var c=t;t.addListener(e,r),o=function(){return c.removeListener(e,r)}}else{if(!t||!t.length)throw new TypeError("Invalid event target");for(var a=0,l=t.length;a<l;a++)et(t[a],e,r,n,i)}n.add(o)}function rt(t,e,r){return r?rt(t,e).pipe((0,C.U)((function(t){return(0,M.k)(t)?r.apply(void 0,t):r(t)}))):new n.y((function(r){var n,i=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return r.next(1===t.length?t[0]:t)};try{n=t(i)}catch(t){return void r.error(t)}if((0,J.m)(e))return function(){return e(i,n)}}))}function nt(t,e,r,i,o){var s,u;if(1==arguments.length){var c=t;u=c.initialState,e=c.condition,r=c.iterate,s=c.resultSelector||O.y,o=c.scheduler}else void 0===i||(0,R.K)(i)?(u=t,s=O.y,o=i):(u=t,s=i);return new n.y((function(t){var n=u;if(o)return o.schedule(it,0,{subscriber:t,iterate:r,condition:e,resultSelector:s,state:n});for(;;){if(e){var i=void 0;try{i=e(n)}catch(e){return void t.error(e)}if(!i){t.complete();break}}var c=void 0;try{c=s(n)}catch(e){return void t.error(e)}if(t.next(c),t.closed)break;try{n=r(n)}catch(e){return void t.error(e)}}}))}function it(t){var e=t.subscriber,r=t.condition;if(!e.closed){if(t.needIterate)try{t.state=t.iterate(t.state)}catch(t){return void e.error(t)}else t.needIterate=!0;if(r){var n=void 0;try{n=r(t.state)}catch(t){return void e.error(t)}if(!n)return void e.complete();if(e.closed)return}var i;try{i=t.resultSelector(t.state)}catch(t){return void e.error(t)}if(!e.closed&&(e.next(i),!e.closed))return this.schedule(t)}}function ot(t,e,r){return void 0===e&&(e=X.E),void 0===r&&(r=X.E),(0,K.P)((function(){return t()?e:r}))}var st=r(4667);function ut(t,e){return void 0===t&&(t=0),void 0===e&&(e=h.P),(!(0,st.k)(t)||t<0)&&(t=0),e&&"function"==typeof e.schedule||(e=h.P),new n.y((function(r){return r.add(e.schedule(ct,t,{subscriber:r,counter:0,period:t})),r}))}function ct(t){var e=t.subscriber,r=t.counter,n=t.period;e.next(r),this.schedule({subscriber:e,counter:r+1,period:n},n)}var at=r(9775),lt=new n.y(E.Z);function ft(){return lt}var ht=r(4065);function pt(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];if(0===t.length)return X.E;var r=t[0],i=t.slice(1);return 1===t.length&&(0,M.k)(r)?pt.apply(void 0,r):new n.y((function(t){var e=function(){return t.add(pt.apply(void 0,i).subscribe(t))};return(0,H.D)(r).subscribe({next:function(e){t.next(e)},error:e,complete:e})}))}function dt(t,e){return e?new n.y((function(r){var n=Object.keys(t),i=new A.w;return i.add(e.schedule(yt,0,{keys:n,index:0,subscriber:r,subscription:i,obj:t})),i})):new n.y((function(e){for(var r=Object.keys(t),n=0;n<r.length&&!e.closed;n++){var i=r[n];t.hasOwnProperty(i)&&e.next([i,t[i]])}e.complete()}))}function yt(t){var e=t.keys,r=t.index,n=t.subscriber,i=t.subscription,o=t.obj;if(!n.closed)if(r<e.length){var s=e[r];n.next([s,o[s]]),i.add(this.schedule({keys:e,index:r+1,subscriber:n,subscription:i,obj:o}))}else n.complete()}var vt=r(2584),bt=r(2822),gt=r(8825);function mt(t,e,r){return[(0,gt.h)(e,r)(new n.y((0,bt.s)(t))),(0,gt.h)((0,vt.f)(e,r))(new n.y((0,bt.s)(t)))]}var wt=r(2294);function xt(t,e,r){return void 0===t&&(t=0),new n.y((function(n){void 0===e&&(e=t,t=0);var i=0,o=t;if(r)return r.schedule(At,0,{index:i,count:e,start:t,subscriber:n});for(;;){if(i++>=e){n.complete();break}if(n.next(o++),n.closed)break}}))}function At(t){var e=t.start,r=t.index,n=t.count,i=t.subscriber;r>=n?i.complete():(i.next(e),i.closed||(t.index=r+1,t.start=e+1,this.schedule(t)))}var St=r(4166),_t=r(2013);function Tt(t,e){return new n.y((function(r){var n,i;try{n=t()}catch(t){return void r.error(t)}try{i=e(n)}catch(t){return void r.error(t)}var o=(i?(0,H.D)(i):X.E).subscribe(r);return function(){o.unsubscribe(),n&&n.unsubscribe()}}))}var Et=r(5476),Ot=r(3063),jt=r(2969)},3790:(t,e,r)=>{"use strict";r.d(e,{c:()=>s});var n=r(4425),i=r(168),o=r(136),s=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.value=null,e.hasNext=!1,e.hasCompleted=!1,e}return n.ZT(e,t),e.prototype._subscribe=function(e){return this.hasError?(e.error(this.thrownError),o.w.EMPTY):this.hasCompleted&&this.hasNext?(e.next(this.value),e.complete(),o.w.EMPTY):t.prototype._subscribe.call(this,e)},e.prototype.next=function(t){this.hasCompleted||(this.value=t,this.hasNext=!0)},e.prototype.error=function(e){this.hasCompleted||t.prototype.error.call(this,e)},e.prototype.complete=function(){this.hasCompleted=!0,this.hasNext&&t.prototype.next.call(this,this.value),t.prototype.complete.call(this)},e}(i.xQ)},7749:(t,e,r)=>{"use strict";r.d(e,{X:()=>s});var n=r(4425),i=r(168),o=r(1033),s=function(t){function e(e){var r=t.call(this)||this;return r._value=e,r}return n.ZT(e,t),Object.defineProperty(e.prototype,"value",{get:function(){return this.getValue()},enumerable:!0,configurable:!0}),e.prototype._subscribe=function(e){var r=t.prototype._subscribe.call(this,e);return r&&!r.closed&&e.next(this._value),r},e.prototype.getValue=function(){if(this.hasError)throw this.thrownError;if(this.closed)throw new o.N;return this._value},e.prototype.next=function(e){t.prototype.next.call(this,this._value=e)},e}(i.xQ)},7085:(t,e,r)=>{"use strict";r.d(e,{d:()=>i});var n=r(4425),i=function(t){function e(e,r,n){var i=t.call(this)||this;return i.parent=e,i.outerValue=r,i.outerIndex=n,i.index=0,i}return n.ZT(e,t),e.prototype._next=function(t){this.parent.notifyNext(this.outerValue,t,this.outerIndex,this.index++,this)},e.prototype._error=function(t){this.parent.notifyError(t,this),this.unsubscribe()},e.prototype._complete=function(){this.parent.notifyComplete(this),this.unsubscribe()},e}(r(2227).L)},3597:(t,e,r)=>{"use strict";r.d(e,{W:()=>n,P:()=>u});var n,i=r(6595),o=r(4065),s=r(4166);n||(n={});var u=function(){function t(t,e,r){this.kind=t,this.value=e,this.error=r,this.hasValue="N"===t}return t.prototype.observe=function(t){switch(this.kind){case"N":return t.next&&t.next(this.value);case"E":return t.error&&t.error(this.error);case"C":return t.complete&&t.complete()}},t.prototype.do=function(t,e,r){switch(this.kind){case"N":return t&&t(this.value);case"E":return e&&e(this.error);case"C":return r&&r()}},t.prototype.accept=function(t,e,r){return t&&"function"==typeof t.next?this.observe(t):this.do(t,e,r)},t.prototype.toObservable=function(){switch(this.kind){case"N":return(0,o.of)(this.value);case"E":return(0,s._)(this.error);case"C":return(0,i.c)()}throw new Error("unexpected notification kind value")},t.createNext=function(e){return void 0!==e?new t("N",e):t.undefinedValueNotification},t.createError=function(e){return new t("E",void 0,e)},t.createComplete=function(){return t.completeNotification},t.completeNotification=new t("C"),t.undefinedValueNotification=new t("N",void 0),t}()},5629:(t,e,r)=>{"use strict";r.d(e,{y:()=>l});var n=r(2600),i=r(2227),o=r(6026),s=r(6196),u=r(9570),c=r(986),a=r(2969),l=function(){function t(t){this._isScalar=!1,t&&(this._subscribe=t)}return t.prototype.lift=function(e){var r=new t;return r.source=this,r.operator=e,r},t.prototype.subscribe=function(t,e,r){var n=this.operator,u=function(t,e,r){if(t){if(t instanceof i.L)return t;if(t[o.b])return t[o.b]()}return t||e||r?new i.L(t,e,r):new i.L(s.c)}(t,e,r);if(n?u.add(n.call(u,this.source)):u.add(this.source||a.v.useDeprecatedSynchronousErrorHandling&&!u.syncErrorThrowable?this._subscribe(u):this._trySubscribe(u)),a.v.useDeprecatedSynchronousErrorHandling&&u.syncErrorThrowable&&(u.syncErrorThrowable=!1,u.syncErrorThrown))throw u.syncErrorValue;return u},t.prototype._trySubscribe=function(t){try{return this._subscribe(t)}catch(e){a.v.useDeprecatedSynchronousErrorHandling&&(t.syncErrorThrown=!0,t.syncErrorValue=e),(0,n._)(t)?t.error(e):console.warn(e)}},t.prototype.forEach=function(t,e){var r=this;return new(e=f(e))((function(e,n){var i;i=r.subscribe((function(e){try{t(e)}catch(t){n(t),i&&i.unsubscribe()}}),n,e)}))},t.prototype._subscribe=function(t){var e=this.source;return e&&e.subscribe(t)},t.prototype[u.L]=function(){return this},t.prototype.pipe=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return 0===t.length?this:(0,c.U)(t)(this)},t.prototype.toPromise=function(t){var e=this;return new(t=f(t))((function(t,r){var n;e.subscribe((function(t){return n=t}),(function(t){return r(t)}),(function(){return t(n)}))}))},t.create=function(e){return new t(e)},t}();function f(t){if(t||(t=a.v.Promise||Promise),!t)throw new Error("no Promise impl found");return t}},6196:(t,e,r)=>{"use strict";r.d(e,{c:()=>o});var n=r(2969),i=r(260),o={closed:!0,next:function(t){},error:function(t){if(n.v.useDeprecatedSynchronousErrorHandling)throw t;(0,i.z)(t)},complete:function(){}}},7142:(t,e,r)=>{"use strict";r.d(e,{L:()=>i});var n=r(4425),i=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return n.ZT(e,t),e.prototype.notifyNext=function(t,e,r,n,i){this.destination.next(e)},e.prototype.notifyError=function(t,e){this.destination.error(t)},e.prototype.notifyComplete=function(t){this.destination.complete()},e}(r(2227).L)},2442:(t,e,r)=>{"use strict";r.d(e,{t:()=>l});var n=r(4425),i=r(168),o=r(1394),s=r(136),u=r(3272),c=r(1033),a=r(413),l=function(t){function e(e,r,n){void 0===e&&(e=Number.POSITIVE_INFINITY),void 0===r&&(r=Number.POSITIVE_INFINITY);var i=t.call(this)||this;return i.scheduler=n,i._events=[],i._infiniteTimeWindow=!1,i._bufferSize=e<1?1:e,i._windowTime=r<1?1:r,r===Number.POSITIVE_INFINITY?(i._infiniteTimeWindow=!0,i.next=i.nextInfiniteTimeWindow):i.next=i.nextTimeWindow,i}return n.ZT(e,t),e.prototype.nextInfiniteTimeWindow=function(e){var r=this._events;r.push(e),r.length>this._bufferSize&&r.shift(),t.prototype.next.call(this,e)},e.prototype.nextTimeWindow=function(e){this._events.push(new f(this._getNow(),e)),this._trimBufferThenGetEvents(),t.prototype.next.call(this,e)},e.prototype._subscribe=function(t){var e,r=this._infiniteTimeWindow,n=r?this._events:this._trimBufferThenGetEvents(),i=this.scheduler,o=n.length;if(this.closed)throw new c.N;if(this.isStopped||this.hasError?e=s.w.EMPTY:(this.observers.push(t),e=new a.W(this,t)),i&&t.add(t=new u.ht(t,i)),r)for(var l=0;l<o&&!t.closed;l++)t.next(n[l]);else for(l=0;l<o&&!t.closed;l++)t.next(n[l].value);return this.hasError?t.error(this.thrownError):this.isStopped&&t.complete(),e},e.prototype._getNow=function(){return(this.scheduler||o.c).now()},e.prototype._trimBufferThenGetEvents=function(){for(var t=this._getNow(),e=this._bufferSize,r=this._windowTime,n=this._events,i=n.length,o=0;o<i&&!(t-n[o].time<r);)o++;return i>e&&(o=Math.max(o,i-e)),o>0&&n.splice(0,o),n},e}(i.xQ),f=function(){return function(t,e){this.time=t,this.value=e}}()},3537:(t,e,r)=>{"use strict";r.d(e,{b:()=>n});var n=function(){function t(e,r){void 0===r&&(r=t.now),this.SchedulerAction=e,this.now=r}return t.prototype.schedule=function(t,e,r){return void 0===e&&(e=0),new this.SchedulerAction(this,t).schedule(r,e)},t.now=function(){return Date.now()},t}()},168:(t,e,r)=>{"use strict";r.d(e,{Yc:()=>l,xQ:()=>f});var n=r(4425),i=r(5629),o=r(2227),s=r(136),u=r(1033),c=r(413),a=r(6026),l=function(t){function e(e){var r=t.call(this,e)||this;return r.destination=e,r}return n.ZT(e,t),e}(o.L),f=function(t){function e(){var e=t.call(this)||this;return e.observers=[],e.closed=!1,e.isStopped=!1,e.hasError=!1,e.thrownError=null,e}return n.ZT(e,t),e.prototype[a.b]=function(){return new l(this)},e.prototype.lift=function(t){var e=new h(this,this);return e.operator=t,e},e.prototype.next=function(t){if(this.closed)throw new u.N;if(!this.isStopped)for(var e=this.observers,r=e.length,n=e.slice(),i=0;i<r;i++)n[i].next(t)},e.prototype.error=function(t){if(this.closed)throw new u.N;this.hasError=!0,this.thrownError=t,this.isStopped=!0;for(var e=this.observers,r=e.length,n=e.slice(),i=0;i<r;i++)n[i].error(t);this.observers.length=0},e.prototype.complete=function(){if(this.closed)throw new u.N;this.isStopped=!0;for(var t=this.observers,e=t.length,r=t.slice(),n=0;n<e;n++)r[n].complete();this.observers.length=0},e.prototype.unsubscribe=function(){this.isStopped=!0,this.closed=!0,this.observers=null},e.prototype._trySubscribe=function(e){if(this.closed)throw new u.N;return t.prototype._trySubscribe.call(this,e)},e.prototype._subscribe=function(t){if(this.closed)throw new u.N;return this.hasError?(t.error(this.thrownError),s.w.EMPTY):this.isStopped?(t.complete(),s.w.EMPTY):(this.observers.push(t),new c.W(this,t))},e.prototype.asObservable=function(){var t=new i.y;return t.source=this,t},e.create=function(t,e){return new h(t,e)},e}(i.y),h=function(t){function e(e,r){var n=t.call(this)||this;return n.destination=e,n.source=r,n}return n.ZT(e,t),e.prototype.next=function(t){var e=this.destination;e&&e.next&&e.next(t)},e.prototype.error=function(t){var e=this.destination;e&&e.error&&this.destination.error(t)},e.prototype.complete=function(){var t=this.destination;t&&t.complete&&this.destination.complete()},e.prototype._subscribe=function(t){return this.source?this.source.subscribe(t):s.w.EMPTY},e}(f)},413:(t,e,r)=>{"use strict";r.d(e,{W:()=>i});var n=r(4425),i=function(t){function e(e,r){var n=t.call(this)||this;return n.subject=e,n.subscriber=r,n.closed=!1,n}return n.ZT(e,t),e.prototype.unsubscribe=function(){if(!this.closed){this.closed=!0;var t=this.subject,e=t.observers;if(this.subject=null,e&&0!==e.length&&!t.isStopped&&!t.closed){var r=e.indexOf(this.subscriber);-1!==r&&e.splice(r,1)}}},e}(r(136).w)},2227:(t,e,r)=>{"use strict";r.d(e,{L:()=>l});var n=r(4425),i=r(9537),o=r(6196),s=r(136),u=r(6026),c=r(2969),a=r(260),l=function(t){function e(r,n,i){var s=t.call(this)||this;switch(s.syncErrorValue=null,s.syncErrorThrown=!1,s.syncErrorThrowable=!1,s.isStopped=!1,arguments.length){case 0:s.destination=o.c;break;case 1:if(!r){s.destination=o.c;break}if("object"==typeof r){r instanceof e?(s.syncErrorThrowable=r.syncErrorThrowable,s.destination=r,r.add(s)):(s.syncErrorThrowable=!0,s.destination=new f(s,r));break}default:s.syncErrorThrowable=!0,s.destination=new f(s,r,n,i)}return s}return n.ZT(e,t),e.prototype[u.b]=function(){return this},e.create=function(t,r,n){var i=new e(t,r,n);return i.syncErrorThrowable=!1,i},e.prototype.next=function(t){this.isStopped||this._next(t)},e.prototype.error=function(t){this.isStopped||(this.isStopped=!0,this._error(t))},e.prototype.complete=function(){this.isStopped||(this.isStopped=!0,this._complete())},e.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,t.prototype.unsubscribe.call(this))},e.prototype._next=function(t){this.destination.next(t)},e.prototype._error=function(t){this.destination.error(t),this.unsubscribe()},e.prototype._complete=function(){this.destination.complete(),this.unsubscribe()},e.prototype._unsubscribeAndRecycle=function(){var t=this._parentOrParents;return this._parentOrParents=null,this.unsubscribe(),this.closed=!1,this.isStopped=!1,this._parentOrParents=t,this},e}(s.w),f=function(t){function e(e,r,n,s){var u,c=t.call(this)||this;c._parentSubscriber=e;var a=c;return(0,i.m)(r)?u=r:r&&(u=r.next,n=r.error,s=r.complete,r!==o.c&&(a=Object.create(r),(0,i.m)(a.unsubscribe)&&c.add(a.unsubscribe.bind(a)),a.unsubscribe=c.unsubscribe.bind(c))),c._context=a,c._next=u,c._error=n,c._complete=s,c}return n.ZT(e,t),e.prototype.next=function(t){if(!this.isStopped&&this._next){var e=this._parentSubscriber;c.v.useDeprecatedSynchronousErrorHandling&&e.syncErrorThrowable?this.__tryOrSetError(e,this._next,t)&&this.unsubscribe():this.__tryOrUnsub(this._next,t)}},e.prototype.error=function(t){if(!this.isStopped){var e=this._parentSubscriber,r=c.v.useDeprecatedSynchronousErrorHandling;if(this._error)r&&e.syncErrorThrowable?(this.__tryOrSetError(e,this._error,t),this.unsubscribe()):(this.__tryOrUnsub(this._error,t),this.unsubscribe());else if(e.syncErrorThrowable)r?(e.syncErrorValue=t,e.syncErrorThrown=!0):(0,a.z)(t),this.unsubscribe();else{if(this.unsubscribe(),r)throw t;(0,a.z)(t)}}},e.prototype.complete=function(){var t=this;if(!this.isStopped){var e=this._parentSubscriber;if(this._complete){var r=function(){return t._complete.call(t._context)};c.v.useDeprecatedSynchronousErrorHandling&&e.syncErrorThrowable?(this.__tryOrSetError(e,r),this.unsubscribe()):(this.__tryOrUnsub(r),this.unsubscribe())}else this.unsubscribe()}},e.prototype.__tryOrUnsub=function(t,e){try{t.call(this._context,e)}catch(t){if(this.unsubscribe(),c.v.useDeprecatedSynchronousErrorHandling)throw t;(0,a.z)(t)}},e.prototype.__tryOrSetError=function(t,e,r){if(!c.v.useDeprecatedSynchronousErrorHandling)throw new Error("bad call");try{e.call(this._context,r)}catch(e){return c.v.useDeprecatedSynchronousErrorHandling?(t.syncErrorValue=e,t.syncErrorThrown=!0,!0):((0,a.z)(e),!0)}return!1},e.prototype._unsubscribe=function(){var t=this._parentSubscriber;this._context=null,this._parentSubscriber=null,t.unsubscribe()},e}(l)},136:(t,e,r)=>{"use strict";r.d(e,{w:()=>u});var n=r(8856),i=r(2037),o=r(9537),s=r(4693),u=function(){function t(t){this.closed=!1,this._parentOrParents=null,this._subscriptions=null,t&&(this._unsubscribe=t)}var e;return t.prototype.unsubscribe=function(){var e;if(!this.closed){var r=this,u=r._parentOrParents,a=r._unsubscribe,l=r._subscriptions;if(this.closed=!0,this._parentOrParents=null,this._subscriptions=null,u instanceof t)u.remove(this);else if(null!==u)for(var f=0;f<u.length;++f)u[f].remove(this);if((0,o.m)(a))try{a.call(this)}catch(t){e=t instanceof s.B?c(t.errors):[t]}if((0,n.k)(l)){f=-1;for(var h=l.length;++f<h;){var p=l[f];if((0,i.K)(p))try{p.unsubscribe()}catch(t){e=e||[],t instanceof s.B?e=e.concat(c(t.errors)):e.push(t)}}}if(e)throw new s.B(e)}},t.prototype.add=function(e){var r=e;if(!e)return t.EMPTY;switch(typeof e){case"function":r=new t(e);case"object":if(r===this||r.closed||"function"!=typeof r.unsubscribe)return r;if(this.closed)return r.unsubscribe(),r;if(!(r instanceof t)){var n=r;(r=new t)._subscriptions=[n]}break;default:throw new Error("unrecognized teardown "+e+" added to Subscription.")}var i=r._parentOrParents;if(null===i)r._parentOrParents=this;else if(i instanceof t){if(i===this)return r;r._parentOrParents=[i,this]}else{if(-1!==i.indexOf(this))return r;i.push(this)}var o=this._subscriptions;return null===o?this._subscriptions=[r]:o.push(r),r},t.prototype.remove=function(t){var e=this._subscriptions;if(e){var r=e.indexOf(t);-1!==r&&e.splice(r,1)}},t.EMPTY=((e=new t).closed=!0,e),t}();function c(t){return t.reduce((function(t,e){return t.concat(e instanceof s.B?e.errors:e)}),[])}},2969:(t,e,r)=>{"use strict";r.d(e,{v:()=>i});var n=!1,i={Promise:void 0,set useDeprecatedSynchronousErrorHandling(t){t&&(new Error).stack,n=t},get useDeprecatedSynchronousErrorHandling(){return n}}},8490:(t,e,r)=>{"use strict";r.d(e,{c:()=>a,N:()=>l});var n=r(4425),i=r(168),o=r(5629),s=r(2227),u=r(136),c=r(812),a=function(t){function e(e,r){var n=t.call(this)||this;return n.source=e,n.subjectFactory=r,n._refCount=0,n._isComplete=!1,n}return n.ZT(e,t),e.prototype._subscribe=function(t){return this.getSubject().subscribe(t)},e.prototype.getSubject=function(){var t=this._subject;return t&&!t.isStopped||(this._subject=this.subjectFactory()),this._subject},e.prototype.connect=function(){var t=this._connection;return t||(this._isComplete=!1,(t=this._connection=new u.w).add(this.source.subscribe(new f(this.getSubject(),this))),t.closed&&(this._connection=null,t=u.w.EMPTY)),t},e.prototype.refCount=function(){return(0,c.x)()(this)},e}(o.y),l=function(){var t=a.prototype;return{operator:{value:null},_refCount:{value:0,writable:!0},_subject:{value:null,writable:!0},_connection:{value:null,writable:!0},_subscribe:{value:t._subscribe},_isComplete:{value:t._isComplete,writable:!0},getSubject:{value:t.getSubject},connect:{value:t.connect},refCount:{value:t.refCount}}}(),f=function(t){function e(e,r){var n=t.call(this,e)||this;return n.connectable=r,n}return n.ZT(e,t),e.prototype._error=function(e){this._unsubscribe(),t.prototype._error.call(this,e)},e.prototype._complete=function(){this.connectable._isComplete=!0,this._unsubscribe(),t.prototype._complete.call(this)},e.prototype._unsubscribe=function(){var t=this.connectable;if(t){this.connectable=null;var e=t._connection;t._refCount=0,t._subject=null,t._connection=null,e&&e.unsubscribe()}},e}(i.Yc);s.L},47:(t,e,r)=>{"use strict";r.d(e,{aj:()=>l,Ms:()=>f});var n=r(4425),i=r(9858),o=r(8856),s=r(7142),u=r(8455),c=r(7909),a={};function l(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var r=null,n=null;return(0,i.K)(t[t.length-1])&&(n=t.pop()),"function"==typeof t[t.length-1]&&(r=t.pop()),1===t.length&&(0,o.k)(t[0])&&(t=t[0]),(0,c.n)(t,n).lift(new f(r))}var f=function(){function t(t){this.resultSelector=t}return t.prototype.call=function(t,e){return e.subscribe(new h(t,this.resultSelector))},t}(),h=function(t){function e(e,r){var n=t.call(this,e)||this;return n.resultSelector=r,n.active=0,n.values=[],n.observables=[],n}return n.ZT(e,t),e.prototype._next=function(t){this.values.push(a),this.observables.push(t)},e.prototype._complete=function(){var t=this.observables,e=t.length;if(0===e)this.destination.complete();else{this.active=e,this.toRespond=e;for(var r=0;r<e;r++){var n=t[r];this.add((0,u.D)(this,n,n,r))}}},e.prototype.notifyComplete=function(t){0==(this.active-=1)&&this.destination.complete()},e.prototype.notifyNext=function(t,e,r,n,i){var o=this.values,s=o[r],u=this.toRespond?s===a?--this.toRespond:this.toRespond:0;o[r]=e,0===u&&(this.resultSelector?this._tryResultSelector(o):this.destination.next(o.slice()))},e.prototype._tryResultSelector=function(t){var e;try{e=this.resultSelector.apply(this,t)}catch(t){return void this.destination.error(t)}this.destination.next(e)},e}(s.L)},160:(t,e,r)=>{"use strict";r.d(e,{z:()=>o});var n=r(4065),i=r(7177);function o(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return(0,i.u)()(n.of.apply(void 0,t))}},3495:(t,e,r)=>{"use strict";r.d(e,{P:()=>s});var n=r(5629),i=r(4975),o=r(6595);function s(t){return new n.y((function(e){var r;try{r=t()}catch(t){return void e.error(t)}return(r?(0,i.D)(r):(0,o.c)()).subscribe(e)}))}},6595:(t,e,r)=>{"use strict";r.d(e,{E:()=>i,c:()=>o});var n=r(5629),i=new n.y((function(t){return t.complete()}));function o(t){return t?function(t){return new n.y((function(e){return t.schedule((function(){return e.complete()}))}))}(t):i}},4975:(t,e,r)=>{"use strict";r.d(e,{D:()=>s});var n=r(5629),i=r(2822),o=r(3063);function s(t,e){return e?(0,o.x)(t,e):t instanceof n.y?t:new n.y((0,i.s)(t))}},7909:(t,e,r)=>{"use strict";r.d(e,{n:()=>s});var n=r(5629),i=r(4317),o=r(9218);function s(t,e){return e?(0,o.r)(t,e):new n.y((0,i.V)(t))}},9775:(t,e,r)=>{"use strict";r.d(e,{T:()=>u});var n=r(5629),i=r(9858),o=r(8377),s=r(7909);function u(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var r=Number.POSITIVE_INFINITY,u=null,c=t[t.length-1];return(0,i.K)(c)?(u=t.pop(),t.length>1&&"number"==typeof t[t.length-1]&&(r=t.pop())):"number"==typeof c&&(r=t.pop()),null===u&&1===t.length&&t[0]instanceof n.y?t[0]:(0,o.J)(r)((0,s.n)(t,u))}},4065:(t,e,r)=>{"use strict";r.d(e,{of:()=>s});var n=r(9858),i=r(7909),o=r(9218);function s(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var r=t[t.length-1];return(0,n.K)(r)?(t.pop(),(0,o.r)(t,r)):(0,i.n)(t)}},2294:(t,e,r)=>{"use strict";r.d(e,{S3:()=>c});var n=r(4425),i=r(8856),o=r(7909),s=r(7142),u=r(8455);function c(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];if(1===t.length){if(!(0,i.k)(t[0]))return t[0];t=t[0]}return(0,o.n)(t,void 0).lift(new a)}var a=function(){function t(){}return t.prototype.call=function(t,e){return e.subscribe(new l(t))},t}(),l=function(t){function e(e){var r=t.call(this,e)||this;return r.hasFirst=!1,r.observables=[],r.subscriptions=[],r}return n.ZT(e,t),e.prototype._next=function(t){this.observables.push(t)},e.prototype._complete=function(){var t=this.observables,e=t.length;if(0===e)this.destination.complete();else{for(var r=0;r<e&&!this.hasFirst;r++){var n=t[r],i=(0,u.D)(this,n,n,r);this.subscriptions&&this.subscriptions.push(i),this.add(i)}this.observables=null}},e.prototype.notifyNext=function(t,e,r,n,i){if(!this.hasFirst){this.hasFirst=!0;for(var o=0;o<this.subscriptions.length;o++)if(o!==r){var s=this.subscriptions[o];s.unsubscribe(),this.remove(s)}this.subscriptions=null}this.destination.next(e)},e}(s.L)},4166:(t,e,r)=>{"use strict";r.d(e,{_:()=>i});var n=r(5629);function i(t,e){return e?new n.y((function(r){return e.schedule(o,0,{error:t,subscriber:r})})):new n.y((function(e){return e.error(t)}))}function o(t){var e=t.error;t.subscriber.error(e)}},2013:(t,e,r)=>{"use strict";r.d(e,{H:()=>u});var n=r(5629),i=r(5178),o=r(4667),s=r(9858);function u(t,e,r){void 0===t&&(t=0);var u=-1;return(0,o.k)(e)?u=Number(e)<1?1:Number(e):(0,s.K)(e)&&(r=e),(0,s.K)(r)||(r=i.P),new n.y((function(e){var n=(0,o.k)(t)?t:+t-r.now();return r.schedule(c,n,{index:0,period:u,subscriber:e})}))}function c(t){var e=t.index,r=t.period,n=t.subscriber;if(n.next(e),!n.closed){if(-1===r)return n.complete();t.index=e+1,this.schedule(t,r)}}},5476:(t,e,r)=>{"use strict";r.d(e,{$R:()=>l,mx:()=>f});var n=r(4425),i=r(7909),o=r(8856),s=r(2227),u=r(7142),c=r(8455),a=r(8450);function l(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var r=t[t.length-1];return"function"==typeof r&&t.pop(),(0,i.n)(t,void 0).lift(new f(r))}var f=function(){function t(t){this.resultSelector=t}return t.prototype.call=function(t,e){return e.subscribe(new h(t,this.resultSelector))},t}(),h=function(t){function e(e,r,n){void 0===n&&(n=Object.create(null));var i=t.call(this,e)||this;return i.iterators=[],i.active=0,i.resultSelector="function"==typeof r?r:null,i.values=n,i}return n.ZT(e,t),e.prototype._next=function(t){var e=this.iterators;(0,o.k)(t)?e.push(new d(t)):"function"==typeof t[a.hZ]?e.push(new p(t[a.hZ]())):e.push(new y(this.destination,this,t))},e.prototype._complete=function(){var t=this.iterators,e=t.length;if(this.unsubscribe(),0!==e){this.active=e;for(var r=0;r<e;r++){var n=t[r];n.stillUnsubscribed?this.destination.add(n.subscribe(n,r)):this.active--}}else this.destination.complete()},e.prototype.notifyInactive=function(){this.active--,0===this.active&&this.destination.complete()},e.prototype.checkIterators=function(){for(var t=this.iterators,e=t.length,r=this.destination,n=0;n<e;n++)if("function"==typeof(s=t[n]).hasValue&&!s.hasValue())return;var i=!1,o=[];for(n=0;n<e;n++){var s,u=(s=t[n]).next();if(s.hasCompleted()&&(i=!0),u.done)return void r.complete();o.push(u.value)}this.resultSelector?this._tryresultSelector(o):r.next(o),i&&r.complete()},e.prototype._tryresultSelector=function(t){var e;try{e=this.resultSelector.apply(this,t)}catch(t){return void this.destination.error(t)}this.destination.next(e)},e}(s.L),p=function(){function t(t){this.iterator=t,this.nextResult=t.next()}return t.prototype.hasValue=function(){return!0},t.prototype.next=function(){var t=this.nextResult;return this.nextResult=this.iterator.next(),t},t.prototype.hasCompleted=function(){var t=this.nextResult;return t&&t.done},t}(),d=function(){function t(t){this.array=t,this.index=0,this.length=0,this.length=t.length}return t.prototype[a.hZ]=function(){return this},t.prototype.next=function(t){var e=this.index++,r=this.array;return e<this.length?{value:r[e],done:!1}:{value:null,done:!0}},t.prototype.hasValue=function(){return this.array.length>this.index},t.prototype.hasCompleted=function(){return this.array.length===this.index},t}(),y=function(t){function e(e,r,n){var i=t.call(this,e)||this;return i.parent=r,i.observable=n,i.stillUnsubscribed=!0,i.buffer=[],i.isComplete=!1,i}return n.ZT(e,t),e.prototype[a.hZ]=function(){return this},e.prototype.next=function(){var t=this.buffer;return 0===t.length&&this.isComplete?{value:null,done:!0}:{value:t.shift(),done:!1}},e.prototype.hasValue=function(){return this.buffer.length>0},e.prototype.hasCompleted=function(){return 0===this.buffer.length&&this.isComplete},e.prototype.notifyComplete=function(){this.buffer.length>0?(this.isComplete=!0,this.parent.notifyInactive()):this.destination.complete()},e.prototype.notifyNext=function(t,e,r,n,i){this.buffer.push(e),this.parent.checkIterators()},e.prototype.subscribe=function(t,e){return(0,c.D)(this,this.observable,this,e)},e}(u.L)},7177:(t,e,r)=>{"use strict";r.d(e,{u:()=>i});var n=r(8377);function i(){return(0,n.J)(1)}},8825:(t,e,r)=>{"use strict";r.d(e,{h:()=>o});var n=r(4425),i=r(2227);function o(t,e){return function(r){return r.lift(new s(t,e))}}var s=function(){function t(t,e){this.predicate=t,this.thisArg=e}return t.prototype.call=function(t,e){return e.subscribe(new u(t,this.predicate,this.thisArg))},t}(),u=function(t){function e(e,r,n){var i=t.call(this,e)||this;return i.predicate=r,i.thisArg=n,i.count=0,i}return n.ZT(e,t),e.prototype._next=function(t){var e;try{e=this.predicate.call(this.thisArg,t,this.count++)}catch(t){return void this.destination.error(t)}e&&this.destination.next(t)},e}(i.L)},5510:(t,e,r)=>{"use strict";r.d(e,{v:()=>c,T:()=>h});var n=r(4425),i=r(2227),o=r(136),s=r(5629),u=r(168);function c(t,e,r,n){return function(i){return i.lift(new a(t,e,r,n))}}var a=function(){function t(t,e,r,n){this.keySelector=t,this.elementSelector=e,this.durationSelector=r,this.subjectSelector=n}return t.prototype.call=function(t,e){return e.subscribe(new l(t,this.keySelector,this.elementSelector,this.durationSelector,this.subjectSelector))},t}(),l=function(t){function e(e,r,n,i,o){var s=t.call(this,e)||this;return s.keySelector=r,s.elementSelector=n,s.durationSelector=i,s.subjectSelector=o,s.groups=null,s.attemptedToUnsubscribe=!1,s.count=0,s}return n.ZT(e,t),e.prototype._next=function(t){var e;try{e=this.keySelector(t)}catch(t){return void this.error(t)}this._group(t,e)},e.prototype._group=function(t,e){var r=this.groups;r||(r=this.groups=new Map);var n,i=r.get(e);if(this.elementSelector)try{n=this.elementSelector(t)}catch(t){this.error(t)}else n=t;if(!i){i=this.subjectSelector?this.subjectSelector():new u.xQ,r.set(e,i);var o=new h(e,i,this);if(this.destination.next(o),this.durationSelector){var s=void 0;try{s=this.durationSelector(new h(e,i))}catch(t){return void this.error(t)}this.add(s.subscribe(new f(e,i,this)))}}i.closed||i.next(n)},e.prototype._error=function(t){var e=this.groups;e&&(e.forEach((function(e,r){e.error(t)})),e.clear()),this.destination.error(t)},e.prototype._complete=function(){var t=this.groups;t&&(t.forEach((function(t,e){t.complete()})),t.clear()),this.destination.complete()},e.prototype.removeGroup=function(t){this.groups.delete(t)},e.prototype.unsubscribe=function(){this.closed||(this.attemptedToUnsubscribe=!0,0===this.count&&t.prototype.unsubscribe.call(this))},e}(i.L),f=function(t){function e(e,r,n){var i=t.call(this,r)||this;return i.key=e,i.group=r,i.parent=n,i}return n.ZT(e,t),e.prototype._next=function(t){this.complete()},e.prototype._unsubscribe=function(){var t=this.parent,e=this.key;this.key=this.parent=null,t&&t.removeGroup(e)},e}(i.L),h=function(t){function e(e,r,n){var i=t.call(this)||this;return i.key=e,i.groupSubject=r,i.refCountSubscription=n,i}return n.ZT(e,t),e.prototype._subscribe=function(t){var e=new o.w,r=this.refCountSubscription,n=this.groupSubject;return r&&!r.closed&&e.add(new p(r)),e.add(n.subscribe(t)),e},e}(s.y),p=function(t){function e(e){var r=t.call(this)||this;return r.parent=e,e.count++,r}return n.ZT(e,t),e.prototype.unsubscribe=function(){var e=this.parent;e.closed||this.closed||(t.prototype.unsubscribe.call(this),e.count-=1,0===e.count&&e.attemptedToUnsubscribe&&e.unsubscribe())},e}(o.w)},5934:(t,e,r)=>{"use strict";r.d(e,{U:()=>o});var n=r(4425),i=r(2227);function o(t,e){return function(r){if("function"!=typeof t)throw new TypeError("argument is not a function. Are you looking for `mapTo()`?");return r.lift(new s(t,e))}}var s=function(){function t(t,e){this.project=t,this.thisArg=e}return t.prototype.call=function(t,e){return e.subscribe(new u(t,this.project,this.thisArg))},t}(),u=function(t){function e(e,r,n){var i=t.call(this,e)||this;return i.project=r,i.count=0,i.thisArg=n||i,i}return n.ZT(e,t),e.prototype._next=function(t){var e;try{e=this.project.call(this.thisArg,t,this.count++)}catch(t){return void this.destination.error(t)}this.destination.next(e)},e}(i.L)},8377:(t,e,r)=>{"use strict";r.d(e,{J:()=>o});var n=r(5373),i=r(7326);function o(t){return void 0===t&&(t=Number.POSITIVE_INFINITY),(0,n.zg)(i.y,t)}},5373:(t,e,r)=>{"use strict";r.d(e,{zg:()=>a});var n=r(4425),i=r(8455),o=r(7142),s=r(7085),u=r(5934),c=r(4975);function a(t,e,r){return void 0===r&&(r=Number.POSITIVE_INFINITY),"function"==typeof e?function(n){return n.pipe(a((function(r,n){return(0,c.D)(t(r,n)).pipe((0,u.U)((function(t,i){return e(r,t,n,i)})))}),r))}:("number"==typeof e&&(r=e),function(e){return e.lift(new l(t,r))})}var l=function(){function t(t,e){void 0===e&&(e=Number.POSITIVE_INFINITY),this.project=t,this.concurrent=e}return t.prototype.call=function(t,e){return e.subscribe(new f(t,this.project,this.concurrent))},t}(),f=function(t){function e(e,r,n){void 0===n&&(n=Number.POSITIVE_INFINITY);var i=t.call(this,e)||this;return i.project=r,i.concurrent=n,i.hasCompleted=!1,i.buffer=[],i.active=0,i.index=0,i}return n.ZT(e,t),e.prototype._next=function(t){this.active<this.concurrent?this._tryNext(t):this.buffer.push(t)},e.prototype._tryNext=function(t){var e,r=this.index++;try{e=this.project(t,r)}catch(t){return void this.destination.error(t)}this.active++,this._innerSub(e,t,r)},e.prototype._innerSub=function(t,e,r){var n=new s.d(this,e,r),o=this.destination;o.add(n);var u=(0,i.D)(this,t,void 0,void 0,n);u!==n&&o.add(u)},e.prototype._complete=function(){this.hasCompleted=!0,0===this.active&&0===this.buffer.length&&this.destination.complete(),this.unsubscribe()},e.prototype.notifyNext=function(t,e,r,n,i){this.destination.next(e)},e.prototype.notifyComplete=function(t){var e=this.buffer;this.remove(t),this.active--,e.length>0?this._next(e.shift()):0===this.active&&this.hasCompleted&&this.destination.complete()},e}(o.L)},3272:(t,e,r)=>{"use strict";r.d(e,{QV:()=>s,ht:()=>c});var n=r(4425),i=r(2227),o=r(3597);function s(t,e){return void 0===e&&(e=0),function(r){return r.lift(new u(t,e))}}var u=function(){function t(t,e){void 0===e&&(e=0),this.scheduler=t,this.delay=e}return t.prototype.call=function(t,e){return e.subscribe(new c(t,this.scheduler,this.delay))},t}(),c=function(t){function e(e,r,n){void 0===n&&(n=0);var i=t.call(this,e)||this;return i.scheduler=r,i.delay=n,i}return n.ZT(e,t),e.dispatch=function(t){var e=t.notification,r=t.destination;e.observe(r),this.unsubscribe()},e.prototype.scheduleMessage=function(t){this.destination.add(this.scheduler.schedule(e.dispatch,this.delay,new a(t,this.destination)))},e.prototype._next=function(t){this.scheduleMessage(o.P.createNext(t))},e.prototype._error=function(t){this.scheduleMessage(o.P.createError(t)),this.unsubscribe()},e.prototype._complete=function(){this.scheduleMessage(o.P.createComplete()),this.unsubscribe()},e}(i.L),a=function(){return function(t,e){this.notification=t,this.destination=e}}()},812:(t,e,r)=>{"use strict";r.d(e,{x:()=>o});var n=r(4425),i=r(2227);function o(){return function(t){return t.lift(new s(t))}}var s=function(){function t(t){this.connectable=t}return t.prototype.call=function(t,e){var r=this.connectable;r._refCount++;var n=new u(t,r),i=e.subscribe(n);return n.closed||(n.connection=r.connect()),i},t}(),u=function(t){function e(e,r){var n=t.call(this,e)||this;return n.connectable=r,n}return n.ZT(e,t),e.prototype._unsubscribe=function(){var t=this.connectable;if(t){this.connectable=null;var e=t._refCount;if(e<=0)this.connection=null;else if(t._refCount=e-1,e>1)this.connection=null;else{var r=this.connection,n=t._connection;this.connection=null,!n||r&&n!==r||n.unsubscribe()}}else this.connection=null},e}(i.L)},7464:(t,e,r)=>{"use strict";r.d(e,{R:()=>c});var n=r(4425),i=r(5629),o=r(3697),s=r(4667),u=function(t){function e(e,r,n){void 0===r&&(r=0),void 0===n&&(n=o.e);var i=t.call(this)||this;return i.source=e,i.delayTime=r,i.scheduler=n,(!(0,s.k)(r)||r<0)&&(i.delayTime=0),n&&"function"==typeof n.schedule||(i.scheduler=o.e),i}return n.ZT(e,t),e.create=function(t,r,n){return void 0===r&&(r=0),void 0===n&&(n=o.e),new e(t,r,n)},e.dispatch=function(t){var e=t.source,r=t.subscriber;return this.add(e.subscribe(r))},e.prototype._subscribe=function(t){var r=this.delayTime,n=this.source;return this.scheduler.schedule(e.dispatch,r,{source:n,subscriber:t})},e}(i.y);function c(t,e){return void 0===e&&(e=0),function(r){return r.lift(new a(t,e))}}var a=function(){function t(t,e){this.scheduler=t,this.delay=e}return t.prototype.call=function(t,e){return new u(e,this.delay,this.scheduler).subscribe(t)},t}()},9218:(t,e,r)=>{"use strict";r.d(e,{r:()=>o});var n=r(5629),i=r(136);function o(t,e){return new n.y((function(r){var n=new i.w,o=0;return n.add(e.schedule((function(){o!==t.length?(r.next(t[o++]),r.closed||n.add(this.schedule())):r.complete()}))),n}))}},3063:(t,e,r)=>{"use strict";r.d(e,{x:()=>l});var n=r(5629),i=r(136),o=r(9570),s=r(9218),u=r(8450),c=r(2053),a=r(8126);function l(t,e){if(null!=t){if(function(t){return t&&"function"==typeof t[o.L]}(t))return function(t,e){return new n.y((function(r){var n=new i.w;return n.add(e.schedule((function(){var i=t[o.L]();n.add(i.subscribe({next:function(t){n.add(e.schedule((function(){return r.next(t)})))},error:function(t){n.add(e.schedule((function(){return r.error(t)})))},complete:function(){n.add(e.schedule((function(){return r.complete()})))}}))}))),n}))}(t,e);if((0,c.t)(t))return function(t,e){return new n.y((function(r){var n=new i.w;return n.add(e.schedule((function(){return t.then((function(t){n.add(e.schedule((function(){r.next(t),n.add(e.schedule((function(){return r.complete()})))})))}),(function(t){n.add(e.schedule((function(){return r.error(t)})))}))}))),n}))}(t,e);if((0,a.z)(t))return(0,s.r)(t,e);if(function(t){return t&&"function"==typeof t[u.hZ]}(t)||"string"==typeof t)return function(t,e){if(!t)throw new Error("Iterable cannot be null");return new n.y((function(r){var n,o=new i.w;return o.add((function(){n&&"function"==typeof n.return&&n.return()})),o.add(e.schedule((function(){n=t[u.hZ](),o.add(e.schedule((function(){if(!r.closed){var t,e;try{var i=n.next();t=i.value,e=i.done}catch(t){return void r.error(t)}e?r.complete():(r.next(t),this.schedule())}})))}))),o}))}(t,e)}throw new TypeError((null!==t&&typeof t||t)+" is not observable")}},8710:(t,e,r)=>{"use strict";r.d(e,{o:()=>i});var n=r(4425),i=function(t){function e(e,r){var n=t.call(this,e,r)||this;return n.scheduler=e,n.work=r,n.pending=!1,n}return n.ZT(e,t),e.prototype.schedule=function(t,e){if(void 0===e&&(e=0),this.closed)return this;this.state=t;var r=this.id,n=this.scheduler;return null!=r&&(this.id=this.recycleAsyncId(n,r,e)),this.pending=!0,this.delay=e,this.id=this.id||this.requestAsyncId(n,this.id,e),this},e.prototype.requestAsyncId=function(t,e,r){return void 0===r&&(r=0),setInterval(t.flush.bind(t,this),r)},e.prototype.recycleAsyncId=function(t,e,r){if(void 0===r&&(r=0),null!==r&&this.delay===r&&!1===this.pending)return e;clearInterval(e)},e.prototype.execute=function(t,e){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var r=this._execute(t,e);if(r)return r;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},e.prototype._execute=function(t,e){var r=!1,n=void 0;try{this.work(t)}catch(t){r=!0,n=!!t&&t||new Error(t)}if(r)return this.unsubscribe(),n},e.prototype._unsubscribe=function(){var t=this.id,e=this.scheduler,r=e.actions,n=r.indexOf(this);this.work=null,this.state=null,this.pending=!1,this.scheduler=null,-1!==n&&r.splice(n,1),null!=t&&(this.id=this.recycleAsyncId(e,t,null)),this.delay=null},e}(function(t){function e(e,r){return t.call(this)||this}return n.ZT(e,t),e.prototype.schedule=function(t,e){return void 0===e&&(e=0),this},e}(r(136).w))},6602:(t,e,r)=>{"use strict";r.d(e,{v:()=>o});var n=r(4425),i=r(3537),o=function(t){function e(r,n){void 0===n&&(n=i.b.now);var o=t.call(this,r,(function(){return e.delegate&&e.delegate!==o?e.delegate.now():n()}))||this;return o.actions=[],o.active=!1,o.scheduled=void 0,o}return n.ZT(e,t),e.prototype.schedule=function(r,n,i){return void 0===n&&(n=0),e.delegate&&e.delegate!==this?e.delegate.schedule(r,n,i):t.prototype.schedule.call(this,r,n,i)},e.prototype.flush=function(t){var e=this.actions;if(this.active)e.push(t);else{var r;this.active=!0;do{if(r=t.execute(t.state,t.delay))break}while(t=e.shift());if(this.active=!1,r){for(;t=e.shift();)t.unsubscribe();throw r}}},e}(i.b)},3697:(t,e,r)=>{"use strict";r.d(e,{e:()=>a});var n=r(4425),i=1,o=function(){return Promise.resolve()}(),s={};function u(t){return t in s&&(delete s[t],!0)}var c=function(t){function e(e,r){var n=t.call(this,e,r)||this;return n.scheduler=e,n.work=r,n}return n.ZT(e,t),e.prototype.requestAsyncId=function(e,r,n){return void 0===n&&(n=0),null!==n&&n>0?t.prototype.requestAsyncId.call(this,e,r,n):(e.actions.push(this),e.scheduled||(e.scheduled=(c=e.flush.bind(e,null),a=i++,s[a]=!0,o.then((function(){return u(a)&&c()})),a)));var c,a},e.prototype.recycleAsyncId=function(e,r,n){if(void 0===n&&(n=0),null!==n&&n>0||null===n&&this.delay>0)return t.prototype.recycleAsyncId.call(this,e,r,n);0===e.actions.length&&(u(r),e.scheduled=void 0)},e}(r(8710).o),a=new(function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return n.ZT(e,t),e.prototype.flush=function(t){this.active=!0,this.scheduled=void 0;var e,r=this.actions,n=-1,i=r.length;t=t||r.shift();do{if(e=t.execute(t.state,t.delay))break}while(++n<i&&(t=r.shift()));if(this.active=!1,e){for(;++n<i&&(t=r.shift());)t.unsubscribe();throw e}},e}(r(6602).v))(c)},5178:(t,e,r)=>{"use strict";r.d(e,{P:()=>i});var n=r(8710),i=new(r(6602).v)(n.o)},1394:(t,e,r)=>{"use strict";r.d(e,{c:()=>o});var n=r(4425),i=function(t){function e(e,r){var n=t.call(this,e,r)||this;return n.scheduler=e,n.work=r,n}return n.ZT(e,t),e.prototype.schedule=function(e,r){return void 0===r&&(r=0),r>0?t.prototype.schedule.call(this,e,r):(this.delay=r,this.state=e,this.scheduler.flush(this),this)},e.prototype.execute=function(e,r){return r>0||this.closed?t.prototype.execute.call(this,e,r):this._execute(e,r)},e.prototype.requestAsyncId=function(e,r,n){return void 0===n&&(n=0),null!==n&&n>0||null===n&&this.delay>0?t.prototype.requestAsyncId.call(this,e,r,n):e.flush(this)},e}(r(8710).o),o=new(function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return n.ZT(e,t),e}(r(6602).v))(i)},8450:(t,e,r)=>{"use strict";function n(){return"function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator"}r.d(e,{hZ:()=>i});var i=n()},9570:(t,e,r)=>{"use strict";r.d(e,{L:()=>n});var n=function(){return"function"==typeof Symbol&&Symbol.observable||"@@observable"}()},6026:(t,e,r)=>{"use strict";r.d(e,{b:()=>n});var n=function(){return"function"==typeof Symbol?Symbol("rxSubscriber"):"@@rxSubscriber_"+Math.random()}()},9050:(t,e,r)=>{"use strict";r.d(e,{W:()=>n});var n=function(){function t(){return Error.call(this),this.message="argument out of range",this.name="ArgumentOutOfRangeError",this}return t.prototype=Object.create(Error.prototype),t}()},8413:(t,e,r)=>{"use strict";r.d(e,{K:()=>n});var n=function(){function t(){return Error.call(this),this.message="no elements in sequence",this.name="EmptyError",this}return t.prototype=Object.create(Error.prototype),t}()},1033:(t,e,r)=>{"use strict";r.d(e,{N:()=>n});var n=function(){function t(){return Error.call(this),this.message="object unsubscribed",this.name="ObjectUnsubscribedError",this}return t.prototype=Object.create(Error.prototype),t}()},9163:(t,e,r)=>{"use strict";r.d(e,{W:()=>n});var n=function(){function t(){return Error.call(this),this.message="Timeout has occurred",this.name="TimeoutError",this}return t.prototype=Object.create(Error.prototype),t}()},4693:(t,e,r)=>{"use strict";r.d(e,{B:()=>n});var n=function(){function t(t){return Error.call(this),this.message=t?t.length+" errors occurred during unsubscription:\n"+t.map((function(t,e){return e+1+") "+t.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=t,this}return t.prototype=Object.create(Error.prototype),t}()},2600:(t,e,r)=>{"use strict";r.d(e,{_:()=>i});var n=r(2227);function i(t){for(;t;){var e=t,r=e.closed,i=e.destination,o=e.isStopped;if(r||o)return!1;t=i&&i instanceof n.L?i:null}return!0}},260:(t,e,r)=>{"use strict";function n(t){setTimeout((function(){throw t}),0)}r.d(e,{z:()=>n})},7326:(t,e,r)=>{"use strict";function n(t){return t}r.d(e,{y:()=>n})},8856:(t,e,r)=>{"use strict";r.d(e,{k:()=>n});var n=function(){return Array.isArray||function(t){return t&&"number"==typeof t.length}}()},8126:(t,e,r)=>{"use strict";r.d(e,{z:()=>n});var n=function(t){return t&&"number"==typeof t.length&&"function"!=typeof t}},9537:(t,e,r)=>{"use strict";function n(t){return"function"==typeof t}r.d(e,{m:()=>n})},4667:(t,e,r)=>{"use strict";r.d(e,{k:()=>i});var n=r(8856);function i(t){return!(0,n.k)(t)&&t-parseFloat(t)+1>=0}},2037:(t,e,r)=>{"use strict";function n(t){return null!==t&&"object"==typeof t}r.d(e,{K:()=>n})},2053:(t,e,r)=>{"use strict";function n(t){return!!t&&"function"!=typeof t.subscribe&&"function"==typeof t.then}r.d(e,{t:()=>n})},9858:(t,e,r)=>{"use strict";function n(t){return t&&"function"==typeof t.schedule}r.d(e,{K:()=>n})},1036:(t,e,r)=>{"use strict";function n(){}r.d(e,{Z:()=>n})},2584:(t,e,r)=>{"use strict";function n(t,e){function r(){return!r.pred.apply(r.thisArg,arguments)}return r.pred=t,r.thisArg=e,r}r.d(e,{f:()=>n})},986:(t,e,r)=>{"use strict";r.d(e,{z:()=>i,U:()=>o});var n=r(7326);function i(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return o(t)}function o(t){return 0===t.length?n.y:1===t.length?t[0]:function(e){return t.reduce((function(t,e){return e(t)}),e)}}},2822:(t,e,r)=>{"use strict";r.d(e,{s:()=>l});var n=r(4317),i=r(260),o=r(8450),s=r(9570),u=r(8126),c=r(2053),a=r(2037),l=function(t){if(t&&"function"==typeof t[s.L])return l=t,function(t){var e=l[s.L]();if("function"!=typeof e.subscribe)throw new TypeError("Provided object does not correctly implement Symbol.observable");return e.subscribe(t)};if((0,u.z)(t))return(0,n.V)(t);if((0,c.t)(t))return r=t,function(t){return r.then((function(e){t.closed||(t.next(e),t.complete())}),(function(e){return t.error(e)})).then(null,i.z),t};if(t&&"function"==typeof t[o.hZ])return e=t,function(t){for(var r=e[o.hZ]();;){var n=r.next();if(n.done){t.complete();break}if(t.next(n.value),t.closed)break}return"function"==typeof r.return&&t.add((function(){r.return&&r.return()})),t};var e,r,l,f=(0,a.K)(t)?"an invalid object":"'"+t+"'";throw new TypeError("You provided "+f+" where a stream was expected. You can provide an Observable, Promise, Array, or Iterable.")}},4317:(t,e,r)=>{"use strict";r.d(e,{V:()=>n});var n=function(t){return function(e){for(var r=0,n=t.length;r<n&&!e.closed;r++)e.next(t[r]);e.complete()}}},8455:(t,e,r)=>{"use strict";r.d(e,{D:()=>s});var n=r(7085),i=r(2822),o=r(5629);function s(t,e,r,s,u){if(void 0===u&&(u=new n.d(t,r,s)),!u.closed)return e instanceof o.y?e.subscribe(u):(0,i.s)(e)(u)}},2868:(t,e,r)=>{"use strict";r.r(e),r.d(e,{audit:()=>s,auditTime:()=>f,buffer:()=>h,bufferCount:()=>v,bufferTime:()=>x,bufferToggle:()=>P,bufferWhen:()=>k,catchError:()=>M,combineAll:()=>U,combineLatest:()=>B,concat:()=>Y,concatAll:()=>q.u,concatMap:()=>X,concatMapTo:()=>$,count:()=>H,debounce:()=>J,debounceTime:()=>rt,defaultIfEmpty:()=>st,delay:()=>ft,delayWhen:()=>vt,dematerialize:()=>xt,distinct:()=>_t,distinctUntilChanged:()=>Ot,distinctUntilKeyChanged:()=>It,elementAt:()=>zt,endWith:()=>Wt,every:()=>Yt,exhaust:()=>Xt,exhaustMap:()=>Qt,expand:()=>ee,filter:()=>kt.h,finalize:()=>ie,find:()=>ue,findIndex:()=>le,first:()=>he,flatMap:()=>K.zg,groupBy:()=>pe.v,ignoreElements:()=>de,isEmpty:()=>be,last:()=>Se,map:()=>Gt.U,mapTo:()=>_e,materialize:()=>Oe,max:()=>Le,merge:()=>Re,mergeAll:()=>Ve.J,mergeMap:()=>K.zg,mergeMapTo:()=>Fe,mergeScan:()=>Ue,min:()=>Be,multicast:()=>Ye,observeOn:()=>Ke.QV,onErrorResumeNext:()=>Xe,pairwise:()=>Ge,partition:()=>er,pluck:()=>rr,publish:()=>or,publishBehavior:()=>ur,publishLast:()=>ar,publishReplay:()=>fr,race:()=>pr,reduce:()=>Ce,refCount:()=>Er.x,repeat:()=>dr,repeatWhen:()=>br,retry:()=>wr,retryWhen:()=>Sr,sample:()=>Or,sampleTime:()=>Ir,scan:()=>Ie,sequenceEqual:()=>Cr,share:()=>Fr,shareReplay:()=>Ur,single:()=>Zr,skip:()=>Wr,skipLast:()=>Kr,skipUntil:()=>Hr,skipWhile:()=>Jr,startWith:()=>rn,subscribeOn:()=>nn.R,switchAll:()=>cn,switchMap:()=>on,switchMapTo:()=>an,take:()=>Ft,takeLast:()=>we,takeUntil:()=>ln,takeWhile:()=>pn,tap:()=>gn,throttle:()=>An,throttleTime:()=>Tn,throwIfEmpty:()=>Ct,timeInterval:()=>In,timeout:()=>Rn,timeoutWith:()=>Dn,timestamp:()=>Vn,toArray:()=>Zn,window:()=>zn,windowCount:()=>Yn,windowTime:()=>$n,windowToggle:()=>ri,windowWhen:()=>oi,withLatestFrom:()=>ci,zip:()=>hi,zipAll:()=>pi});var n=r(4425),i=r(7142),o=r(8455);function s(t){return function(e){return e.lift(new u(t))}}var u=function(){function t(t){this.durationSelector=t}return t.prototype.call=function(t,e){return e.subscribe(new c(t,this.durationSelector))},t}(),c=function(t){function e(e,r){var n=t.call(this,e)||this;return n.durationSelector=r,n.hasValue=!1,n}return n.ZT(e,t),e.prototype._next=function(t){if(this.value=t,this.hasValue=!0,!this.throttled){var e=void 0;try{e=(0,this.durationSelector)(t)}catch(t){return this.destination.error(t)}var r=(0,o.D)(this,e);!r||r.closed?this.clearThrottle():this.add(this.throttled=r)}},e.prototype.clearThrottle=function(){var t=this,e=t.value,r=t.hasValue,n=t.throttled;n&&(this.remove(n),this.throttled=null,n.unsubscribe()),r&&(this.value=null,this.hasValue=!1,this.destination.next(e))},e.prototype.notifyNext=function(t,e,r,n){this.clearThrottle()},e.prototype.notifyComplete=function(){this.clearThrottle()},e}(i.L),a=r(5178),l=r(2013);function f(t,e){return void 0===e&&(e=a.P),s((function(){return(0,l.H)(t,e)}))}function h(t){return function(e){return e.lift(new p(t))}}var p=function(){function t(t){this.closingNotifier=t}return t.prototype.call=function(t,e){return e.subscribe(new d(t,this.closingNotifier))},t}(),d=function(t){function e(e,r){var n=t.call(this,e)||this;return n.buffer=[],n.add((0,o.D)(n,r)),n}return n.ZT(e,t),e.prototype._next=function(t){this.buffer.push(t)},e.prototype.notifyNext=function(t,e,r,n,i){var o=this.buffer;this.buffer=[],this.destination.next(o)},e}(i.L),y=r(2227);function v(t,e){return void 0===e&&(e=null),function(r){return r.lift(new b(t,e))}}var b=function(){function t(t,e){this.bufferSize=t,this.startBufferEvery=e,this.subscriberClass=e&&t!==e?m:g}return t.prototype.call=function(t,e){return e.subscribe(new this.subscriberClass(t,this.bufferSize,this.startBufferEvery))},t}(),g=function(t){function e(e,r){var n=t.call(this,e)||this;return n.bufferSize=r,n.buffer=[],n}return n.ZT(e,t),e.prototype._next=function(t){var e=this.buffer;e.push(t),e.length==this.bufferSize&&(this.destination.next(e),this.buffer=[])},e.prototype._complete=function(){var e=this.buffer;e.length>0&&this.destination.next(e),t.prototype._complete.call(this)},e}(y.L),m=function(t){function e(e,r,n){var i=t.call(this,e)||this;return i.bufferSize=r,i.startBufferEvery=n,i.buffers=[],i.count=0,i}return n.ZT(e,t),e.prototype._next=function(t){var e=this,r=e.bufferSize,n=e.startBufferEvery,i=e.buffers,o=e.count;this.count++,o%n==0&&i.push([]);for(var s=i.length;s--;){var u=i[s];u.push(t),u.length===r&&(i.splice(s,1),this.destination.next(u))}},e.prototype._complete=function(){for(var e=this.buffers,r=this.destination;e.length>0;){var n=e.shift();n.length>0&&r.next(n)}t.prototype._complete.call(this)},e}(y.L),w=r(9858);function x(t){var e=arguments.length,r=a.P;(0,w.K)(arguments[arguments.length-1])&&(r=arguments[arguments.length-1],e--);var n=null;e>=2&&(n=arguments[1]);var i=Number.POSITIVE_INFINITY;return e>=3&&(i=arguments[2]),function(e){return e.lift(new A(t,n,i,r))}}var A=function(){function t(t,e,r,n){this.bufferTimeSpan=t,this.bufferCreationInterval=e,this.maxBufferSize=r,this.scheduler=n}return t.prototype.call=function(t,e){return e.subscribe(new _(t,this.bufferTimeSpan,this.bufferCreationInterval,this.maxBufferSize,this.scheduler))},t}(),S=function(){return function(){this.buffer=[]}}(),_=function(t){function e(e,r,n,i,o){var s=t.call(this,e)||this;s.bufferTimeSpan=r,s.bufferCreationInterval=n,s.maxBufferSize=i,s.scheduler=o,s.contexts=[];var u=s.openContext();if(s.timespanOnly=null==n||n<0,s.timespanOnly){var c={subscriber:s,context:u,bufferTimeSpan:r};s.add(u.closeAction=o.schedule(T,r,c))}else{var a={subscriber:s,context:u},l={bufferTimeSpan:r,bufferCreationInterval:n,subscriber:s,scheduler:o};s.add(u.closeAction=o.schedule(O,r,a)),s.add(o.schedule(E,n,l))}return s}return n.ZT(e,t),e.prototype._next=function(t){for(var e,r=this.contexts,n=r.length,i=0;i<n;i++){var o=r[i],s=o.buffer;s.push(t),s.length==this.maxBufferSize&&(e=o)}e&&this.onBufferFull(e)},e.prototype._error=function(e){this.contexts.length=0,t.prototype._error.call(this,e)},e.prototype._complete=function(){for(var e=this.contexts,r=this.destination;e.length>0;){var n=e.shift();r.next(n.buffer)}t.prototype._complete.call(this)},e.prototype._unsubscribe=function(){this.contexts=null},e.prototype.onBufferFull=function(t){this.closeContext(t);var e=t.closeAction;if(e.unsubscribe(),this.remove(e),!this.closed&&this.timespanOnly){t=this.openContext();var r=this.bufferTimeSpan,n={subscriber:this,context:t,bufferTimeSpan:r};this.add(t.closeAction=this.scheduler.schedule(T,r,n))}},e.prototype.openContext=function(){var t=new S;return this.contexts.push(t),t},e.prototype.closeContext=function(t){this.destination.next(t.buffer);var e=this.contexts;(e?e.indexOf(t):-1)>=0&&e.splice(e.indexOf(t),1)},e}(y.L);function T(t){var e=t.subscriber,r=t.context;r&&e.closeContext(r),e.closed||(t.context=e.openContext(),t.context.closeAction=this.schedule(t,t.bufferTimeSpan))}function E(t){var e=t.bufferCreationInterval,r=t.bufferTimeSpan,n=t.subscriber,i=t.scheduler,o=n.openContext();n.closed||(n.add(o.closeAction=i.schedule(O,r,{subscriber:n,context:o})),this.schedule(t,e))}function O(t){var e=t.subscriber,r=t.context;e.closeContext(r)}var j=r(136);function P(t,e){return function(r){return r.lift(new I(t,e))}}var I=function(){function t(t,e){this.openings=t,this.closingSelector=e}return t.prototype.call=function(t,e){return e.subscribe(new N(t,this.openings,this.closingSelector))},t}(),N=function(t){function e(e,r,n){var i=t.call(this,e)||this;return i.openings=r,i.closingSelector=n,i.contexts=[],i.add((0,o.D)(i,r)),i}return n.ZT(e,t),e.prototype._next=function(t){for(var e=this.contexts,r=e.length,n=0;n<r;n++)e[n].buffer.push(t)},e.prototype._error=function(e){for(var r=this.contexts;r.length>0;){var n=r.shift();n.subscription.unsubscribe(),n.buffer=null,n.subscription=null}this.contexts=null,t.prototype._error.call(this,e)},e.prototype._complete=function(){for(var e=this.contexts;e.length>0;){var r=e.shift();this.destination.next(r.buffer),r.subscription.unsubscribe(),r.buffer=null,r.subscription=null}this.contexts=null,t.prototype._complete.call(this)},e.prototype.notifyNext=function(t,e,r,n,i){t?this.closeBuffer(t):this.openBuffer(e)},e.prototype.notifyComplete=function(t){this.closeBuffer(t.context)},e.prototype.openBuffer=function(t){try{var e=this.closingSelector.call(this,t);e&&this.trySubscribe(e)}catch(t){this._error(t)}},e.prototype.closeBuffer=function(t){var e=this.contexts;if(e&&t){var r=t.buffer,n=t.subscription;this.destination.next(r),e.splice(e.indexOf(t),1),this.remove(n),n.unsubscribe()}},e.prototype.trySubscribe=function(t){var e=this.contexts,r=new j.w,n={buffer:[],subscription:r};e.push(n);var i=(0,o.D)(this,t,n);!i||i.closed?this.closeBuffer(n):(i.context=n,this.add(i),r.add(i))},e}(i.L);function k(t){return function(e){return e.lift(new D(t))}}var D=function(){function t(t){this.closingSelector=t}return t.prototype.call=function(t,e){return e.subscribe(new C(t,this.closingSelector))},t}(),C=function(t){function e(e,r){var n=t.call(this,e)||this;return n.closingSelector=r,n.subscribing=!1,n.openBuffer(),n}return n.ZT(e,t),e.prototype._next=function(t){this.buffer.push(t)},e.prototype._complete=function(){var e=this.buffer;e&&this.destination.next(e),t.prototype._complete.call(this)},e.prototype._unsubscribe=function(){this.buffer=null,this.subscribing=!1},e.prototype.notifyNext=function(t,e,r,n,i){this.openBuffer()},e.prototype.notifyComplete=function(){this.subscribing?this.complete():this.openBuffer()},e.prototype.openBuffer=function(){var t=this.closingSubscription;t&&(this.remove(t),t.unsubscribe());var e,r=this.buffer;this.buffer&&this.destination.next(r),this.buffer=[];try{e=(0,this.closingSelector)()}catch(t){return this.error(t)}t=new j.w,this.closingSubscription=t,this.add(t),this.subscribing=!0,t.add((0,o.D)(this,e)),this.subscribing=!1},e}(i.L),L=r(7085);function M(t){return function(e){var r=new R(t),n=e.lift(r);return r.caught=n}}var R=function(){function t(t){this.selector=t}return t.prototype.call=function(t,e){return e.subscribe(new V(t,this.selector,this.caught))},t}(),V=function(t){function e(e,r,n){var i=t.call(this,e)||this;return i.selector=r,i.caught=n,i}return n.ZT(e,t),e.prototype.error=function(e){if(!this.isStopped){var r=void 0;try{r=this.selector(e,this.caught)}catch(e){return void t.prototype.error.call(this,e)}this._unsubscribeAndRecycle();var n=new L.d(this,void 0,void 0);this.add(n);var i=(0,o.D)(this,r,void 0,void 0,n);i!==n&&this.add(i)}},e}(i.L),F=r(47);function U(t){return function(e){return e.lift(new F.Ms(t))}}var Z=r(8856),z=r(4975);function B(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var r=null;return"function"==typeof t[t.length-1]&&(r=t.pop()),1===t.length&&(0,Z.k)(t[0])&&(t=t[0].slice()),function(e){return e.lift.call((0,z.D)([e].concat(t)),new F.Ms(r))}}var W=r(160);function Y(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return function(e){return e.lift.call(W.z.apply(void 0,[e].concat(t)))}}var q=r(7177),K=r(5373);function X(t,e){return(0,K.zg)(t,e,1)}function $(t,e){return X((function(){return t}),e)}function H(t){return function(e){return e.lift(new G(t,e))}}var G=function(){function t(t,e){this.predicate=t,this.source=e}return t.prototype.call=function(t,e){return e.subscribe(new Q(t,this.predicate,this.source))},t}(),Q=function(t){function e(e,r,n){var i=t.call(this,e)||this;return i.predicate=r,i.source=n,i.count=0,i.index=0,i}return n.ZT(e,t),e.prototype._next=function(t){this.predicate?this._tryPredicate(t):this.count++},e.prototype._tryPredicate=function(t){var e;try{e=this.predicate(t,this.index++,this.source)}catch(t){return void this.destination.error(t)}e&&this.count++},e.prototype._complete=function(){this.destination.next(this.count),this.destination.complete()},e}(y.L);function J(t){return function(e){return e.lift(new tt(t))}}var tt=function(){function t(t){this.durationSelector=t}return t.prototype.call=function(t,e){return e.subscribe(new et(t,this.durationSelector))},t}(),et=function(t){function e(e,r){var n=t.call(this,e)||this;return n.durationSelector=r,n.hasValue=!1,n.durationSubscription=null,n}return n.ZT(e,t),e.prototype._next=function(t){try{var e=this.durationSelector.call(this,t);e&&this._tryNext(t,e)}catch(t){this.destination.error(t)}},e.prototype._complete=function(){this.emitValue(),this.destination.complete()},e.prototype._tryNext=function(t,e){var r=this.durationSubscription;this.value=t,this.hasValue=!0,r&&(r.unsubscribe(),this.remove(r)),(r=(0,o.D)(this,e))&&!r.closed&&this.add(this.durationSubscription=r)},e.prototype.notifyNext=function(t,e,r,n,i){this.emitValue()},e.prototype.notifyComplete=function(){this.emitValue()},e.prototype.emitValue=function(){if(this.hasValue){var e=this.value,r=this.durationSubscription;r&&(this.durationSubscription=null,r.unsubscribe(),this.remove(r)),this.value=null,this.hasValue=!1,t.prototype._next.call(this,e)}},e}(i.L);function rt(t,e){return void 0===e&&(e=a.P),function(r){return r.lift(new nt(t,e))}}var nt=function(){function t(t,e){this.dueTime=t,this.scheduler=e}return t.prototype.call=function(t,e){return e.subscribe(new it(t,this.dueTime,this.scheduler))},t}(),it=function(t){function e(e,r,n){var i=t.call(this,e)||this;return i.dueTime=r,i.scheduler=n,i.debouncedSubscription=null,i.lastValue=null,i.hasValue=!1,i}return n.ZT(e,t),e.prototype._next=function(t){this.clearDebounce(),this.lastValue=t,this.hasValue=!0,this.add(this.debouncedSubscription=this.scheduler.schedule(ot,this.dueTime,this))},e.prototype._complete=function(){this.debouncedNext(),this.destination.complete()},e.prototype.debouncedNext=function(){if(this.clearDebounce(),this.hasValue){var t=this.lastValue;this.lastValue=null,this.hasValue=!1,this.destination.next(t)}},e.prototype.clearDebounce=function(){var t=this.debouncedSubscription;null!==t&&(this.remove(t),t.unsubscribe(),this.debouncedSubscription=null)},e}(y.L);function ot(t){t.debouncedNext()}function st(t){return void 0===t&&(t=null),function(e){return e.lift(new ut(t))}}var ut=function(){function t(t){this.defaultValue=t}return t.prototype.call=function(t,e){return e.subscribe(new ct(t,this.defaultValue))},t}(),ct=function(t){function e(e,r){var n=t.call(this,e)||this;return n.defaultValue=r,n.isEmpty=!0,n}return n.ZT(e,t),e.prototype._next=function(t){this.isEmpty=!1,this.destination.next(t)},e.prototype._complete=function(){this.isEmpty&&this.destination.next(this.defaultValue),this.destination.complete()},e}(y.L);function at(t){return t instanceof Date&&!isNaN(+t)}var lt=r(3597);function ft(t,e){void 0===e&&(e=a.P);var r=at(t)?+t-e.now():Math.abs(t);return function(t){return t.lift(new ht(r,e))}}var ht=function(){function t(t,e){this.delay=t,this.scheduler=e}return t.prototype.call=function(t,e){return e.subscribe(new pt(t,this.delay,this.scheduler))},t}(),pt=function(t){function e(e,r,n){var i=t.call(this,e)||this;return i.delay=r,i.scheduler=n,i.queue=[],i.active=!1,i.errored=!1,i}return n.ZT(e,t),e.dispatch=function(t){for(var e=t.source,r=e.queue,n=t.scheduler,i=t.destination;r.length>0&&r[0].time-n.now()<=0;)r.shift().notification.observe(i);if(r.length>0){var o=Math.max(0,r[0].time-n.now());this.schedule(t,o)}else this.unsubscribe(),e.active=!1},e.prototype._schedule=function(t){this.active=!0,this.destination.add(t.schedule(e.dispatch,this.delay,{source:this,destination:this.destination,scheduler:t}))},e.prototype.scheduleNotification=function(t){if(!0!==this.errored){var e=this.scheduler,r=new dt(e.now()+this.delay,t);this.queue.push(r),!1===this.active&&this._schedule(e)}},e.prototype._next=function(t){this.scheduleNotification(lt.P.createNext(t))},e.prototype._error=function(t){this.errored=!0,this.queue=[],this.destination.error(t),this.unsubscribe()},e.prototype._complete=function(){this.scheduleNotification(lt.P.createComplete()),this.unsubscribe()},e}(y.L),dt=function(){return function(t,e){this.time=t,this.notification=e}}(),yt=r(5629);function vt(t,e){return e?function(r){return new mt(r,e).lift(new bt(t))}:function(e){return e.lift(new bt(t))}}var bt=function(){function t(t){this.delayDurationSelector=t}return t.prototype.call=function(t,e){return e.subscribe(new gt(t,this.delayDurationSelector))},t}(),gt=function(t){function e(e,r){var n=t.call(this,e)||this;return n.delayDurationSelector=r,n.completed=!1,n.delayNotifierSubscriptions=[],n.index=0,n}return n.ZT(e,t),e.prototype.notifyNext=function(t,e,r,n,i){this.destination.next(t),this.removeSubscription(i),this.tryComplete()},e.prototype.notifyError=function(t,e){this._error(t)},e.prototype.notifyComplete=function(t){var e=this.removeSubscription(t);e&&this.destination.next(e),this.tryComplete()},e.prototype._next=function(t){var e=this.index++;try{var r=this.delayDurationSelector(t,e);r&&this.tryDelay(r,t)}catch(t){this.destination.error(t)}},e.prototype._complete=function(){this.completed=!0,this.tryComplete(),this.unsubscribe()},e.prototype.removeSubscription=function(t){t.unsubscribe();var e=this.delayNotifierSubscriptions.indexOf(t);return-1!==e&&this.delayNotifierSubscriptions.splice(e,1),t.outerValue},e.prototype.tryDelay=function(t,e){var r=(0,o.D)(this,t,e);r&&!r.closed&&(this.destination.add(r),this.delayNotifierSubscriptions.push(r))},e.prototype.tryComplete=function(){this.completed&&0===this.delayNotifierSubscriptions.length&&this.destination.complete()},e}(i.L),mt=function(t){function e(e,r){var n=t.call(this)||this;return n.source=e,n.subscriptionDelay=r,n}return n.ZT(e,t),e.prototype._subscribe=function(t){this.subscriptionDelay.subscribe(new wt(t,this.source))},e}(yt.y),wt=function(t){function e(e,r){var n=t.call(this)||this;return n.parent=e,n.source=r,n.sourceSubscribed=!1,n}return n.ZT(e,t),e.prototype._next=function(t){this.subscribeToSource()},e.prototype._error=function(t){this.unsubscribe(),this.parent.error(t)},e.prototype._complete=function(){this.unsubscribe(),this.subscribeToSource()},e.prototype.subscribeToSource=function(){this.sourceSubscribed||(this.sourceSubscribed=!0,this.unsubscribe(),this.source.subscribe(this.parent))},e}(y.L);function xt(){return function(t){return t.lift(new At)}}var At=function(){function t(){}return t.prototype.call=function(t,e){return e.subscribe(new St(t))},t}(),St=function(t){function e(e){return t.call(this,e)||this}return n.ZT(e,t),e.prototype._next=function(t){t.observe(this.destination)},e}(y.L);function _t(t,e){return function(r){return r.lift(new Tt(t,e))}}var Tt=function(){function t(t,e){this.keySelector=t,this.flushes=e}return t.prototype.call=function(t,e){return e.subscribe(new Et(t,this.keySelector,this.flushes))},t}(),Et=function(t){function e(e,r,n){var i=t.call(this,e)||this;return i.keySelector=r,i.values=new Set,n&&i.add((0,o.D)(i,n)),i}return n.ZT(e,t),e.prototype.notifyNext=function(t,e,r,n,i){this.values.clear()},e.prototype.notifyError=function(t,e){this._error(t)},e.prototype._next=function(t){this.keySelector?this._useKeySelector(t):this._finalizeNext(t,t)},e.prototype._useKeySelector=function(t){var e,r=this.destination;try{e=this.keySelector(t)}catch(t){return void r.error(t)}this._finalizeNext(e,t)},e.prototype._finalizeNext=function(t,e){var r=this.values;r.has(t)||(r.add(t),this.destination.next(e))},e}(i.L);function Ot(t,e){return function(r){return r.lift(new jt(t,e))}}var jt=function(){function t(t,e){this.compare=t,this.keySelector=e}return t.prototype.call=function(t,e){return e.subscribe(new Pt(t,this.compare,this.keySelector))},t}(),Pt=function(t){function e(e,r,n){var i=t.call(this,e)||this;return i.keySelector=n,i.hasKey=!1,"function"==typeof r&&(i.compare=r),i}return n.ZT(e,t),e.prototype.compare=function(t,e){return t===e},e.prototype._next=function(t){var e;try{var r=this.keySelector;e=r?r(t):t}catch(t){return this.destination.error(t)}var n=!1;if(this.hasKey)try{n=(0,this.compare)(this.key,e)}catch(t){return this.destination.error(t)}else this.hasKey=!0;n||(this.key=e,this.destination.next(t))},e}(y.L);function It(t,e){return Ot((function(r,n){return e?e(r[t],n[t]):r[t]===n[t]}))}var Nt=r(9050),kt=r(8825),Dt=r(8413);function Ct(t){return void 0===t&&(t=Rt),function(e){return e.lift(new Lt(t))}}var Lt=function(){function t(t){this.errorFactory=t}return t.prototype.call=function(t,e){return e.subscribe(new Mt(t,this.errorFactory))},t}(),Mt=function(t){function e(e,r){var n=t.call(this,e)||this;return n.errorFactory=r,n.hasValue=!1,n}return n.ZT(e,t),e.prototype._next=function(t){this.hasValue=!0,this.destination.next(t)},e.prototype._complete=function(){if(this.hasValue)return this.destination.complete();var t=void 0;try{t=this.errorFactory()}catch(e){t=e}this.destination.error(t)},e}(y.L);function Rt(){return new Dt.K}var Vt=r(6595);function Ft(t){return function(e){return 0===t?(0,Vt.c)():e.lift(new Ut(t))}}var Ut=function(){function t(t){if(this.total=t,this.total<0)throw new Nt.W}return t.prototype.call=function(t,e){return e.subscribe(new Zt(t,this.total))},t}(),Zt=function(t){function e(e,r){var n=t.call(this,e)||this;return n.total=r,n.count=0,n}return n.ZT(e,t),e.prototype._next=function(t){var e=this.total,r=++this.count;r<=e&&(this.destination.next(t),r===e&&(this.destination.complete(),this.unsubscribe()))},e}(y.L);function zt(t,e){if(t<0)throw new Nt.W;var r=arguments.length>=2;return function(n){return n.pipe((0,kt.h)((function(e,r){return r===t})),Ft(1),r?st(e):Ct((function(){return new Nt.W})))}}var Bt=r(4065);function Wt(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return function(e){return(0,W.z)(e,Bt.of.apply(void 0,t))}}function Yt(t,e){return function(r){return r.lift(new qt(t,e,r))}}var qt=function(){function t(t,e,r){this.predicate=t,this.thisArg=e,this.source=r}return t.prototype.call=function(t,e){return e.subscribe(new Kt(t,this.predicate,this.thisArg,this.source))},t}(),Kt=function(t){function e(e,r,n,i){var o=t.call(this,e)||this;return o.predicate=r,o.thisArg=n,o.source=i,o.index=0,o.thisArg=n||o,o}return n.ZT(e,t),e.prototype.notifyComplete=function(t){this.destination.next(t),this.destination.complete()},e.prototype._next=function(t){var e=!1;try{e=this.predicate.call(this.thisArg,t,this.index++,this.source)}catch(t){return void this.destination.error(t)}e||this.notifyComplete(!1)},e.prototype._complete=function(){this.notifyComplete(!0)},e}(y.L);function Xt(){return function(t){return t.lift(new $t)}}var $t=function(){function t(){}return t.prototype.call=function(t,e){return e.subscribe(new Ht(t))},t}(),Ht=function(t){function e(e){var r=t.call(this,e)||this;return r.hasCompleted=!1,r.hasSubscription=!1,r}return n.ZT(e,t),e.prototype._next=function(t){this.hasSubscription||(this.hasSubscription=!0,this.add((0,o.D)(this,t)))},e.prototype._complete=function(){this.hasCompleted=!0,this.hasSubscription||this.destination.complete()},e.prototype.notifyComplete=function(t){this.remove(t),this.hasSubscription=!1,this.hasCompleted&&this.destination.complete()},e}(i.L),Gt=r(5934);function Qt(t,e){return e?function(r){return r.pipe(Qt((function(r,n){return(0,z.D)(t(r,n)).pipe((0,Gt.U)((function(t,i){return e(r,t,n,i)})))})))}:function(e){return e.lift(new Jt(t))}}var Jt=function(){function t(t){this.project=t}return t.prototype.call=function(t,e){return e.subscribe(new te(t,this.project))},t}(),te=function(t){function e(e,r){var n=t.call(this,e)||this;return n.project=r,n.hasSubscription=!1,n.hasCompleted=!1,n.index=0,n}return n.ZT(e,t),e.prototype._next=function(t){this.hasSubscription||this.tryNext(t)},e.prototype.tryNext=function(t){var e,r=this.index++;try{e=this.project(t,r)}catch(t){return void this.destination.error(t)}this.hasSubscription=!0,this._innerSub(e,t,r)},e.prototype._innerSub=function(t,e,r){var n=new L.d(this,e,r),i=this.destination;i.add(n);var s=(0,o.D)(this,t,void 0,void 0,n);s!==n&&i.add(s)},e.prototype._complete=function(){this.hasCompleted=!0,this.hasSubscription||this.destination.complete(),this.unsubscribe()},e.prototype.notifyNext=function(t,e,r,n,i){this.destination.next(e)},e.prototype.notifyError=function(t){this.destination.error(t)},e.prototype.notifyComplete=function(t){this.destination.remove(t),this.hasSubscription=!1,this.hasCompleted&&this.destination.complete()},e}(i.L);function ee(t,e,r){return void 0===e&&(e=Number.POSITIVE_INFINITY),void 0===r&&(r=void 0),e=(e||0)<1?Number.POSITIVE_INFINITY:e,function(n){return n.lift(new re(t,e,r))}}var re=function(){function t(t,e,r){this.project=t,this.concurrent=e,this.scheduler=r}return t.prototype.call=function(t,e){return e.subscribe(new ne(t,this.project,this.concurrent,this.scheduler))},t}(),ne=function(t){function e(e,r,n,i){var o=t.call(this,e)||this;return o.project=r,o.concurrent=n,o.scheduler=i,o.index=0,o.active=0,o.hasCompleted=!1,n<Number.POSITIVE_INFINITY&&(o.buffer=[]),o}return n.ZT(e,t),e.dispatch=function(t){var e=t.subscriber,r=t.result,n=t.value,i=t.index;e.subscribeToProjection(r,n,i)},e.prototype._next=function(t){var r=this.destination;if(r.closed)this._complete();else{var n=this.index++;if(this.active<this.concurrent){r.next(t);try{var i=(0,this.project)(t,n);if(this.scheduler){var o={subscriber:this,result:i,value:t,index:n};this.destination.add(this.scheduler.schedule(e.dispatch,0,o))}else this.subscribeToProjection(i,t,n)}catch(t){r.error(t)}}else this.buffer.push(t)}},e.prototype.subscribeToProjection=function(t,e,r){this.active++,this.destination.add((0,o.D)(this,t,e,r))},e.prototype._complete=function(){this.hasCompleted=!0,this.hasCompleted&&0===this.active&&this.destination.complete(),this.unsubscribe()},e.prototype.notifyNext=function(t,e,r,n,i){this._next(e)},e.prototype.notifyComplete=function(t){var e=this.buffer;this.destination.remove(t),this.active--,e&&e.length>0&&this._next(e.shift()),this.hasCompleted&&0===this.active&&this.destination.complete()},e}(i.L);function ie(t){return function(e){return e.lift(new oe(t))}}var oe=function(){function t(t){this.callback=t}return t.prototype.call=function(t,e){return e.subscribe(new se(t,this.callback))},t}(),se=function(t){function e(e,r){var n=t.call(this,e)||this;return n.add(new j.w(r)),n}return n.ZT(e,t),e}(y.L);function ue(t,e){if("function"!=typeof t)throw new TypeError("predicate is not a function");return function(r){return r.lift(new ce(t,r,!1,e))}}var ce=function(){function t(t,e,r,n){this.predicate=t,this.source=e,this.yieldIndex=r,this.thisArg=n}return t.prototype.call=function(t,e){return e.subscribe(new ae(t,this.predicate,this.source,this.yieldIndex,this.thisArg))},t}(),ae=function(t){function e(e,r,n,i,o){var s=t.call(this,e)||this;return s.predicate=r,s.source=n,s.yieldIndex=i,s.thisArg=o,s.index=0,s}return n.ZT(e,t),e.prototype.notifyComplete=function(t){var e=this.destination;e.next(t),e.complete(),this.unsubscribe()},e.prototype._next=function(t){var e=this.predicate,r=this.thisArg,n=this.index++;try{e.call(r||this,t,n,this.source)&&this.notifyComplete(this.yieldIndex?n:t)}catch(t){this.destination.error(t)}},e.prototype._complete=function(){this.notifyComplete(this.yieldIndex?-1:void 0)},e}(y.L);function le(t,e){return function(r){return r.lift(new ce(t,r,!0,e))}}var fe=r(7326);function he(t,e){var r=arguments.length>=2;return function(n){return n.pipe(t?(0,kt.h)((function(e,r){return t(e,r,n)})):fe.y,Ft(1),r?st(e):Ct((function(){return new Dt.K})))}}var pe=r(5510);function de(){return function(t){return t.lift(new ye)}}var ye=function(){function t(){}return t.prototype.call=function(t,e){return e.subscribe(new ve(t))},t}(),ve=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return n.ZT(e,t),e.prototype._next=function(t){},e}(y.L);function be(){return function(t){return t.lift(new ge)}}var ge=function(){function t(){}return t.prototype.call=function(t,e){return e.subscribe(new me(t))},t}(),me=function(t){function e(e){return t.call(this,e)||this}return n.ZT(e,t),e.prototype.notifyComplete=function(t){var e=this.destination;e.next(t),e.complete()},e.prototype._next=function(t){this.notifyComplete(!1)},e.prototype._complete=function(){this.notifyComplete(!0)},e}(y.L);function we(t){return function(e){return 0===t?(0,Vt.c)():e.lift(new xe(t))}}var xe=function(){function t(t){if(this.total=t,this.total<0)throw new Nt.W}return t.prototype.call=function(t,e){return e.subscribe(new Ae(t,this.total))},t}(),Ae=function(t){function e(e,r){var n=t.call(this,e)||this;return n.total=r,n.ring=new Array,n.count=0,n}return n.ZT(e,t),e.prototype._next=function(t){var e=this.ring,r=this.total,n=this.count++;e.length<r?e.push(t):e[n%r]=t},e.prototype._complete=function(){var t=this.destination,e=this.count;if(e>0)for(var r=this.count>=this.total?this.total:this.count,n=this.ring,i=0;i<r;i++){var o=e++%r;t.next(n[o])}t.complete()},e}(y.L);function Se(t,e){var r=arguments.length>=2;return function(n){return n.pipe(t?(0,kt.h)((function(e,r){return t(e,r,n)})):fe.y,we(1),r?st(e):Ct((function(){return new Dt.K})))}}function _e(t){return function(e){return e.lift(new Te(t))}}var Te=function(){function t(t){this.value=t}return t.prototype.call=function(t,e){return e.subscribe(new Ee(t,this.value))},t}(),Ee=function(t){function e(e,r){var n=t.call(this,e)||this;return n.value=r,n}return n.ZT(e,t),e.prototype._next=function(t){this.destination.next(this.value)},e}(y.L);function Oe(){return function(t){return t.lift(new je)}}var je=function(){function t(){}return t.prototype.call=function(t,e){return e.subscribe(new Pe(t))},t}(),Pe=function(t){function e(e){return t.call(this,e)||this}return n.ZT(e,t),e.prototype._next=function(t){this.destination.next(lt.P.createNext(t))},e.prototype._error=function(t){var e=this.destination;e.next(lt.P.createError(t)),e.complete()},e.prototype._complete=function(){var t=this.destination;t.next(lt.P.createComplete()),t.complete()},e}(y.L);function Ie(t,e){var r=!1;return arguments.length>=2&&(r=!0),function(n){return n.lift(new Ne(t,e,r))}}var Ne=function(){function t(t,e,r){void 0===r&&(r=!1),this.accumulator=t,this.seed=e,this.hasSeed=r}return t.prototype.call=function(t,e){return e.subscribe(new ke(t,this.accumulator,this.seed,this.hasSeed))},t}(),ke=function(t){function e(e,r,n,i){var o=t.call(this,e)||this;return o.accumulator=r,o._seed=n,o.hasSeed=i,o.index=0,o}return n.ZT(e,t),Object.defineProperty(e.prototype,"seed",{get:function(){return this._seed},set:function(t){this.hasSeed=!0,this._seed=t},enumerable:!0,configurable:!0}),e.prototype._next=function(t){if(this.hasSeed)return this._tryNext(t);this.seed=t,this.destination.next(t)},e.prototype._tryNext=function(t){var e,r=this.index++;try{e=this.accumulator(this.seed,t,r)}catch(t){this.destination.error(t)}this.seed=e,this.destination.next(e)},e}(y.L),De=r(986);function Ce(t,e){return arguments.length>=2?function(r){return(0,De.z)(Ie(t,e),we(1),st(e))(r)}:function(e){return(0,De.z)(Ie((function(e,r,n){return t(e,r,n+1)})),we(1))(e)}}function Le(t){return Ce("function"==typeof t?function(e,r){return t(e,r)>0?e:r}:function(t,e){return t>e?t:e})}var Me=r(9775);function Re(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return function(e){return e.lift.call(Me.T.apply(void 0,[e].concat(t)))}}var Ve=r(8377);function Fe(t,e,r){return void 0===r&&(r=Number.POSITIVE_INFINITY),"function"==typeof e?(0,K.zg)((function(){return t}),e,r):("number"==typeof e&&(r=e),(0,K.zg)((function(){return t}),r))}function Ue(t,e,r){return void 0===r&&(r=Number.POSITIVE_INFINITY),function(n){return n.lift(new Ze(t,e,r))}}var Ze=function(){function t(t,e,r){this.accumulator=t,this.seed=e,this.concurrent=r}return t.prototype.call=function(t,e){return e.subscribe(new ze(t,this.accumulator,this.seed,this.concurrent))},t}(),ze=function(t){function e(e,r,n,i){var o=t.call(this,e)||this;return o.accumulator=r,o.acc=n,o.concurrent=i,o.hasValue=!1,o.hasCompleted=!1,o.buffer=[],o.active=0,o.index=0,o}return n.ZT(e,t),e.prototype._next=function(t){if(this.active<this.concurrent){var e=this.index++,r=this.destination,n=void 0;try{n=(0,this.accumulator)(this.acc,t,e)}catch(t){return r.error(t)}this.active++,this._innerSub(n,t,e)}else this.buffer.push(t)},e.prototype._innerSub=function(t,e,r){var n=new L.d(this,e,r),i=this.destination;i.add(n);var s=(0,o.D)(this,t,void 0,void 0,n);s!==n&&i.add(s)},e.prototype._complete=function(){this.hasCompleted=!0,0===this.active&&0===this.buffer.length&&(!1===this.hasValue&&this.destination.next(this.acc),this.destination.complete()),this.unsubscribe()},e.prototype.notifyNext=function(t,e,r,n,i){var o=this.destination;this.acc=e,this.hasValue=!0,o.next(e)},e.prototype.notifyComplete=function(t){var e=this.buffer;this.destination.remove(t),this.active--,e.length>0?this._next(e.shift()):0===this.active&&this.hasCompleted&&(!1===this.hasValue&&this.destination.next(this.acc),this.destination.complete())},e}(i.L);function Be(t){return Ce("function"==typeof t?function(e,r){return t(e,r)<0?e:r}:function(t,e){return t<e?t:e})}var We=r(8490);function Ye(t,e){return function(r){var n;if(n="function"==typeof t?t:function(){return t},"function"==typeof e)return r.lift(new qe(n,e));var i=Object.create(r,We.N);return i.source=r,i.subjectFactory=n,i}}var qe=function(){function t(t,e){this.subjectFactory=t,this.selector=e}return t.prototype.call=function(t,e){var r=this.selector,n=this.subjectFactory(),i=r(n).subscribe(t);return i.add(e.subscribe(n)),i},t}(),Ke=r(3272);function Xe(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return 1===t.length&&(0,Z.k)(t[0])&&(t=t[0]),function(e){return e.lift(new $e(t))}}var $e=function(){function t(t){this.nextSources=t}return t.prototype.call=function(t,e){return e.subscribe(new He(t,this.nextSources))},t}(),He=function(t){function e(e,r){var n=t.call(this,e)||this;return n.destination=e,n.nextSources=r,n}return n.ZT(e,t),e.prototype.notifyError=function(t,e){this.subscribeToNextSource()},e.prototype.notifyComplete=function(t){this.subscribeToNextSource()},e.prototype._error=function(t){this.subscribeToNextSource(),this.unsubscribe()},e.prototype._complete=function(){this.subscribeToNextSource(),this.unsubscribe()},e.prototype.subscribeToNextSource=function(){var t=this.nextSources.shift();if(t){var e=new L.d(this,void 0,void 0),r=this.destination;r.add(e);var n=(0,o.D)(this,t,void 0,void 0,e);n!==e&&r.add(n)}else this.destination.complete()},e}(i.L);function Ge(){return function(t){return t.lift(new Qe)}}var Qe=function(){function t(){}return t.prototype.call=function(t,e){return e.subscribe(new Je(t))},t}(),Je=function(t){function e(e){var r=t.call(this,e)||this;return r.hasPrev=!1,r}return n.ZT(e,t),e.prototype._next=function(t){var e;this.hasPrev?e=[this.prev,t]:this.hasPrev=!0,this.prev=t,e&&this.destination.next(e)},e}(y.L),tr=r(2584);function er(t,e){return function(r){return[(0,kt.h)(t,e)(r),(0,kt.h)((0,tr.f)(t,e))(r)]}}function rr(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var r=t.length;if(0===r)throw new Error("list of properties cannot be empty.");return function(e){return(0,Gt.U)(nr(t,r))(e)}}function nr(t,e){return function(r){for(var n=r,i=0;i<e;i++){var o=n[t[i]];if(void 0===o)return;n=o}return n}}var ir=r(168);function or(t){return t?Ye((function(){return new ir.xQ}),t):Ye(new ir.xQ)}var sr=r(7749);function ur(t){return function(e){return Ye(new sr.X(t))(e)}}var cr=r(3790);function ar(){return function(t){return Ye(new cr.c)(t)}}var lr=r(2442);function fr(t,e,r,n){r&&"function"!=typeof r&&(n=r);var i="function"==typeof r?r:void 0,o=new lr.t(t,e,n);return function(t){return Ye((function(){return o}),i)(t)}}var hr=r(2294);function pr(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return function(e){return 1===t.length&&(0,Z.k)(t[0])&&(t=t[0]),e.lift.call(hr.S3.apply(void 0,[e].concat(t)))}}function dr(t){return void 0===t&&(t=-1),function(e){return 0===t?(0,Vt.c)():t<0?e.lift(new yr(-1,e)):e.lift(new yr(t-1,e))}}var yr=function(){function t(t,e){this.count=t,this.source=e}return t.prototype.call=function(t,e){return e.subscribe(new vr(t,this.count,this.source))},t}(),vr=function(t){function e(e,r,n){var i=t.call(this,e)||this;return i.count=r,i.source=n,i}return n.ZT(e,t),e.prototype.complete=function(){if(!this.isStopped){var e=this.source,r=this.count;if(0===r)return t.prototype.complete.call(this);r>-1&&(this.count=r-1),e.subscribe(this._unsubscribeAndRecycle())}},e}(y.L);function br(t){return function(e){return e.lift(new gr(t))}}var gr=function(){function t(t){this.notifier=t}return t.prototype.call=function(t,e){return e.subscribe(new mr(t,this.notifier,e))},t}(),mr=function(t){function e(e,r,n){var i=t.call(this,e)||this;return i.notifier=r,i.source=n,i.sourceIsBeingSubscribedTo=!0,i}return n.ZT(e,t),e.prototype.notifyNext=function(t,e,r,n,i){this.sourceIsBeingSubscribedTo=!0,this.source.subscribe(this)},e.prototype.notifyComplete=function(e){if(!1===this.sourceIsBeingSubscribedTo)return t.prototype.complete.call(this)},e.prototype.complete=function(){if(this.sourceIsBeingSubscribedTo=!1,!this.isStopped){if(this.retries||this.subscribeToRetries(),!this.retriesSubscription||this.retriesSubscription.closed)return t.prototype.complete.call(this);this._unsubscribeAndRecycle(),this.notifications.next()}},e.prototype._unsubscribe=function(){var t=this.notifications,e=this.retriesSubscription;t&&(t.unsubscribe(),this.notifications=null),e&&(e.unsubscribe(),this.retriesSubscription=null),this.retries=null},e.prototype._unsubscribeAndRecycle=function(){var e=this._unsubscribe;return this._unsubscribe=null,t.prototype._unsubscribeAndRecycle.call(this),this._unsubscribe=e,this},e.prototype.subscribeToRetries=function(){var e;this.notifications=new ir.xQ;try{e=(0,this.notifier)(this.notifications)}catch(e){return t.prototype.complete.call(this)}this.retries=e,this.retriesSubscription=(0,o.D)(this,e)},e}(i.L);function wr(t){return void 0===t&&(t=-1),function(e){return e.lift(new xr(t,e))}}var xr=function(){function t(t,e){this.count=t,this.source=e}return t.prototype.call=function(t,e){return e.subscribe(new Ar(t,this.count,this.source))},t}(),Ar=function(t){function e(e,r,n){var i=t.call(this,e)||this;return i.count=r,i.source=n,i}return n.ZT(e,t),e.prototype.error=function(e){if(!this.isStopped){var r=this.source,n=this.count;if(0===n)return t.prototype.error.call(this,e);n>-1&&(this.count=n-1),r.subscribe(this._unsubscribeAndRecycle())}},e}(y.L);function Sr(t){return function(e){return e.lift(new _r(t,e))}}var _r=function(){function t(t,e){this.notifier=t,this.source=e}return t.prototype.call=function(t,e){return e.subscribe(new Tr(t,this.notifier,this.source))},t}(),Tr=function(t){function e(e,r,n){var i=t.call(this,e)||this;return i.notifier=r,i.source=n,i}return n.ZT(e,t),e.prototype.error=function(e){if(!this.isStopped){var r=this.errors,n=this.retries,i=this.retriesSubscription;if(n)this.errors=null,this.retriesSubscription=null;else{r=new ir.xQ;try{n=(0,this.notifier)(r)}catch(e){return t.prototype.error.call(this,e)}i=(0,o.D)(this,n)}this._unsubscribeAndRecycle(),this.errors=r,this.retries=n,this.retriesSubscription=i,r.next(e)}},e.prototype._unsubscribe=function(){var t=this.errors,e=this.retriesSubscription;t&&(t.unsubscribe(),this.errors=null),e&&(e.unsubscribe(),this.retriesSubscription=null),this.retries=null},e.prototype.notifyNext=function(t,e,r,n,i){var o=this._unsubscribe;this._unsubscribe=null,this._unsubscribeAndRecycle(),this._unsubscribe=o,this.source.subscribe(this)},e}(i.L),Er=r(812);function Or(t){return function(e){return e.lift(new jr(t))}}var jr=function(){function t(t){this.notifier=t}return t.prototype.call=function(t,e){var r=new Pr(t),n=e.subscribe(r);return n.add((0,o.D)(r,this.notifier)),n},t}(),Pr=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.hasValue=!1,e}return n.ZT(e,t),e.prototype._next=function(t){this.value=t,this.hasValue=!0},e.prototype.notifyNext=function(t,e,r,n,i){this.emitValue()},e.prototype.notifyComplete=function(){this.emitValue()},e.prototype.emitValue=function(){this.hasValue&&(this.hasValue=!1,this.destination.next(this.value))},e}(i.L);function Ir(t,e){return void 0===e&&(e=a.P),function(r){return r.lift(new Nr(t,e))}}var Nr=function(){function t(t,e){this.period=t,this.scheduler=e}return t.prototype.call=function(t,e){return e.subscribe(new kr(t,this.period,this.scheduler))},t}(),kr=function(t){function e(e,r,n){var i=t.call(this,e)||this;return i.period=r,i.scheduler=n,i.hasValue=!1,i.add(n.schedule(Dr,r,{subscriber:i,period:r})),i}return n.ZT(e,t),e.prototype._next=function(t){this.lastValue=t,this.hasValue=!0},e.prototype.notifyNext=function(){this.hasValue&&(this.hasValue=!1,this.destination.next(this.lastValue))},e}(y.L);function Dr(t){var e=t.subscriber,r=t.period;e.notifyNext(),this.schedule(t,r)}function Cr(t,e){return function(r){return r.lift(new Lr(t,e))}}var Lr=function(){function t(t,e){this.compareTo=t,this.comparator=e}return t.prototype.call=function(t,e){return e.subscribe(new Mr(t,this.compareTo,this.comparator))},t}(),Mr=function(t){function e(e,r,n){var i=t.call(this,e)||this;return i.compareTo=r,i.comparator=n,i._a=[],i._b=[],i._oneComplete=!1,i.destination.add(r.subscribe(new Rr(e,i))),i}return n.ZT(e,t),e.prototype._next=function(t){this._oneComplete&&0===this._b.length?this.emit(!1):(this._a.push(t),this.checkValues())},e.prototype._complete=function(){this._oneComplete?this.emit(0===this._a.length&&0===this._b.length):this._oneComplete=!0,this.unsubscribe()},e.prototype.checkValues=function(){for(var t=this,e=t._a,r=t._b,n=t.comparator;e.length>0&&r.length>0;){var i=e.shift(),o=r.shift(),s=!1;try{s=n?n(i,o):i===o}catch(t){this.destination.error(t)}s||this.emit(!1)}},e.prototype.emit=function(t){var e=this.destination;e.next(t),e.complete()},e.prototype.nextB=function(t){this._oneComplete&&0===this._a.length?this.emit(!1):(this._b.push(t),this.checkValues())},e.prototype.completeB=function(){this._oneComplete?this.emit(0===this._a.length&&0===this._b.length):this._oneComplete=!0},e}(y.L),Rr=function(t){function e(e,r){var n=t.call(this,e)||this;return n.parent=r,n}return n.ZT(e,t),e.prototype._next=function(t){this.parent.nextB(t)},e.prototype._error=function(t){this.parent.error(t),this.unsubscribe()},e.prototype._complete=function(){this.parent.completeB(),this.unsubscribe()},e}(y.L);function Vr(){return new ir.xQ}function Fr(){return function(t){return(0,Er.x)()(Ye(Vr)(t))}}function Ur(t,e,r){var n;return n=t&&"object"==typeof t?t:{bufferSize:t,windowTime:e,refCount:!1,scheduler:r},function(t){return t.lift(function(t){var e,r,n=t.bufferSize,i=void 0===n?Number.POSITIVE_INFINITY:n,o=t.windowTime,s=void 0===o?Number.POSITIVE_INFINITY:o,u=t.refCount,c=t.scheduler,a=0,l=!1,f=!1;return function(t){a++,e&&!l||(l=!1,e=new lr.t(i,s,c),r=t.subscribe({next:function(t){e.next(t)},error:function(t){l=!0,e.error(t)},complete:function(){f=!0,r=void 0,e.complete()}}));var n=e.subscribe(this);this.add((function(){a--,n.unsubscribe(),r&&!f&&u&&0===a&&(r.unsubscribe(),r=void 0,e=void 0)}))}}(n))}}function Zr(t){return function(e){return e.lift(new zr(t,e))}}var zr=function(){function t(t,e){this.predicate=t,this.source=e}return t.prototype.call=function(t,e){return e.subscribe(new Br(t,this.predicate,this.source))},t}(),Br=function(t){function e(e,r,n){var i=t.call(this,e)||this;return i.predicate=r,i.source=n,i.seenValue=!1,i.index=0,i}return n.ZT(e,t),e.prototype.applySingleValue=function(t){this.seenValue?this.destination.error("Sequence contains more than one element"):(this.seenValue=!0,this.singleValue=t)},e.prototype._next=function(t){var e=this.index++;this.predicate?this.tryNext(t,e):this.applySingleValue(t)},e.prototype.tryNext=function(t,e){try{this.predicate(t,e,this.source)&&this.applySingleValue(t)}catch(t){this.destination.error(t)}},e.prototype._complete=function(){var t=this.destination;this.index>0?(t.next(this.seenValue?this.singleValue:void 0),t.complete()):t.error(new Dt.K)},e}(y.L);function Wr(t){return function(e){return e.lift(new Yr(t))}}var Yr=function(){function t(t){this.total=t}return t.prototype.call=function(t,e){return e.subscribe(new qr(t,this.total))},t}(),qr=function(t){function e(e,r){var n=t.call(this,e)||this;return n.total=r,n.count=0,n}return n.ZT(e,t),e.prototype._next=function(t){++this.count>this.total&&this.destination.next(t)},e}(y.L);function Kr(t){return function(e){return e.lift(new Xr(t))}}var Xr=function(){function t(t){if(this._skipCount=t,this._skipCount<0)throw new Nt.W}return t.prototype.call=function(t,e){return 0===this._skipCount?e.subscribe(new y.L(t)):e.subscribe(new $r(t,this._skipCount))},t}(),$r=function(t){function e(e,r){var n=t.call(this,e)||this;return n._skipCount=r,n._count=0,n._ring=new Array(r),n}return n.ZT(e,t),e.prototype._next=function(t){var e=this._skipCount,r=this._count++;if(r<e)this._ring[r]=t;else{var n=r%e,i=this._ring,o=i[n];i[n]=t,this.destination.next(o)}},e}(y.L);function Hr(t){return function(e){return e.lift(new Gr(t))}}var Gr=function(){function t(t){this.notifier=t}return t.prototype.call=function(t,e){return e.subscribe(new Qr(t,this.notifier))},t}(),Qr=function(t){function e(e,r){var n=t.call(this,e)||this;n.hasValue=!1;var i=new L.d(n,void 0,void 0);n.add(i),n.innerSubscription=i;var s=(0,o.D)(n,r,void 0,void 0,i);return s!==i&&(n.add(s),n.innerSubscription=s),n}return n.ZT(e,t),e.prototype._next=function(e){this.hasValue&&t.prototype._next.call(this,e)},e.prototype.notifyNext=function(t,e,r,n,i){this.hasValue=!0,this.innerSubscription&&this.innerSubscription.unsubscribe()},e.prototype.notifyComplete=function(){},e}(i.L);function Jr(t){return function(e){return e.lift(new tn(t))}}var tn=function(){function t(t){this.predicate=t}return t.prototype.call=function(t,e){return e.subscribe(new en(t,this.predicate))},t}(),en=function(t){function e(e,r){var n=t.call(this,e)||this;return n.predicate=r,n.skipping=!0,n.index=0,n}return n.ZT(e,t),e.prototype._next=function(t){var e=this.destination;this.skipping&&this.tryCallPredicate(t),this.skipping||e.next(t)},e.prototype.tryCallPredicate=function(t){try{var e=this.predicate(t,this.index++);this.skipping=Boolean(e)}catch(t){this.destination.error(t)}},e}(y.L);function rn(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var r=t[t.length-1];return(0,w.K)(r)?(t.pop(),function(e){return(0,W.z)(t,e,r)}):function(e){return(0,W.z)(t,e)}}var nn=r(7464);function on(t,e){return"function"==typeof e?function(r){return r.pipe(on((function(r,n){return(0,z.D)(t(r,n)).pipe((0,Gt.U)((function(t,i){return e(r,t,n,i)})))})))}:function(e){return e.lift(new sn(t))}}var sn=function(){function t(t){this.project=t}return t.prototype.call=function(t,e){return e.subscribe(new un(t,this.project))},t}(),un=function(t){function e(e,r){var n=t.call(this,e)||this;return n.project=r,n.index=0,n}return n.ZT(e,t),e.prototype._next=function(t){var e,r=this.index++;try{e=this.project(t,r)}catch(t){return void this.destination.error(t)}this._innerSub(e,t,r)},e.prototype._innerSub=function(t,e,r){var n=this.innerSubscription;n&&n.unsubscribe();var i=new L.d(this,e,r),s=this.destination;s.add(i),this.innerSubscription=(0,o.D)(this,t,void 0,void 0,i),this.innerSubscription!==i&&s.add(this.innerSubscription)},e.prototype._complete=function(){var e=this.innerSubscription;e&&!e.closed||t.prototype._complete.call(this),this.unsubscribe()},e.prototype._unsubscribe=function(){this.innerSubscription=null},e.prototype.notifyComplete=function(e){this.destination.remove(e),this.innerSubscription=null,this.isStopped&&t.prototype._complete.call(this)},e.prototype.notifyNext=function(t,e,r,n,i){this.destination.next(e)},e}(i.L);function cn(){return on(fe.y)}function an(t,e){return e?on((function(){return t}),e):on((function(){return t}))}function ln(t){return function(e){return e.lift(new fn(t))}}var fn=function(){function t(t){this.notifier=t}return t.prototype.call=function(t,e){var r=new hn(t),n=(0,o.D)(r,this.notifier);return n&&!r.seenValue?(r.add(n),e.subscribe(r)):r},t}(),hn=function(t){function e(e){var r=t.call(this,e)||this;return r.seenValue=!1,r}return n.ZT(e,t),e.prototype.notifyNext=function(t,e,r,n,i){this.seenValue=!0,this.complete()},e.prototype.notifyComplete=function(){},e}(i.L);function pn(t,e){return void 0===e&&(e=!1),function(r){return r.lift(new dn(t,e))}}var dn=function(){function t(t,e){this.predicate=t,this.inclusive=e}return t.prototype.call=function(t,e){return e.subscribe(new yn(t,this.predicate,this.inclusive))},t}(),yn=function(t){function e(e,r,n){var i=t.call(this,e)||this;return i.predicate=r,i.inclusive=n,i.index=0,i}return n.ZT(e,t),e.prototype._next=function(t){var e,r=this.destination;try{e=this.predicate(t,this.index++)}catch(t){return void r.error(t)}this.nextOrComplete(t,e)},e.prototype.nextOrComplete=function(t,e){var r=this.destination;Boolean(e)?r.next(t):(this.inclusive&&r.next(t),r.complete())},e}(y.L),vn=r(1036),bn=r(9537);function gn(t,e,r){return function(n){return n.lift(new mn(t,e,r))}}var mn=function(){function t(t,e,r){this.nextOrObserver=t,this.error=e,this.complete=r}return t.prototype.call=function(t,e){return e.subscribe(new wn(t,this.nextOrObserver,this.error,this.complete))},t}(),wn=function(t){function e(e,r,n,i){var o=t.call(this,e)||this;return o._tapNext=vn.Z,o._tapError=vn.Z,o._tapComplete=vn.Z,o._tapError=n||vn.Z,o._tapComplete=i||vn.Z,(0,bn.m)(r)?(o._context=o,o._tapNext=r):r&&(o._context=r,o._tapNext=r.next||vn.Z,o._tapError=r.error||vn.Z,o._tapComplete=r.complete||vn.Z),o}return n.ZT(e,t),e.prototype._next=function(t){try{this._tapNext.call(this._context,t)}catch(t){return void this.destination.error(t)}this.destination.next(t)},e.prototype._error=function(t){try{this._tapError.call(this._context,t)}catch(t){return void this.destination.error(t)}this.destination.error(t)},e.prototype._complete=function(){try{this._tapComplete.call(this._context)}catch(t){return void this.destination.error(t)}return this.destination.complete()},e}(y.L),xn={leading:!0,trailing:!1};function An(t,e){return void 0===e&&(e=xn),function(r){return r.lift(new Sn(t,e.leading,e.trailing))}}var Sn=function(){function t(t,e,r){this.durationSelector=t,this.leading=e,this.trailing=r}return t.prototype.call=function(t,e){return e.subscribe(new _n(t,this.durationSelector,this.leading,this.trailing))},t}(),_n=function(t){function e(e,r,n,i){var o=t.call(this,e)||this;return o.destination=e,o.durationSelector=r,o._leading=n,o._trailing=i,o._hasValue=!1,o}return n.ZT(e,t),e.prototype._next=function(t){this._hasValue=!0,this._sendValue=t,this._throttled||(this._leading?this.send():this.throttle(t))},e.prototype.send=function(){var t=this._hasValue,e=this._sendValue;t&&(this.destination.next(e),this.throttle(e)),this._hasValue=!1,this._sendValue=null},e.prototype.throttle=function(t){var e=this.tryDurationSelector(t);e&&this.add(this._throttled=(0,o.D)(this,e))},e.prototype.tryDurationSelector=function(t){try{return this.durationSelector(t)}catch(t){return this.destination.error(t),null}},e.prototype.throttlingDone=function(){var t=this._throttled,e=this._trailing;t&&t.unsubscribe(),this._throttled=null,e&&this.send()},e.prototype.notifyNext=function(t,e,r,n,i){this.throttlingDone()},e.prototype.notifyComplete=function(){this.throttlingDone()},e}(i.L);function Tn(t,e,r){return void 0===e&&(e=a.P),void 0===r&&(r=xn),function(n){return n.lift(new En(t,e,r.leading,r.trailing))}}var En=function(){function t(t,e,r,n){this.duration=t,this.scheduler=e,this.leading=r,this.trailing=n}return t.prototype.call=function(t,e){return e.subscribe(new On(t,this.duration,this.scheduler,this.leading,this.trailing))},t}(),On=function(t){function e(e,r,n,i,o){var s=t.call(this,e)||this;return s.duration=r,s.scheduler=n,s.leading=i,s.trailing=o,s._hasTrailingValue=!1,s._trailingValue=null,s}return n.ZT(e,t),e.prototype._next=function(t){this.throttled?this.trailing&&(this._trailingValue=t,this._hasTrailingValue=!0):(this.add(this.throttled=this.scheduler.schedule(jn,this.duration,{subscriber:this})),this.leading?this.destination.next(t):this.trailing&&(this._trailingValue=t,this._hasTrailingValue=!0))},e.prototype._complete=function(){this._hasTrailingValue?(this.destination.next(this._trailingValue),this.destination.complete()):this.destination.complete()},e.prototype.clearThrottle=function(){var t=this.throttled;t&&(this.trailing&&this._hasTrailingValue&&(this.destination.next(this._trailingValue),this._trailingValue=null,this._hasTrailingValue=!1),t.unsubscribe(),this.remove(t),this.throttled=null)},e}(y.L);function jn(t){t.subscriber.clearThrottle()}var Pn=r(3495);function In(t){return void 0===t&&(t=a.P),function(e){return(0,Pn.P)((function(){return e.pipe(Ie((function(e,r){var n=e.current;return{value:r,current:t.now(),last:n}}),{current:t.now(),value:void 0,last:void 0}),(0,Gt.U)((function(t){var e=t.current,r=t.last,n=t.value;return new Nn(n,e-r)})))}))}}var Nn=function(){return function(t,e){this.value=t,this.interval=e}}(),kn=r(9163);function Dn(t,e,r){return void 0===r&&(r=a.P),function(n){var i=at(t),o=i?+t-r.now():Math.abs(t);return n.lift(new Cn(o,i,e,r))}}var Cn=function(){function t(t,e,r,n){this.waitFor=t,this.absoluteTimeout=e,this.withObservable=r,this.scheduler=n}return t.prototype.call=function(t,e){return e.subscribe(new Ln(t,this.absoluteTimeout,this.waitFor,this.withObservable,this.scheduler))},t}(),Ln=function(t){function e(e,r,n,i,o){var s=t.call(this,e)||this;return s.absoluteTimeout=r,s.waitFor=n,s.withObservable=i,s.scheduler=o,s.action=null,s.scheduleTimeout(),s}return n.ZT(e,t),e.dispatchTimeout=function(t){var e=t.withObservable;t._unsubscribeAndRecycle(),t.add((0,o.D)(t,e))},e.prototype.scheduleTimeout=function(){var t=this.action;t?this.action=t.schedule(this,this.waitFor):this.add(this.action=this.scheduler.schedule(e.dispatchTimeout,this.waitFor,this))},e.prototype._next=function(e){this.absoluteTimeout||this.scheduleTimeout(),t.prototype._next.call(this,e)},e.prototype._unsubscribe=function(){this.action=null,this.scheduler=null,this.withObservable=null},e}(i.L),Mn=r(4166);function Rn(t,e){return void 0===e&&(e=a.P),Dn(t,(0,Mn._)(new kn.W),e)}function Vn(t){return void 0===t&&(t=a.P),(0,Gt.U)((function(e){return new Fn(e,t.now())}))}var Fn=function(){return function(t,e){this.value=t,this.timestamp=e}}();function Un(t,e,r){return 0===r?[e]:(t.push(e),t)}function Zn(){return Ce(Un,[])}function zn(t){return function(e){return e.lift(new Bn(t))}}var Bn=function(){function t(t){this.windowBoundaries=t}return t.prototype.call=function(t,e){var r=new Wn(t),n=e.subscribe(r);return n.closed||r.add((0,o.D)(r,this.windowBoundaries)),n},t}(),Wn=function(t){function e(e){var r=t.call(this,e)||this;return r.window=new ir.xQ,e.next(r.window),r}return n.ZT(e,t),e.prototype.notifyNext=function(t,e,r,n,i){this.openWindow()},e.prototype.notifyError=function(t,e){this._error(t)},e.prototype.notifyComplete=function(t){this._complete()},e.prototype._next=function(t){this.window.next(t)},e.prototype._error=function(t){this.window.error(t),this.destination.error(t)},e.prototype._complete=function(){this.window.complete(),this.destination.complete()},e.prototype._unsubscribe=function(){this.window=null},e.prototype.openWindow=function(){var t=this.window;t&&t.complete();var e=this.destination,r=this.window=new ir.xQ;e.next(r)},e}(i.L);function Yn(t,e){return void 0===e&&(e=0),function(r){return r.lift(new qn(t,e))}}var qn=function(){function t(t,e){this.windowSize=t,this.startWindowEvery=e}return t.prototype.call=function(t,e){return e.subscribe(new Kn(t,this.windowSize,this.startWindowEvery))},t}(),Kn=function(t){function e(e,r,n){var i=t.call(this,e)||this;return i.destination=e,i.windowSize=r,i.startWindowEvery=n,i.windows=[new ir.xQ],i.count=0,e.next(i.windows[0]),i}return n.ZT(e,t),e.prototype._next=function(t){for(var e=this.startWindowEvery>0?this.startWindowEvery:this.windowSize,r=this.destination,n=this.windowSize,i=this.windows,o=i.length,s=0;s<o&&!this.closed;s++)i[s].next(t);var u=this.count-n+1;if(u>=0&&u%e==0&&!this.closed&&i.shift().complete(),++this.count%e==0&&!this.closed){var c=new ir.xQ;i.push(c),r.next(c)}},e.prototype._error=function(t){var e=this.windows;if(e)for(;e.length>0&&!this.closed;)e.shift().error(t);this.destination.error(t)},e.prototype._complete=function(){var t=this.windows;if(t)for(;t.length>0&&!this.closed;)t.shift().complete();this.destination.complete()},e.prototype._unsubscribe=function(){this.count=0,this.windows=null},e}(y.L),Xn=r(4667);function $n(t){var e=a.P,r=null,n=Number.POSITIVE_INFINITY;return(0,w.K)(arguments[3])&&(e=arguments[3]),(0,w.K)(arguments[2])?e=arguments[2]:(0,Xn.k)(arguments[2])&&(n=arguments[2]),(0,w.K)(arguments[1])?e=arguments[1]:(0,Xn.k)(arguments[1])&&(r=arguments[1]),function(i){return i.lift(new Hn(t,r,n,e))}}var Hn=function(){function t(t,e,r,n){this.windowTimeSpan=t,this.windowCreationInterval=e,this.maxWindowSize=r,this.scheduler=n}return t.prototype.call=function(t,e){return e.subscribe(new Qn(t,this.windowTimeSpan,this.windowCreationInterval,this.maxWindowSize,this.scheduler))},t}(),Gn=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e._numberOfNextedValues=0,e}return n.ZT(e,t),e.prototype.next=function(e){this._numberOfNextedValues++,t.prototype.next.call(this,e)},Object.defineProperty(e.prototype,"numberOfNextedValues",{get:function(){return this._numberOfNextedValues},enumerable:!0,configurable:!0}),e}(ir.xQ),Qn=function(t){function e(e,r,n,i,o){var s=t.call(this,e)||this;s.destination=e,s.windowTimeSpan=r,s.windowCreationInterval=n,s.maxWindowSize=i,s.scheduler=o,s.windows=[];var u=s.openWindow();if(null!==n&&n>=0){var c={subscriber:s,window:u,context:null},a={windowTimeSpan:r,windowCreationInterval:n,subscriber:s,scheduler:o};s.add(o.schedule(ei,r,c)),s.add(o.schedule(ti,n,a))}else{var l={subscriber:s,window:u,windowTimeSpan:r};s.add(o.schedule(Jn,r,l))}return s}return n.ZT(e,t),e.prototype._next=function(t){for(var e=this.windows,r=e.length,n=0;n<r;n++){var i=e[n];i.closed||(i.next(t),i.numberOfNextedValues>=this.maxWindowSize&&this.closeWindow(i))}},e.prototype._error=function(t){for(var e=this.windows;e.length>0;)e.shift().error(t);this.destination.error(t)},e.prototype._complete=function(){for(var t=this.windows;t.length>0;){var e=t.shift();e.closed||e.complete()}this.destination.complete()},e.prototype.openWindow=function(){var t=new Gn;return this.windows.push(t),this.destination.next(t),t},e.prototype.closeWindow=function(t){t.complete();var e=this.windows;e.splice(e.indexOf(t),1)},e}(y.L);function Jn(t){var e=t.subscriber,r=t.windowTimeSpan,n=t.window;n&&e.closeWindow(n),t.window=e.openWindow(),this.schedule(t,r)}function ti(t){var e=t.windowTimeSpan,r=t.subscriber,n=t.scheduler,i=t.windowCreationInterval,o=r.openWindow(),s=this,u={action:s,subscription:null},c={subscriber:r,window:o,context:u};u.subscription=n.schedule(ei,e,c),s.add(u.subscription),s.schedule(t,i)}function ei(t){var e=t.subscriber,r=t.window,n=t.context;n&&n.action&&n.subscription&&n.action.remove(n.subscription),e.closeWindow(r)}function ri(t,e){return function(r){return r.lift(new ni(t,e))}}var ni=function(){function t(t,e){this.openings=t,this.closingSelector=e}return t.prototype.call=function(t,e){return e.subscribe(new ii(t,this.openings,this.closingSelector))},t}(),ii=function(t){function e(e,r,n){var i=t.call(this,e)||this;return i.openings=r,i.closingSelector=n,i.contexts=[],i.add(i.openSubscription=(0,o.D)(i,r,r)),i}return n.ZT(e,t),e.prototype._next=function(t){var e=this.contexts;if(e)for(var r=e.length,n=0;n<r;n++)e[n].window.next(t)},e.prototype._error=function(e){var r=this.contexts;if(this.contexts=null,r)for(var n=r.length,i=-1;++i<n;){var o=r[i];o.window.error(e),o.subscription.unsubscribe()}t.prototype._error.call(this,e)},e.prototype._complete=function(){var e=this.contexts;if(this.contexts=null,e)for(var r=e.length,n=-1;++n<r;){var i=e[n];i.window.complete(),i.subscription.unsubscribe()}t.prototype._complete.call(this)},e.prototype._unsubscribe=function(){var t=this.contexts;if(this.contexts=null,t)for(var e=t.length,r=-1;++r<e;){var n=t[r];n.window.unsubscribe(),n.subscription.unsubscribe()}},e.prototype.notifyNext=function(t,e,r,n,i){if(t===this.openings){var s=void 0;try{s=(0,this.closingSelector)(e)}catch(t){return this.error(t)}var u=new ir.xQ,c=new j.w,a={window:u,subscription:c};this.contexts.push(a);var l=(0,o.D)(this,s,a);l.closed?this.closeWindow(this.contexts.length-1):(l.context=a,c.add(l)),this.destination.next(u)}else this.closeWindow(this.contexts.indexOf(t))},e.prototype.notifyError=function(t){this.error(t)},e.prototype.notifyComplete=function(t){t!==this.openSubscription&&this.closeWindow(this.contexts.indexOf(t.context))},e.prototype.closeWindow=function(t){if(-1!==t){var e=this.contexts,r=e[t],n=r.window,i=r.subscription;e.splice(t,1),n.complete(),i.unsubscribe()}},e}(i.L);function oi(t){return function(e){return e.lift(new si(t))}}var si=function(){function t(t){this.closingSelector=t}return t.prototype.call=function(t,e){return e.subscribe(new ui(t,this.closingSelector))},t}(),ui=function(t){function e(e,r){var n=t.call(this,e)||this;return n.destination=e,n.closingSelector=r,n.openWindow(),n}return n.ZT(e,t),e.prototype.notifyNext=function(t,e,r,n,i){this.openWindow(i)},e.prototype.notifyError=function(t,e){this._error(t)},e.prototype.notifyComplete=function(t){this.openWindow(t)},e.prototype._next=function(t){this.window.next(t)},e.prototype._error=function(t){this.window.error(t),this.destination.error(t),this.unsubscribeClosingNotification()},e.prototype._complete=function(){this.window.complete(),this.destination.complete(),this.unsubscribeClosingNotification()},e.prototype.unsubscribeClosingNotification=function(){this.closingNotification&&this.closingNotification.unsubscribe()},e.prototype.openWindow=function(t){void 0===t&&(t=null),t&&(this.remove(t),t.unsubscribe());var e=this.window;e&&e.complete();var r,n=this.window=new ir.xQ;this.destination.next(n);try{r=(0,this.closingSelector)()}catch(t){return this.destination.error(t),void this.window.error(t)}this.add(this.closingNotification=(0,o.D)(this,r))},e}(i.L);function ci(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return function(e){var r;"function"==typeof t[t.length-1]&&(r=t.pop());var n=t;return e.lift(new ai(n,r))}}var ai=function(){function t(t,e){this.observables=t,this.project=e}return t.prototype.call=function(t,e){return e.subscribe(new li(t,this.observables,this.project))},t}(),li=function(t){function e(e,r,n){var i=t.call(this,e)||this;i.observables=r,i.project=n,i.toRespond=[];var s=r.length;i.values=new Array(s);for(var u=0;u<s;u++)i.toRespond.push(u);for(u=0;u<s;u++){var c=r[u];i.add((0,o.D)(i,c,c,u))}return i}return n.ZT(e,t),e.prototype.notifyNext=function(t,e,r,n,i){this.values[r]=e;var o=this.toRespond;if(o.length>0){var s=o.indexOf(r);-1!==s&&o.splice(s,1)}},e.prototype.notifyComplete=function(){},e.prototype._next=function(t){if(0===this.toRespond.length){var e=[t].concat(this.values);this.project?this._tryProject(e):this.destination.next(e)}},e.prototype._tryProject=function(t){var e;try{e=this.project.apply(this,t)}catch(t){return void this.destination.error(t)}this.destination.next(e)},e}(i.L),fi=r(5476);function hi(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return function(e){return e.lift.call(fi.$R.apply(void 0,[e].concat(t)))}}function pi(t){return function(e){return e.lift(new fi.mx(t))}}},4425:(t,e,r)=>{"use strict";r.d(e,{ZT:()=>i});var n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)};function i(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}},8908:(t,e,r)=>{var n;n="undefined"!=typeof window?window:void 0!==r.g?r.g:"undefined"!=typeof self?self:{},t.exports=n},5089:t=>{var e=9007199254740991,r=/^(?:0|[1-9]\d*)$/;function n(t,e,r){switch(r.length){case 0:return t.call(e);case 1:return t.call(e,r[0]);case 2:return t.call(e,r[0],r[1]);case 3:return t.call(e,r[0],r[1],r[2])}return t.apply(e,r)}var i=Object.prototype,o=i.hasOwnProperty,s=i.toString,u=i.propertyIsEnumerable,c=Math.max;function a(t,e,r){var n=t[e];o.call(t,e)&&f(n,r)&&(void 0!==r||e in t)||(t[e]=r)}function l(t,n){return!!(n=null==n?e:n)&&("number"==typeof t||r.test(t))&&t>-1&&t%1==0&&t<n}function f(t,e){return t===e||t!=t&&e!=e}var h=Array.isArray;function p(t){return null!=t&&function(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=e}(t.length)&&!function(t){var e=d(t)?s.call(t):"";return"[object Function]"==e||"[object GeneratorFunction]"==e}(t)}function d(t){var e=typeof t;return!!t&&("object"==e||"function"==e)}var y,v,b,g=(y=function(t,e){!function(t,e,r,n){r||(r={});for(var i=-1,o=e.length;++i<o;){var s=e[i];a(r,s,t[s])}}(e,function(t){return p(t)?function(t,e){var r=h(t)||function(t){return function(t){return function(t){return!!t&&"object"==typeof t}(t)&&p(t)}(t)&&o.call(t,"callee")&&(!u.call(t,"callee")||"[object Arguments]"==s.call(t))}(t)?function(t,e){for(var r=-1,n=Array(t);++r<t;)n[r]=e(r);return n}(t.length,String):[],n=r.length,i=!!n;for(var c in t)!e&&!o.call(t,c)||i&&("length"==c||l(c,n))||r.push(c);return r}(t,!0):function(t){if(!d(t))return function(t){var e=[];if(null!=t)for(var r in Object(t))e.push(r);return e}(t);var e,r,n=(r=(e=t)&&e.constructor,e===("function"==typeof r&&r.prototype||i)),s=[];for(var u in t)("constructor"!=u||!n&&o.call(t,u))&&s.push(u);return s}(t)}(e),t)},v=function(t,e){var r=-1,n=e.length,i=n>1?e[n-1]:void 0,o=n>2?e[2]:void 0;for(i=y.length>3&&"function"==typeof i?(n--,i):void 0,o&&function(t,e,r){if(!d(r))return!1;var n=typeof e;return!!("number"==n?p(r)&&l(e,r.length):"string"==n&&e in r)&&f(r[e],t)}(e[0],e[1],o)&&(i=n<3?void 0:i,n=1),t=Object(t);++r<n;){var s=e[r];s&&y(t,s)}return t},b=c(void 0===b?v.length-1:b,0),function(){for(var t=arguments,e=-1,r=c(t.length-b,0),i=Array(r);++e<r;)i[e]=t[b+e];e=-1;for(var o=Array(b+1);++e<b;)o[e]=t[e];return o[b]=i,n(v,this,o)});t.exports=g},202:(t,e,r)=>{"use strict";var n=r(3700),i=/[\/\?<>\\:\*\|"]/g,o=/[\x00-\x1f\x80-\x9f]/g,s=/^\.+$/,u=/^(con|prn|aux|nul|com[0-9]|lpt[0-9])(\..*)?$/i,c=/[\. ]+$/;function a(t,e){if("string"!=typeof t)throw new Error("Input must be string");var r=t.replace(i,e).replace(o,e).replace(s,e).replace(u,e).replace(c,e);return n(r,255)}t.exports=function(t,e){var r=e&&e.replacement||"",n=a(t,r);return""===r?n:a(n,"")}},3700:(t,e,r)=>{"use strict";var n=r(1156),i=r(793);t.exports=n.bind(null,i)},1156:t=>{"use strict";function e(t){return t>=55296&&t<=56319}function r(t){return t>=56320&&t<=57343}t.exports=function(t,n,i){if("string"!=typeof n)throw new Error("Input must be string");for(var o,s,u=n.length,c=0,a=0;a<u;a+=1){if(o=n.charCodeAt(a),s=n[a],e(o)&&r(n.charCodeAt(a+1))&&(s+=n[a+=1]),(c+=t(s))===i)return n.slice(0,a+1);if(c>i)return n.slice(0,a-s.length+1)}return n}},9945:function(t){var e,r,n,i,o;e=/^((?:[a-zA-Z0-9+\-.]+:)?)(\/\/[^\/?#]*)?((?:[^\/\?#]*\/)*.*?)??(;.*?)?(\?.*?)?(#.*?)?$/,r=/^([^\/?#]*)(.*)$/,n=/(?:\/|^)\.(?=\/)/g,i=/(?:\/|^)\.\.\/(?!\.\.\/).*?(?=\/)/g,o={buildAbsoluteURL:function(t,e,n){if(n=n||{},t=t.trim(),!(e=e.trim())){if(!n.alwaysNormalize)return t;var i=o.parseURL(t);if(!i)throw new Error("Error trying to parse base URL.");return i.path=o.normalizePath(i.path),o.buildURLFromParts(i)}var s=o.parseURL(e);if(!s)throw new Error("Error trying to parse relative URL.");if(s.scheme)return n.alwaysNormalize?(s.path=o.normalizePath(s.path),o.buildURLFromParts(s)):e;var u=o.parseURL(t);if(!u)throw new Error("Error trying to parse base URL.");if(!u.netLoc&&u.path&&"/"!==u.path[0]){var c=r.exec(u.path);u.netLoc=c[1],u.path=c[2]}u.netLoc&&!u.path&&(u.path="/");var a={scheme:u.scheme,netLoc:s.netLoc,path:null,params:s.params,query:s.query,fragment:s.fragment};if(!s.netLoc&&(a.netLoc=u.netLoc,"/"!==s.path[0]))if(s.path){var l=u.path,f=l.substring(0,l.lastIndexOf("/")+1)+s.path;a.path=o.normalizePath(f)}else a.path=u.path,s.params||(a.params=u.params,s.query||(a.query=u.query));return null===a.path&&(a.path=n.alwaysNormalize?o.normalizePath(s.path):s.path),o.buildURLFromParts(a)},parseURL:function(t){var r=e.exec(t);return r?{scheme:r[1]||"",netLoc:r[2]||"",path:r[3]||"",params:r[4]||"",query:r[5]||"",fragment:r[6]||""}:null},normalizePath:function(t){for(t=t.split("").reverse().join("").replace(n,"");t.length!==(t=t.replace(i,"")).length;);return t.split("").reverse().join("")},buildURLFromParts:function(t){return t.scheme+t.netLoc+t.path+t.params+t.query+t.fragment}},t.exports=o},793:t=>{"use strict";function e(t){return t>=55296&&t<=56319}function r(t){return t>=56320&&t<=57343}t.exports=function(t){if("string"!=typeof t)throw new Error("Input must be string");for(var n=t.length,i=0,o=null,s=null,u=0;u<n;u++)r(o=t.charCodeAt(u))?null!=s&&e(s)?i+=1:i+=3:o<=127?i+=1:o>=128&&o<=2047?i+=2:o>=2048&&o<=65535&&(i+=3),s=o;return i}},9589:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0,e.default=function(t){return function(){return function(e){return function(r){var n=t[r.type];return e(n?n(r):r)}}}}},7910:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.DEFAULT_PORT_NAME=e.PATCH_STATE_TYPE=e.STATE_TYPE=e.DISPATCH_TYPE=void 0,e.DISPATCH_TYPE="chromex.dispatch",e.STATE_TYPE="chromex.state",e.PATCH_STATE_TYPE="chromex.patch_state",e.DEFAULT_PORT_NAME="chromex.port_name"},7045:(t,e,r)=>{"use strict";Object.defineProperty(e,"IF",{enumerable:!0,get:function(){return n.default}});i(r(6863)),i(r(4600));var n=i(r(8553));i(r(9589));function i(t){return t&&t.__esModule?t:{default:t}}},5277:(t,e)=>{"use strict";function r(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{},i=Object.keys(r);"function"==typeof Object.getOwnPropertySymbols&&(i=i.concat(Object.getOwnPropertySymbols(r).filter((function(t){return Object.getOwnPropertyDescriptor(r,t).enumerable})))),i.forEach((function(e){n(t,e,r[e])}))}return t}function n(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}Object.defineProperty(e,"__esModule",{value:!0}),e.withSerializer=e.withDeserializer=e.noop=void 0;var i=function(t){return t};e.noop=i;var o=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:i;return r({},t,t.payload?{payload:e(t.payload)}:{})},s=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:i,r=arguments.length>2?arguments[2]:void 0;return r?function(n){for(var i=arguments.length,s=new Array(i>1?i-1:0),u=1;u<i;u++)s[u-1]=arguments[u];return r.apply(void 0,[n].concat(s))?t.apply(void 0,[o(n,e)].concat(s)):t.apply(void 0,[n].concat(s))}:function(r){for(var n=arguments.length,i=new Array(n>1?n-1:0),s=1;s<n;s++)i[s-1]=arguments[s];return t.apply(void 0,[o(r,e)].concat(i))}};e.withDeserializer=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:i;return function(e){return function(r,n){return e(s(r,t,n))}}},e.withSerializer=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:i;return function(e){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;return function(){for(var n=arguments.length,i=new Array(n),s=0;s<n;s++)i[s]=arguments[s];if(i.length<=r)throw new Error("Message in request could not be serialized. "+"Expected message in position ".concat(r," but only received ").concat(i.length," args."));return i[r]=o(i[r],t),e.apply(void 0,i)}}}},6863:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var n=c(r(5089)),i=r(7910),o=r(5277),s=c(r(6610)),u=r(6179);function c(t){return t&&t.__esModule?t:{default:t}}function a(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function l(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var f={portName:i.DEFAULT_PORT_NAME,state:{},extensionId:null,serializer:o.noop,deserializer:o.noop,patchStrategy:s.default},h=function(){function t(){var e=this,r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:f,n=r.portName,s=void 0===n?f.portName:n,c=r.state,l=void 0===c?f.state:c,h=r.extensionId,p=void 0===h?f.extensionId:h,d=r.serializer,y=void 0===d?f.serializer:d,v=r.deserializer,b=void 0===v?f.deserializer:v,g=r.patchStrategy,m=void 0===g?f.patchStrategy:g;if(a(this,t),!s)throw new Error("portName is required in options");if("function"!=typeof y)throw new Error("serializer must be a function");if("function"!=typeof b)throw new Error("deserializer must be a function");if("function"!=typeof m)throw new Error("patchStrategy must be one of the included patching strategies or a custom patching function");this.portName=s,this.readyResolved=!1,this.readyPromise=new Promise((function(t){return e.readyResolve=t})),this.browserAPI=(0,u.getBrowserAPI)(),this.extensionId=p,this.port=this.browserAPI.runtime.connect(this.extensionId,{name:s}),this.safetyHandler=this.safetyHandler.bind(this),this.safetyMessage=this.browserAPI.runtime.onMessage.addListener(this.safetyHandler),this.serializedPortListener=(0,o.withDeserializer)(b)((function(){var t;return(t=e.port.onMessage).addListener.apply(t,arguments)})),this.serializedMessageSender=(0,o.withSerializer)(y)((function(){var t;return(t=e.browserAPI.runtime).sendMessage.apply(t,arguments)}),1),this.listeners=[],this.state=l,this.patchStrategy=m,this.serializedPortListener((function(t){switch(t.type){case i.STATE_TYPE:e.replaceState(t.payload),e.readyResolved||(e.readyResolved=!0,e.readyResolve());break;case i.PATCH_STATE_TYPE:e.patchState(t.payload)}})),this.dispatch=this.dispatch.bind(this)}var e,r;return e=t,(r=[{key:"ready",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;return null!==t?this.readyPromise.then(t):this.readyPromise}},{key:"subscribe",value:function(t){var e=this;return this.listeners.push(t),function(){e.listeners=e.listeners.filter((function(e){return e!==t}))}}},{key:"patchState",value:function(t){this.state=this.patchStrategy(this.state,t),this.listeners.forEach((function(t){return t()}))}},{key:"replaceState",value:function(t){this.state=t,this.listeners.forEach((function(t){return t()}))}},{key:"getState",value:function(){return this.state}},{key:"replaceReducer",value:function(){}},{key:"dispatch",value:function(t){var e=this;return new Promise((function(r,o){e.serializedMessageSender(e.extensionId,{type:i.DISPATCH_TYPE,portName:e.portName,payload:t},null,(function(t){var e=t.error,i=t.value;if(e){var s=new Error("".concat("\nLooks like there is an error in the background page. You might want to inspect your background page for more details.\n").concat(e));o((0,n.default)(s,e))}else r(i&&i.payload)}))}))}},{key:"safetyHandler",value:function(t){"storeReady"===t.action&&(this.browserAPI.runtime.onMessage.removeListener(this.safetyHandler),this.readyResolved||(this.readyResolved=!0,this.readyResolve()))}}])&&l(e.prototype,r),t}();e.default=h},4600:(t,e)=>{"use strict";function r(t){return function(t){if(Array.isArray(t)){for(var e=0,r=new Array(t.length);e<t.length;e++)r[e]=t[e];return r}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function n(){for(var t=arguments.length,e=new Array(t),r=0;r<t;r++)e[r]=arguments[r];return 0===e.length?function(t){return t}:1===e.length?e[0]:e.reduce((function(t,e){return function(){return t(e.apply(void 0,arguments))}}))}Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){for(var e=arguments.length,i=new Array(e>1?e-1:0),o=1;o<e;o++)i[o-1]=arguments[o];var s=function(){throw new Error("Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.")},u={getState:t.getState.bind(t),dispatch:function(){return s.apply(void 0,arguments)}};return i=(i||[]).map((function(t){return t(u)})),s=n.apply(void 0,r(i))(t.dispatch),t.dispatch=s,t}},9028:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.DIFF_STATUS_ARRAY_UPDATED=e.DIFF_STATUS_KEYS_UPDATED=e.DIFF_STATUS_REMOVED=e.DIFF_STATUS_UPDATED=void 0,e.DIFF_STATUS_UPDATED="updated",e.DIFF_STATUS_REMOVED="removed",e.DIFF_STATUS_KEYS_UPDATED="updated_keys",e.DIFF_STATUS_ARRAY_UPDATED="updated_array"},3410:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e){var r=[];return Object.keys(e).forEach((function(i){t[i]!==e[i]&&r.push({key:i,value:e[i],change:n.DIFF_STATUS_UPDATED})})),Object.keys(t).forEach((function(t){e.hasOwnProperty(t)||r.push({key:t,change:n.DIFF_STATUS_REMOVED})})),r};var n=r(9028)},6610:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e){var r=Object.assign({},t);return e.forEach((function(t){var e=t.change,i=t.key,o=t.value;switch(e){case n.DIFF_STATUS_UPDATED:r[i]=o;break;case n.DIFF_STATUS_REMOVED:Reflect.deleteProperty(r,i)}})),r};var n=r(9028)},6179:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.getBrowserAPI=function(){var t;try{t=r.g.chrome||r.g.browser||browser}catch(e){t=browser}if(!t)throw new Error("Browser API is not present");return t}},8553:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var n,i=r(7910),o=r(5277),s=r(6179),u=(n=r(3410))&&n.__esModule?n:{default:n},c={portName:i.DEFAULT_PORT_NAME,dispatchResponder:function(t,e){Promise.resolve(t).then((function(t){e({error:null,value:t})})).catch((function(t){console.error("error dispatching result:",t),e({error:t.message,value:null})}))},serializer:o.noop,deserializer:o.noop,diffStrategy:u.default};e.default=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:c,r=e.portName,n=void 0===r?c.portName:r,u=e.dispatchResponder,a=void 0===u?c.dispatchResponder:u,l=e.serializer,f=void 0===l?c.serializer:l,h=e.deserializer,p=void 0===h?c.deserializer:h,d=e.diffStrategy,y=void 0===d?c.diffStrategy:d;if(!n)throw new Error("portName is required in options");if("function"!=typeof f)throw new Error("serializer must be a function");if("function"!=typeof p)throw new Error("deserializer must be a function");if("function"!=typeof y)throw new Error("diffStrategy must be one of the included diffing strategies or a custom diff function");var v=(0,s.getBrowserAPI)(),b=function(e,r,o){if(e.type===i.DISPATCH_TYPE&&e.portName===n){var s=Object.assign({},e.payload,{_sender:r}),u=null;try{u=t.dispatch(s)}catch(t){u=Promise.reject(t.message),console.error(t)}return a(u,o),!0}},g=function(e){if(e.name===n){var r=(0,o.withSerializer)(f)((function(){return e.postMessage.apply(e,arguments)})),s=t.getState(),u=t.subscribe((function(){var e=t.getState(),n=y(s,e);n.length&&(s=e,r({type:i.PATCH_STATE_TYPE,payload:n}))}));e.onDisconnect.addListener(u),r({type:i.STATE_TYPE,payload:s})}},m=(0,o.withDeserializer)(p),w=function(t){return t.type===i.DISPATCH_TYPE&&t.portName===n};m((function(){var t;return(t=v.runtime.onMessage).addListener.apply(t,arguments)}))(b,w),v.runtime.onMessageExternal?m((function(){var t;return(t=v.runtime.onMessageExternal).addListener.apply(t,arguments)}))(b,w):console.warn("runtime.onMessageExternal is not supported"),v.runtime.onConnect.addListener(g),v.runtime.onConnectExternal?v.runtime.onConnectExternal.addListener(g):console.warn("runtime.onConnectExternal is not supported"),v.tabs.query({},(function(t){var e=!0,r=!1,n=void 0;try{for(var i,o=t[Symbol.iterator]();!(e=(i=o.next()).done);e=!0){var s=i.value;v.tabs.sendMessage(s.id,{action:"storeReady"},(function(){chrome.runtime.lastError}))}}catch(t){r=!0,n=t}finally{try{e||null==o.return||o.return()}finally{if(r)throw n}}}))}},9416:(t,e,r)=>{"use strict";"undefined"==typeof window?e.browser={}:e.browser=r(3150)},3150:function(t,e){var r,n;"undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self&&self,void 0===(n="function"==typeof(r=function(t){"use strict";if("undefined"==typeof browser||Object.getPrototypeOf(browser)!==Object.prototype){const e="The message port closed before a response was received.",r="Returning a Promise is the preferred way to send a reply from an onMessage/onMessageExternal listener, as the sendResponse will be removed from the specs (See https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/runtime/onMessage)",n=t=>{const n={alarms:{clear:{minArgs:0,maxArgs:1},clearAll:{minArgs:0,maxArgs:0},get:{minArgs:0,maxArgs:1},getAll:{minArgs:0,maxArgs:0}},bookmarks:{create:{minArgs:1,maxArgs:1},get:{minArgs:1,maxArgs:1},getChildren:{minArgs:1,maxArgs:1},getRecent:{minArgs:1,maxArgs:1},getSubTree:{minArgs:1,maxArgs:1},getTree:{minArgs:0,maxArgs:0},move:{minArgs:2,maxArgs:2},remove:{minArgs:1,maxArgs:1},removeTree:{minArgs:1,maxArgs:1},search:{minArgs:1,maxArgs:1},update:{minArgs:2,maxArgs:2}},browserAction:{disable:{minArgs:0,maxArgs:1,fallbackToNoCallback:!0},enable:{minArgs:0,maxArgs:1,fallbackToNoCallback:!0},getBadgeBackgroundColor:{minArgs:1,maxArgs:1},getBadgeText:{minArgs:1,maxArgs:1},getPopup:{minArgs:1,maxArgs:1},getTitle:{minArgs:1,maxArgs:1},openPopup:{minArgs:0,maxArgs:0},setBadgeBackgroundColor:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setBadgeText:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setIcon:{minArgs:1,maxArgs:1},setPopup:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setTitle:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0}},browsingData:{remove:{minArgs:2,maxArgs:2},removeCache:{minArgs:1,maxArgs:1},removeCookies:{minArgs:1,maxArgs:1},removeDownloads:{minArgs:1,maxArgs:1},removeFormData:{minArgs:1,maxArgs:1},removeHistory:{minArgs:1,maxArgs:1},removeLocalStorage:{minArgs:1,maxArgs:1},removePasswords:{minArgs:1,maxArgs:1},removePluginData:{minArgs:1,maxArgs:1},settings:{minArgs:0,maxArgs:0}},commands:{getAll:{minArgs:0,maxArgs:0}},contextMenus:{remove:{minArgs:1,maxArgs:1},removeAll:{minArgs:0,maxArgs:0},update:{minArgs:2,maxArgs:2}},cookies:{get:{minArgs:1,maxArgs:1},getAll:{minArgs:1,maxArgs:1},getAllCookieStores:{minArgs:0,maxArgs:0},remove:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}},devtools:{inspectedWindow:{eval:{minArgs:1,maxArgs:2,singleCallbackArg:!1}},panels:{create:{minArgs:3,maxArgs:3,singleCallbackArg:!0}}},downloads:{cancel:{minArgs:1,maxArgs:1},download:{minArgs:1,maxArgs:1},erase:{minArgs:1,maxArgs:1},getFileIcon:{minArgs:1,maxArgs:2},open:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},pause:{minArgs:1,maxArgs:1},removeFile:{minArgs:1,maxArgs:1},resume:{minArgs:1,maxArgs:1},search:{minArgs:1,maxArgs:1},show:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0}},extension:{isAllowedFileSchemeAccess:{minArgs:0,maxArgs:0},isAllowedIncognitoAccess:{minArgs:0,maxArgs:0}},history:{addUrl:{minArgs:1,maxArgs:1},deleteAll:{minArgs:0,maxArgs:0},deleteRange:{minArgs:1,maxArgs:1},deleteUrl:{minArgs:1,maxArgs:1},getVisits:{minArgs:1,maxArgs:1},search:{minArgs:1,maxArgs:1}},i18n:{detectLanguage:{minArgs:1,maxArgs:1},getAcceptLanguages:{minArgs:0,maxArgs:0}},identity:{launchWebAuthFlow:{minArgs:1,maxArgs:1}},idle:{queryState:{minArgs:1,maxArgs:1}},management:{get:{minArgs:1,maxArgs:1},getAll:{minArgs:0,maxArgs:0},getSelf:{minArgs:0,maxArgs:0},setEnabled:{minArgs:2,maxArgs:2},uninstallSelf:{minArgs:0,maxArgs:1}},notifications:{clear:{minArgs:1,maxArgs:1},create:{minArgs:1,maxArgs:2},getAll:{minArgs:0,maxArgs:0},getPermissionLevel:{minArgs:0,maxArgs:0},update:{minArgs:2,maxArgs:2}},pageAction:{getPopup:{minArgs:1,maxArgs:1},getTitle:{minArgs:1,maxArgs:1},hide:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setIcon:{minArgs:1,maxArgs:1},setPopup:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setTitle:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},show:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0}},permissions:{contains:{minArgs:1,maxArgs:1},getAll:{minArgs:0,maxArgs:0},remove:{minArgs:1,maxArgs:1},request:{minArgs:1,maxArgs:1}},runtime:{getBackgroundPage:{minArgs:0,maxArgs:0},getPlatformInfo:{minArgs:0,maxArgs:0},openOptionsPage:{minArgs:0,maxArgs:0},requestUpdateCheck:{minArgs:0,maxArgs:0},sendMessage:{minArgs:1,maxArgs:3},sendNativeMessage:{minArgs:2,maxArgs:2},setUninstallURL:{minArgs:1,maxArgs:1}},sessions:{getDevices:{minArgs:0,maxArgs:1},getRecentlyClosed:{minArgs:0,maxArgs:1},restore:{minArgs:0,maxArgs:1}},storage:{local:{clear:{minArgs:0,maxArgs:0},get:{minArgs:0,maxArgs:1},getBytesInUse:{minArgs:0,maxArgs:1},remove:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}},managed:{get:{minArgs:0,maxArgs:1},getBytesInUse:{minArgs:0,maxArgs:1}},sync:{clear:{minArgs:0,maxArgs:0},get:{minArgs:0,maxArgs:1},getBytesInUse:{minArgs:0,maxArgs:1},remove:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}}},tabs:{captureVisibleTab:{minArgs:0,maxArgs:2},create:{minArgs:1,maxArgs:1},detectLanguage:{minArgs:0,maxArgs:1},discard:{minArgs:0,maxArgs:1},duplicate:{minArgs:1,maxArgs:1},executeScript:{minArgs:1,maxArgs:2},get:{minArgs:1,maxArgs:1},getCurrent:{minArgs:0,maxArgs:0},getZoom:{minArgs:0,maxArgs:1},getZoomSettings:{minArgs:0,maxArgs:1},highlight:{minArgs:1,maxArgs:1},insertCSS:{minArgs:1,maxArgs:2},move:{minArgs:2,maxArgs:2},query:{minArgs:1,maxArgs:1},reload:{minArgs:0,maxArgs:2},remove:{minArgs:1,maxArgs:1},removeCSS:{minArgs:1,maxArgs:2},sendMessage:{minArgs:2,maxArgs:3},setZoom:{minArgs:1,maxArgs:2},setZoomSettings:{minArgs:1,maxArgs:2},update:{minArgs:1,maxArgs:2}},topSites:{get:{minArgs:0,maxArgs:0}},webNavigation:{getAllFrames:{minArgs:1,maxArgs:1},getFrame:{minArgs:1,maxArgs:1}},webRequest:{handlerBehaviorChanged:{minArgs:0,maxArgs:0}},windows:{create:{minArgs:0,maxArgs:1},get:{minArgs:1,maxArgs:2},getAll:{minArgs:0,maxArgs:1},getCurrent:{minArgs:0,maxArgs:1},getLastFocused:{minArgs:0,maxArgs:1},remove:{minArgs:1,maxArgs:1},update:{minArgs:2,maxArgs:2}}};if(0===Object.keys(n).length)throw new Error("api-metadata.json has not been included in browser-polyfill");class i extends WeakMap{constructor(t,e){super(e),this.createItem=t}get(t){return this.has(t)||this.set(t,this.createItem(t)),super.get(t)}}const o=(e,r)=>(...n)=>{t.runtime.lastError?e.reject(t.runtime.lastError):r.singleCallbackArg||n.length<=1&&!1!==r.singleCallbackArg?e.resolve(n[0]):e.resolve(n)},s=t=>1==t?"argument":"arguments",u=(t,e,r)=>new Proxy(e,{apply:(e,n,i)=>r.call(n,t,...i)});let c=Function.call.bind(Object.prototype.hasOwnProperty);const a=(t,e={},r={})=>{let n=Object.create(null),i={has:(e,r)=>r in t||r in n,get(i,l,f){if(l in n)return n[l];if(!(l in t))return;let h=t[l];if("function"==typeof h)if("function"==typeof e[l])h=u(t,t[l],e[l]);else if(c(r,l)){let e=((t,e)=>function(r,...n){if(n.length<e.minArgs)throw new Error(`Expected at least ${e.minArgs} ${s(e.minArgs)} for ${t}(), got ${n.length}`);if(n.length>e.maxArgs)throw new Error(`Expected at most ${e.maxArgs} ${s(e.maxArgs)} for ${t}(), got ${n.length}`);return new Promise(((i,s)=>{if(e.fallbackToNoCallback)try{r[t](...n,o({resolve:i,reject:s},e))}catch(o){console.warn(`${t} API method doesn't seem to support the callback parameter, falling back to call it without a callback: `,o),r[t](...n),e.fallbackToNoCallback=!1,e.noCallback=!0,i()}else e.noCallback?(r[t](...n),i()):r[t](...n,o({resolve:i,reject:s},e))}))})(l,r[l]);h=u(t,t[l],e)}else h=h.bind(t);else if("object"==typeof h&&null!==h&&(c(e,l)||c(r,l)))h=a(h,e[l],r[l]);else{if(!c(r,"*"))return Object.defineProperty(n,l,{configurable:!0,enumerable:!0,get:()=>t[l],set(e){t[l]=e}}),h;h=a(h,e[l],r["*"])}return n[l]=h,h},set:(e,r,i,o)=>(r in n?n[r]=i:t[r]=i,!0),defineProperty:(t,e,r)=>Reflect.defineProperty(n,e,r),deleteProperty:(t,e)=>Reflect.deleteProperty(n,e)},l=Object.create(t);return new Proxy(l,i)},l=t=>({addListener(e,r,...n){e.addListener(t.get(r),...n)},hasListener:(e,r)=>e.hasListener(t.get(r)),removeListener(e,r){e.removeListener(t.get(r))}});let f=!1;const h=new i((t=>"function"!=typeof t?t:function(e,n,i){let o,s,u=!1,c=new Promise((t=>{o=function(e){f||(console.warn(r,(new Error).stack),f=!0),u=!0,t(e)}}));try{s=t(e,n,o)}catch(t){s=Promise.reject(t)}const a=!0!==s&&((l=s)&&"object"==typeof l&&"function"==typeof l.then);var l;if(!0!==s&&!a&&!u)return!1;return(a?s:c).then((t=>{i(t)}),(t=>{let e;e=t&&(t instanceof Error||"string"==typeof t.message)?t.message:"An unexpected error occurred",i({__mozWebExtensionPolyfillReject__:!0,message:e})})).catch((t=>{console.error("Failed to send onMessage rejected reply",t)})),!0})),p=({reject:r,resolve:n},i)=>{t.runtime.lastError?t.runtime.lastError.message===e?n():r(t.runtime.lastError):i&&i.__mozWebExtensionPolyfillReject__?r(new Error(i.message)):n(i)},d=(t,e,r,...n)=>{if(n.length<e.minArgs)throw new Error(`Expected at least ${e.minArgs} ${s(e.minArgs)} for ${t}(), got ${n.length}`);if(n.length>e.maxArgs)throw new Error(`Expected at most ${e.maxArgs} ${s(e.maxArgs)} for ${t}(), got ${n.length}`);return new Promise(((t,e)=>{const i=p.bind(null,{resolve:t,reject:e});n.push(i),r.sendMessage(...n)}))},y={runtime:{onMessage:l(h),onMessageExternal:l(h),sendMessage:d.bind(null,"sendMessage",{minArgs:1,maxArgs:3})},tabs:{sendMessage:d.bind(null,"sendMessage",{minArgs:2,maxArgs:3})}},v={clear:{minArgs:1,maxArgs:1},get:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}};return n.privacy={network:{"*":v},services:{"*":v},websites:{"*":v}},a(t,y,n)};if("object"!=typeof chrome||!chrome||!chrome.runtime||!chrome.runtime.id)throw new Error("This script should only be loaded in a browser extension.");t.exports=n(chrome)}else t.exports=browser})?r.apply(e,[t]):r)||(t.exports=n)}},e={};function r(n){var i=e[n];if(void 0!==i)return i.exports;var o=e[n]={exports:{}};return t[n].call(o.exports,o,o.exports,r),o.exports}r.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return r.d(e,{a:e}),e},r.d=(t,e)=>{for(var n in e)r.o(e,n)&&!r.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),r.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},(()=>{"use strict";var t=r(9216),e=r(7045),n=r(4417),i=r(9416);const o={decrypt:async function(t,e,r){const n=await crypto.subtle.importKey("raw",e,"aes-cbc",!1,["decrypt"]);return await crypto.subtle.decrypt({name:"aes-cbc",iv:r},n,t)}};async function s(t,e=1){if(e<1)throw new Error("Attempts less then 1");let r=e;for(;r--;)try{return await t()}catch(t){if(r<1&&r<e){const t=100;await new Promise((e=>setTimeout(e,t)))}}throw new Error("Fetch error")}const u={fetchText:async function(t,e=1){return s((()=>fetch(t).then((t=>t.text()))),e)},fetchArrayBuffer:async function(t,e=1){return s((()=>fetch(t).then((t=>t.arrayBuffer()))),e)}};let c,a;const l=new WeakMap,f=new WeakMap,h=new WeakMap,p=new WeakMap,d=new WeakMap;let y={get(t,e,r){if(t instanceof IDBTransaction){if("done"===e)return f.get(t);if("objectStoreNames"===e)return t.objectStoreNames||h.get(t);if("store"===e)return r.objectStoreNames[1]?void 0:r.objectStore(r.objectStoreNames[0])}return b(t[e])},set:(t,e,r)=>(t[e]=r,!0),has:(t,e)=>t instanceof IDBTransaction&&("done"===e||"store"===e)||e in t};function v(t){return"function"==typeof t?(e=t)!==IDBDatabase.prototype.transaction||"objectStoreNames"in IDBTransaction.prototype?(a||(a=[IDBCursor.prototype.advance,IDBCursor.prototype.continue,IDBCursor.prototype.continuePrimaryKey])).includes(e)?function(...t){return e.apply(g(this),t),b(l.get(this))}:function(...t){return b(e.apply(g(this),t))}:function(t,...r){const n=e.call(g(this),t,...r);return h.set(n,t.sort?t.sort():[t]),b(n)}:(t instanceof IDBTransaction&&function(t){if(f.has(t))return;const e=new Promise(((e,r)=>{const n=()=>{t.removeEventListener("complete",i),t.removeEventListener("error",o),t.removeEventListener("abort",o)},i=()=>{e(),n()},o=()=>{r(t.error||new DOMException("AbortError","AbortError")),n()};t.addEventListener("complete",i),t.addEventListener("error",o),t.addEventListener("abort",o)}));f.set(t,e)}(t),r=t,(c||(c=[IDBDatabase,IDBObjectStore,IDBIndex,IDBCursor,IDBTransaction])).some((t=>r instanceof t))?new Proxy(t,y):t);var e,r}function b(t){if(t instanceof IDBRequest)return function(t){const e=new Promise(((e,r)=>{const n=()=>{t.removeEventListener("success",i),t.removeEventListener("error",o)},i=()=>{e(b(t.result)),n()},o=()=>{r(t.error),n()};t.addEventListener("success",i),t.addEventListener("error",o)}));return e.then((e=>{e instanceof IDBCursor&&l.set(e,t)})).catch((()=>{})),d.set(e,t),e}(t);if(p.has(t))return p.get(t);const e=v(t);return e!==t&&(p.set(t,e),d.set(e,t)),e}const g=t=>d.get(t);function m(t,e,{blocked:r,upgrade:n,blocking:i,terminated:o}={}){const s=indexedDB.open(t,e),u=b(s);return n&&s.addEventListener("upgradeneeded",(t=>{n(b(s.result),t.oldVersion,t.newVersion,b(s.transaction))})),r&&s.addEventListener("blocked",(()=>r())),u.then((t=>{o&&t.addEventListener("close",(()=>o())),i&&t.addEventListener("versionchange",(()=>i()))})).catch((()=>{})),u}function w(t,{blocked:e}={}){const r=indexedDB.deleteDatabase(t);return e&&r.addEventListener("blocked",(()=>e())),b(r).then((()=>{}))}const x=["get","getKey","getAll","getAllKeys","count"],A=["put","add","delete","clear"],S=new Map;function _(t,e){if(!(t instanceof IDBDatabase)||e in t||"string"!=typeof e)return;if(S.get(e))return S.get(e);const r=e.replace(/FromIndex$/,""),n=e!==r,i=A.includes(r);if(!(r in(n?IDBIndex:IDBObjectStore).prototype)||!i&&!x.includes(r))return;const o=async function(t,...e){const o=this.transaction(t,i?"readwrite":"readonly");let s=o.store;return n&&(s=s.index(e.shift())),(await Promise.all([s[r](...e),i&&o.done]))[0]};return S.set(e,o),o}var T;T=y,y={...T,get:(t,e,r)=>_(t,e)||T.get(t,e,r),has:(t,e)=>!!_(t,e)||T.has(t,e)};var E=r(202),O=r.n(E);const j={};class P{constructor(t,e){this.length=t,this.id=e,this.objectStoreName="chunks"}async deleteDB(){if(!this.db)throw Error();this.db.close(),await w(this.id)}async openDB(){const t=this.objectStoreName,e=await m(this.id,1,{upgrade(e){e.createObjectStore(t,{keyPath:"index"}).createIndex("index","index",{unique:!0})}});this.db=e}async write(t,e){const r=new Uint8Array(e);return this.db||await this.openDB(),await this.db.add(this.objectStoreName,{data:r,index:t}),Promise.resolve()}async stream(){if(!this.db)throw Error();const t=this.db.transaction(this.objectStoreName).objectStore(this.objectStoreName);let e=await t.openCursor(),r=!0;return new ReadableStream({pull:t=>{r&&(function e(r){if(r)return t.enqueue(r.value.data),r.continue().then((t=>{e(t)}));t.close()}(e),r=!1)}},{})}async getLink(){if(!this.db)throw Error();const t=await this.stream(),e=new Response(t,{headers:{"Content-Type":"video/mp2t"}}),r=await e.blob();return URL.createObjectURL(r)}}const I={getBucket:function(t){return Promise.resolve(j[t])},createBucket:async function(t,e){return j[t]=new P(e,t),localStorage.setItem("dbs",JSON.stringify(Object.keys(j))),Promise.resolve()},deleteBucket:async function(t){return await j[t].deleteDB(),delete j[t],localStorage.setItem("dbs",JSON.stringify(Object.keys(j))),Promise.resolve()},saveAs:async function(t,e,{dialog:r}){window.URL=window.URL||window.webkitURL;const n=O()(null!=t?t:"steam.mp4");return await i.browser.downloads.download({url:e,saveAs:r,conflictAction:"uniquify",filename:n}),Promise.resolve()},cleanup:async function(){const t=localStorage.getItem("dbs");if(!t)return;const e=JSON.parse(t);for(const t of e)(await m(t,1)).close(),await w(t)}};var N=r(8908),k=r.n(N);function D(){return(D=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var r=arguments[e];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(t[n]=r[n])}return t}).apply(this,arguments)}function C(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}var L=function(){function t(){this.listeners={}}var e=t.prototype;return e.on=function(t,e){this.listeners[t]||(this.listeners[t]=[]),this.listeners[t].push(e)},e.off=function(t,e){if(!this.listeners[t])return!1;var r=this.listeners[t].indexOf(e);return this.listeners[t].splice(r,1),r>-1},e.trigger=function(t){var e,r,n,i=this.listeners[t];if(i)if(2===arguments.length)for(r=i.length,e=0;e<r;++e)i[e].call(this,arguments[1]);else for(n=Array.prototype.slice.call(arguments,1),r=i.length,e=0;e<r;++e)i[e].apply(this,n)},e.dispose=function(){this.listeners={}},e.pipe=function(t){this.on("data",(function(e){t.push(e)}))},t}(),M=function(t){function e(){var e;return(e=t.call(this)||this).buffer="",e}return C(e,t),e.prototype.push=function(t){var e;for(this.buffer+=t,e=this.buffer.indexOf("\n");e>-1;e=this.buffer.indexOf("\n"))this.trigger("data",this.buffer.substring(0,e)),this.buffer=this.buffer.substring(e+1)},e}(L),R=function(t){for(var e,r=t.split(new RegExp('(?:^|,)((?:[^=]*)=(?:"[^"]*"|[^,]*))')),n={},i=r.length;i--;)""!==r[i]&&((e=/([^=]*)=(.*)/.exec(r[i]).slice(1))[0]=e[0].replace(/^\s+|\s+$/g,""),e[1]=e[1].replace(/^\s+|\s+$/g,""),e[1]=e[1].replace(/^['"](.*)['"]$/g,"$1"),n[e[0]]=e[1]);return n},V=function(t){function e(){var e;return(e=t.call(this)||this).customParsers=[],e.tagMappers=[],e}C(e,t);var r=e.prototype;return r.push=function(t){var e,r,n=this;0!==(t=t.trim()).length&&("#"===t[0]?this.tagMappers.reduce((function(e,r){var n=r(t);return n===t?e:e.concat([n])}),[t]).forEach((function(t){for(var i=0;i<n.customParsers.length;i++)if(n.customParsers[i].call(n,t))return;if(0===t.indexOf("#EXT"))if(t=t.replace("\r",""),e=/^#EXTM3U/.exec(t))n.trigger("data",{type:"tag",tagType:"m3u"});else{if(e=/^#EXTINF:?([0-9\.]*)?,?(.*)?$/.exec(t))return r={type:"tag",tagType:"inf"},e[1]&&(r.duration=parseFloat(e[1])),e[2]&&(r.title=e[2]),void n.trigger("data",r);if(e=/^#EXT-X-TARGETDURATION:?([0-9.]*)?/.exec(t))return r={type:"tag",tagType:"targetduration"},e[1]&&(r.duration=parseInt(e[1],10)),void n.trigger("data",r);if(e=/^#ZEN-TOTAL-DURATION:?([0-9.]*)?/.exec(t))return r={type:"tag",tagType:"totalduration"},e[1]&&(r.duration=parseInt(e[1],10)),void n.trigger("data",r);if(e=/^#EXT-X-VERSION:?([0-9.]*)?/.exec(t))return r={type:"tag",tagType:"version"},e[1]&&(r.version=parseInt(e[1],10)),void n.trigger("data",r);if(e=/^#EXT-X-MEDIA-SEQUENCE:?(\-?[0-9.]*)?/.exec(t))return r={type:"tag",tagType:"media-sequence"},e[1]&&(r.number=parseInt(e[1],10)),void n.trigger("data",r);if(e=/^#EXT-X-DISCONTINUITY-SEQUENCE:?(\-?[0-9.]*)?/.exec(t))return r={type:"tag",tagType:"discontinuity-sequence"},e[1]&&(r.number=parseInt(e[1],10)),void n.trigger("data",r);if(e=/^#EXT-X-PLAYLIST-TYPE:?(.*)?$/.exec(t))return r={type:"tag",tagType:"playlist-type"},e[1]&&(r.playlistType=e[1]),void n.trigger("data",r);if(e=/^#EXT-X-BYTERANGE:?([0-9.]*)?@?([0-9.]*)?/.exec(t))return r={type:"tag",tagType:"byterange"},e[1]&&(r.length=parseInt(e[1],10)),e[2]&&(r.offset=parseInt(e[2],10)),void n.trigger("data",r);if(e=/^#EXT-X-ALLOW-CACHE:?(YES|NO)?/.exec(t))return r={type:"tag",tagType:"allow-cache"},e[1]&&(r.allowed=!/NO/.test(e[1])),void n.trigger("data",r);if(e=/^#EXT-X-MAP:?(.*)$/.exec(t)){if(r={type:"tag",tagType:"map"},e[1]){var o=R(e[1]);if(o.URI&&(r.uri=o.URI),o.BYTERANGE){var s=o.BYTERANGE.split("@"),u=s[0],c=s[1];r.byterange={},u&&(r.byterange.length=parseInt(u,10)),c&&(r.byterange.offset=parseInt(c,10))}}n.trigger("data",r)}else if(e=/^#EXT-X-STREAM-INF:?(.*)$/.exec(t)){if(r={type:"tag",tagType:"stream-inf"},e[1]){if(r.attributes=R(e[1]),r.attributes.RESOLUTION){var a=r.attributes.RESOLUTION.split("x"),l={};a[0]&&(l.width=parseInt(a[0],10)),a[1]&&(l.height=parseInt(a[1],10)),r.attributes.RESOLUTION=l}r.attributes.BANDWIDTH&&(r.attributes.BANDWIDTH=parseInt(r.attributes.BANDWIDTH,10)),r.attributes["PROGRAM-ID"]&&(r.attributes["PROGRAM-ID"]=parseInt(r.attributes["PROGRAM-ID"],10))}n.trigger("data",r)}else{if(e=/^#EXT-X-MEDIA:?(.*)$/.exec(t))return r={type:"tag",tagType:"media"},e[1]&&(r.attributes=R(e[1])),void n.trigger("data",r);if(e=/^#EXT-X-ENDLIST/.exec(t))n.trigger("data",{type:"tag",tagType:"endlist"});else if(e=/^#EXT-X-DISCONTINUITY/.exec(t))n.trigger("data",{type:"tag",tagType:"discontinuity"});else{if(e=/^#EXT-X-PROGRAM-DATE-TIME:?(.*)$/.exec(t))return r={type:"tag",tagType:"program-date-time"},e[1]&&(r.dateTimeString=e[1],r.dateTimeObject=new Date(e[1])),void n.trigger("data",r);if(e=/^#EXT-X-KEY:?(.*)$/.exec(t))return r={type:"tag",tagType:"key"},e[1]&&(r.attributes=R(e[1]),r.attributes.IV&&("0x"===r.attributes.IV.substring(0,2).toLowerCase()&&(r.attributes.IV=r.attributes.IV.substring(2)),r.attributes.IV=r.attributes.IV.match(/.{8}/g),r.attributes.IV[0]=parseInt(r.attributes.IV[0],16),r.attributes.IV[1]=parseInt(r.attributes.IV[1],16),r.attributes.IV[2]=parseInt(r.attributes.IV[2],16),r.attributes.IV[3]=parseInt(r.attributes.IV[3],16),r.attributes.IV=new Uint32Array(r.attributes.IV))),void n.trigger("data",r);if(e=/^#EXT-X-START:?(.*)$/.exec(t))return r={type:"tag",tagType:"start"},e[1]&&(r.attributes=R(e[1]),r.attributes["TIME-OFFSET"]=parseFloat(r.attributes["TIME-OFFSET"]),r.attributes.PRECISE=/YES/.test(r.attributes.PRECISE)),void n.trigger("data",r);if(e=/^#EXT-X-CUE-OUT-CONT:?(.*)?$/.exec(t))return r={type:"tag",tagType:"cue-out-cont"},e[1]?r.data=e[1]:r.data="",void n.trigger("data",r);if(e=/^#EXT-X-CUE-OUT:?(.*)?$/.exec(t))return r={type:"tag",tagType:"cue-out"},e[1]?r.data=e[1]:r.data="",void n.trigger("data",r);if(e=/^#EXT-X-CUE-IN:?(.*)?$/.exec(t))return r={type:"tag",tagType:"cue-in"},e[1]?r.data=e[1]:r.data="",void n.trigger("data",r);n.trigger("data",{type:"tag",data:t.slice(4)})}}}else n.trigger("data",{type:"comment",text:t.slice(1)})})):this.trigger("data",{type:"uri",uri:t}))},r.addParser=function(t){var e=this,r=t.expression,n=t.customType,i=t.dataParser,o=t.segment;"function"!=typeof i&&(i=function(t){return t}),this.customParsers.push((function(t){if(r.exec(t))return e.trigger("data",{type:"custom",data:i(t),customType:n,segment:o}),!0}))},r.addTagMapper=function(t){var e=t.expression,r=t.map;this.tagMappers.push((function(t){return e.test(t)?r(t):t}))},e}(L);function F(t){for(var e=k().atob(t||""),r=new Uint8Array(e.length),n=0;n<e.length;n++)r[n]=e.charCodeAt(n);return r}var U=function(t){function e(){var e;(e=t.call(this)||this).lineStream=new M,e.parseStream=new V,e.lineStream.pipe(e.parseStream);var r,n,i=function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(e),o=[],s={},u=function(){},c={AUDIO:{},VIDEO:{},"CLOSED-CAPTIONS":{},SUBTITLES:{}},a=0;return e.manifest={allowCache:!0,discontinuityStarts:[],segments:[]},e.parseStream.on("data",(function(t){var e,l;({tag:function(){({"allow-cache":function(){this.manifest.allowCache=t.allowed,"allowed"in t||(this.trigger("info",{message:"defaulting allowCache to YES"}),this.manifest.allowCache=!0)},byterange:function(){var e={};"length"in t&&(s.byterange=e,e.length=t.length,"offset"in t||(this.trigger("info",{message:"defaulting offset to zero"}),t.offset=0)),"offset"in t&&(s.byterange=e,e.offset=t.offset)},endlist:function(){this.manifest.endList=!0},inf:function(){"mediaSequence"in this.manifest||(this.manifest.mediaSequence=0,this.trigger("info",{message:"defaulting media sequence to zero"})),"discontinuitySequence"in this.manifest||(this.manifest.discontinuitySequence=0,this.trigger("info",{message:"defaulting discontinuity sequence to zero"})),t.duration>0&&(s.duration=t.duration),0===t.duration&&(s.duration=.01,this.trigger("info",{message:"updating zero segment duration to a small value"})),this.manifest.segments=o},key:function(){if(t.attributes)if("NONE"!==t.attributes.METHOD)if(t.attributes.URI){if("urn:uuid:edef8ba9-79d6-4ace-a3c8-27dcd51d21ed"===t.attributes.KEYFORMAT)return-1===["SAMPLE-AES","SAMPLE-AES-CTR","SAMPLE-AES-CENC"].indexOf(t.attributes.METHOD)?void this.trigger("warn",{message:"invalid key method provided for Widevine"}):("SAMPLE-AES-CENC"===t.attributes.METHOD&&this.trigger("warn",{message:"SAMPLE-AES-CENC is deprecated, please use SAMPLE-AES-CTR instead"}),"data:text/plain;base64,"!==t.attributes.URI.substring(0,23)?void this.trigger("warn",{message:"invalid key URI provided for Widevine"}):t.attributes.KEYID&&"0x"===t.attributes.KEYID.substring(0,2)?void(this.manifest.contentProtection={"com.widevine.alpha":{attributes:{schemeIdUri:t.attributes.KEYFORMAT,keyId:t.attributes.KEYID.substring(2)},pssh:F(t.attributes.URI.split(",")[1])}}):void this.trigger("warn",{message:"invalid key ID provided for Widevine"}));t.attributes.METHOD||this.trigger("warn",{message:"defaulting key method to AES-128"}),n={method:t.attributes.METHOD||"AES-128",uri:t.attributes.URI},void 0!==t.attributes.IV&&(n.iv=t.attributes.IV)}else this.trigger("warn",{message:"ignoring key declaration without URI"});else n=null;else this.trigger("warn",{message:"ignoring key declaration without attribute list"})},"media-sequence":function(){isFinite(t.number)?this.manifest.mediaSequence=t.number:this.trigger("warn",{message:"ignoring invalid media sequence: "+t.number})},"discontinuity-sequence":function(){isFinite(t.number)?(this.manifest.discontinuitySequence=t.number,a=t.number):this.trigger("warn",{message:"ignoring invalid discontinuity sequence: "+t.number})},"playlist-type":function(){/VOD|EVENT/.test(t.playlistType)?this.manifest.playlistType=t.playlistType:this.trigger("warn",{message:"ignoring unknown playlist type: "+t.playlist})},map:function(){r={},t.uri&&(r.uri=t.uri),t.byterange&&(r.byterange=t.byterange)},"stream-inf":function(){this.manifest.playlists=o,this.manifest.mediaGroups=this.manifest.mediaGroups||c,t.attributes?(s.attributes||(s.attributes={}),D(s.attributes,t.attributes)):this.trigger("warn",{message:"ignoring empty stream-inf attributes"})},media:function(){if(this.manifest.mediaGroups=this.manifest.mediaGroups||c,t.attributes&&t.attributes.TYPE&&t.attributes["GROUP-ID"]&&t.attributes.NAME){var r=this.manifest.mediaGroups[t.attributes.TYPE];r[t.attributes["GROUP-ID"]]=r[t.attributes["GROUP-ID"]]||{},e=r[t.attributes["GROUP-ID"]],(l={default:/yes/i.test(t.attributes.DEFAULT)}).default?l.autoselect=!0:l.autoselect=/yes/i.test(t.attributes.AUTOSELECT),t.attributes.LANGUAGE&&(l.language=t.attributes.LANGUAGE),t.attributes.URI&&(l.uri=t.attributes.URI),t.attributes["INSTREAM-ID"]&&(l.instreamId=t.attributes["INSTREAM-ID"]),t.attributes.CHARACTERISTICS&&(l.characteristics=t.attributes.CHARACTERISTICS),t.attributes.FORCED&&(l.forced=/yes/i.test(t.attributes.FORCED)),e[t.attributes.NAME]=l}else this.trigger("warn",{message:"ignoring incomplete or missing media group"})},discontinuity:function(){a+=1,s.discontinuity=!0,this.manifest.discontinuityStarts.push(o.length)},"program-date-time":function(){void 0===this.manifest.dateTimeString&&(this.manifest.dateTimeString=t.dateTimeString,this.manifest.dateTimeObject=t.dateTimeObject),s.dateTimeString=t.dateTimeString,s.dateTimeObject=t.dateTimeObject},targetduration:function(){!isFinite(t.duration)||t.duration<0?this.trigger("warn",{message:"ignoring invalid target duration: "+t.duration}):this.manifest.targetDuration=t.duration},totalduration:function(){!isFinite(t.duration)||t.duration<0?this.trigger("warn",{message:"ignoring invalid total duration: "+t.duration}):this.manifest.totalDuration=t.duration},start:function(){t.attributes&&!isNaN(t.attributes["TIME-OFFSET"])?this.manifest.start={timeOffset:t.attributes["TIME-OFFSET"],precise:t.attributes.PRECISE}:this.trigger("warn",{message:"ignoring start declaration without appropriate attribute list"})},"cue-out":function(){s.cueOut=t.data},"cue-out-cont":function(){s.cueOutCont=t.data},"cue-in":function(){s.cueIn=t.data}}[t.tagType]||u).call(i)},uri:function(){s.uri=t.uri,o.push(s),this.manifest.targetDuration&&!("duration"in s)&&(this.trigger("warn",{message:"defaulting segment duration to the target duration"}),s.duration=this.manifest.targetDuration),n&&(s.key=n),s.timeline=a,r&&(s.map=r),s={}},comment:function(){},custom:function(){t.segment?(s.custom=s.custom||{},s.custom[t.customType]=t.data):(this.manifest.custom=this.manifest.custom||{},this.manifest.custom[t.customType]=t.data)}})[t.type].call(i)})),e}C(e,t);var r=e.prototype;return r.push=function(t){this.lineStream.push(t)},r.end=function(){this.lineStream.push("\n")},r.addParser=function(t){this.parseStream.addParser(t)},r.addTagMapper=function(t){this.parseStream.addTagMapper(t)},e}(L),Z=r(9945),z="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto),B=new Uint8Array(16);function W(){if(!z)throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return z(B)}for(var Y=[],q=0;q<256;++q)Y[q]=(q+256).toString(16).substr(1);const K=function(t,e,r){var n=e&&r||0;"string"==typeof t&&(e="binary"===t?new Array(16):null,t=null);var i=(t=t||{}).random||(t.rng||W)();if(i[6]=15&i[6]|64,i[8]=63&i[8]|128,e)for(var o=0;o<16;++o)e[n+o]=i[o];return e||function(t,e){var r=e||0,n=Y;return[n[t[r++]],n[t[r++]],n[t[r++]],n[t[r++]],"-",n[t[r++]],n[t[r++]],"-",n[t[r++]],n[t[r++]],"-",n[t[r++]],n[t[r++]],"-",n[t[r++]],n[t[r++]],n[t[r++]],n[t[r++]],n[t[r++]],n[t[r++]]].join("")}(i)},X={parseLevelPlaylist(t,e){const r=new U;return r.push(t),r.manifest.segments.map(((t,r)=>({index:r,key:t.key?{iv:t.key.iv,uri:(0,Z.buildAbsoluteURL)(e,t.key.uri)}:{iv:null,uri:null},uri:(0,Z.buildAbsoluteURL)(e,t.uri)})))},parseMasterPlaylist(t,e){var r,n;const i=new U;return i.push(t),(null!==(n=null===(r=i.manifest)||void 0===r?void 0:r.playlists)&&void 0!==n?n:[]).map(((t,r)=>{var n,i;return{index:r,id:K(),playlistID:e,bitrate:t.attributes.BANDWIDTH,height:null===(n=t.attributes.RESOLUTION)||void 0===n?void 0:n.height,width:null===(i=t.attributes.RESOLUTION)||void 0===i?void 0:i.width,uri:(0,Z.buildAbsoluteURL)(e,t.uri)}}))}};(async()=>{const r=await async function(){const t=(await i.browser.storage.local.get(["state"])).state;if(t)return{config:t.config,playlists:{playlists:{},playlistsStatus:{}},jobs:{jobs:{},jobsStatus:{}},levels:{levels:{}},tabs:{current:{id:-1}}}}(),s=(0,t.M)({decryptor:o,fs:I,loader:u,parser:X},r);(0,e.IF)(s),s.subscribe((()=>{!async function(t){t&&await i.browser.storage.local.set({state:t})}(s.getState())})),function(t){!function(t){i.browser.tabs.onActivated.addListener((async e=>{t.dispatch(n.tabsSlice.actions.setTab({tab:{id:e.tabId}}))}))}(t),function(t){i.browser.webRequest.onResponseStarted.addListener((async e=>{if(e.tabId<0)return;const r=await i.browser.tabs.get(e.tabId);await i.browser.browserAction.setIcon({tabId:r.id,path:{16:"assets/icons/16-new.png",48:"assets/icons/48-new.png",128:"assets/icons/128-new.png",256:"assets/icons/256-new.png"}}),t.dispatch(n.playlistsSlice.actions.addPlaylist({id:e.url,uri:e.url,initiator:r.url,pageTitle:r.title,createdAt:Date.now()}))}),{types:["xmlhttprequest"],urls:["http://*/*.m3u8","https://*/*.m3u8","http://*/*.m3u8?*","https://*/*.m3u8?*"]})}(t)}(s)})()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
